{
    "cache_elmo.py": {
        "tensorflow": {
            "placeholder_21": {
                "variable": {
                    "value": "token_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "len_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_28": {
                "variable": {
                    "value": "lm_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([word_emb, word_emb], -1), lm_embeddings['lstm_outputs1'], lm_embeddings['lstm_outputs2']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConfigProto_111": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_113": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_28": {
                "values": {
                    "value": "[word_emb, word_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "coref_ops.py": {
        "tensorflow": {
            "load_op_library_8": {
                "variable": {
                    "value": "coref_op_library",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "./coref_kernels.so",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "PaddingFIFOQueue_86": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "dtypes",
                    "type": "variable",
                    "possible_values": []
                },
                "shapes": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_92": {
                "variable": {
                    "value": "self.reset_global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "self.max_eval_f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "max_eval_f1",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_94": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.config['decay_frequency']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.config['decay_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_96": {
                "variable": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_97": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_98": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.config['max_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_125": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'module/' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "equal_325": {
                "variable": {
                    "value": "same_start",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labeled_starts, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(candidate_starts, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_326": {
                "variable": {
                    "value": "same_end",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labeled_ends, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(candidate_ends, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_327": {
                "variable": {
                    "value": "same_span",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labeled_starts, 1), tf.expand_dims(candidate_starts, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "same_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labeled_ends, 1), tf.expand_dims(candidate_ends, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_328": {
                "variable": {
                    "value": "candidate_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.to_int32(same_span)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_329": {
                "variable": {
                    "value": "candidate_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidate_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(labels, 0), tf.to_int32(same_span))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_339": {
                "variable": {
                    "value": "num_cdd_in_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(top_span_cdd_pool_flag, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_341": {
                "variable": {
                    "value": "top_span_range_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(num_cdd_in_pool, tf.int32), tf.range(1, num_cdd_in_dial + 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_349": {
                "variable": {
                    "value": "(_, top_antecedents)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fast_antecedent_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_span_mention_scores, 1) + tf.expand_dims(top_span_mention_scores, 0)",
                            "BinOp"
                        ],
                        [
                            "fast_antecedent_scores + self.get_fast_antecedent_scores(top_span_emb)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(self.config['max_top_antecedents'], k)",
                            "Call"
                        ],
                        [
                            "util.shape(top_antecedents, 1)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_357": {
                "variable": {
                    "value": "top_antecedent_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(c) + 1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_360": {
                "variable": {
                    "value": "top_antecedents",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "raw_top_antecedents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(k), 1) - top_antecedent_offsets",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_406": {
                "variable": {
                    "value": "context_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "context_emb_list_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[context_word_emb_cdd]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_407": {
                "variable": {
                    "value": "head_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "head_emb_list_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[head_word_emb_cdd]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_410": {
                "variable": {
                    "value": "context_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "context_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[context_word_emb]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_411": {
                "variable": {
                    "value": "head_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "head_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[head_word_emb]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_413": {
                "variable": {
                    "value": "max_span_width_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "text_len_cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_ends_caption - candidate_starts_caption + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_415": {
                "variable": {
                    "value": "span_indices_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "text_len[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "span_indices_cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(max_span_width_cap), 0) + tf.expand_dims(candidate_starts_caption, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(text_len[0] - 1, span_indices_cap)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_416": {
                "variable": {
                    "value": "context_emb_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_emb[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_indices_cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(max_span_width_cap), 0) + tf.expand_dims(candidate_starts_caption, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(text_len[0] - 1, span_indices_cap)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_417": {
                "variable": {
                    "value": "head_emb_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "head_emb[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_indices_cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(max_span_width_cap), 0) + tf.expand_dims(candidate_starts_caption, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(text_len[0] - 1, span_indices_cap)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_433": {
                "variable": {
                    "value": "flattened_lm_emb_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lm_emb_cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(candidates), max((c.shape[0] for c in candidates)), self.lm_size, self.lm_layers])",
                            "Call"
                        ],
                        [
                            "np.zeros([1, 1, self.lm_size, self.lm_layers])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_candidates_cap * max_candidate_length_cap * lm_emb_size, lm_num_layers]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_434": {
                "variable": {
                    "value": "flattened_aggregated_lm_emb_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flattened_lm_emb_cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(lm_emb_cap, [num_candidates_cap * max_candidate_length_cap * lm_emb_size, lm_num_layers])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(self.lm_weights, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_435": {
                "variable": {
                    "value": "aggregated_lm_emb_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_aggregated_lm_emb_cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(flattened_lm_emb_cap, tf.expand_dims(self.lm_weights, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_candidates_cap, max_candidate_length_cap, lm_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_438": {
                "variable": {
                    "value": "flattened_lm_emb_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lm_emb_dial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences), max((s.shape[0] for s in sentences)), self.lm_size, self.lm_layers])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences_dial * max_sentence_length_dial * lm_emb_size, lm_num_layers]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_439": {
                "variable": {
                    "value": "flattened_aggregated_lm_emb_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flattened_lm_emb_dial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(lm_emb_dial, [num_sentences_dial * max_sentence_length_dial * lm_emb_size, lm_num_layers])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(self.lm_weights, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_440": {
                "variable": {
                    "value": "aggregated_lm_emb_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_aggregated_lm_emb_dial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(flattened_lm_emb_dial, tf.expand_dims(self.lm_weights, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences_dial, max_sentence_length_dial, lm_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_445": {
                "variable": {
                    "value": "flattened_lm_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lm_emb_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(candidates), max((c.shape[0] for c in candidates)), self.lm_size, self.lm_layers])",
                            "Call"
                        ],
                        [
                            "self.load_lm_embeddings_cdd(cdd_examples)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_candidates_cdd * max_candidate_length_cdd * lm_emb_size, lm_num_layers]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_446": {
                "variable": {
                    "value": "flattened_aggregated_lm_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flattened_lm_emb_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(lm_emb_cdd, [num_candidates_cdd * max_candidate_length_cdd * lm_emb_size, lm_num_layers])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(self.lm_weights, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_447": {
                "variable": {
                    "value": "aggregated_lm_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_aggregated_lm_emb_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(flattened_lm_emb_cdd, tf.expand_dims(self.lm_weights, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_candidates_cdd, max_candidate_length_cdd, lm_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_450": {
                "variable": {
                    "value": "context_emb_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[context_emb[1:, :max_sentence_length_dial], aggregated_lm_emb_dial]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_451": {
                "variable": {
                    "value": "context_emb_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[context_emb_cap, aggregated_lm_emb_cap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_453": {
                "variable": {
                    "value": "context_emb_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_emb_dial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([context_emb[1:, :max_sentence_length_dial], aggregated_lm_emb_dial], 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(context_emb_dial, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_454": {
                "variable": {
                    "value": "context_emb_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_emb_cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(context_emb[0], span_indices_cap)",
                            "Call"
                        ],
                        [
                            "tf.concat([context_emb_cap, aggregated_lm_emb_cap], 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(context_emb_cap, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_455": {
                "variable": {
                    "value": "head_emb_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_emb_cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(head_emb[0], span_indices_cap)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(head_emb_cap, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_457": {
                "variable": {
                    "value": "context_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[context_emb_cdd, aggregated_lm_emb_cdd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_458": {
                "variable": {
                    "value": "context_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_emb_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(context_emb_list_cdd, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([context_emb_cdd, aggregated_lm_emb_cdd], 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(context_emb_cdd, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_459": {
                "variable": {
                    "value": "head_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_emb_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(head_emb_list_cdd, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(head_emb_cdd, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_463": {
                "variable": {
                    "value": "text_len_mask_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "text_len_dial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_len[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_sentence_length_dial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.shape(lm_emb_dial, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_469": {
                "variable": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "text_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(s) for s in sentences])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_470": {
                "variable": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([num_words - num_words_dial, util.shape(context_outputs_dial, 1)]), context_outputs_dial]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_474": {
                "variable": {
                    "value": "sentence_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(num_sentences), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, max_sentence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_475": {
                "variable": {
                    "value": "text_len_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "text_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(s) for s in sentences])",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_sentence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max((len(s) for s in sentences))",
                            "Call"
                        ],
                        [
                            "tf.shape(context_word_emb)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(emb)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_479": {
                "variable": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(num_words), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.max_span_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_481": {
                "variable": {
                    "value": "candidate_start_sentence_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flattened_sentence_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flatten_emb_by_sentence(sentence_indices, text_len_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.concat([candidate_starts_cdd, candidate_starts_caption, candidate_starts_dial], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_482": {
                "variable": {
                    "value": "candidate_end_sentence_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flattened_sentence_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flatten_emb_by_sentence(sentence_indices, text_len_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.minimum(candidate_ends, num_words - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_483": {
                "variable": {
                    "value": "candidate_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "candidate_ends < num_words",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(candidate_start_sentence_indices, candidate_end_sentence_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_485": {
                "variable": {
                    "value": "candidate_mask_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "candidate_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(candidate_ends < num_words, tf.equal(candidate_start_sentence_indices, candidate_end_sentence_indices))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "candidate_starts >= text_len[0]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_486": {
                "variable": {
                    "value": "flattened_candidate_mask_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "candidate_mask_dial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(candidate_mask, candidate_starts >= text_len[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_488": {
                "variable": {
                    "value": "candidate_starts_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(candidate_starts, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "flattened_candidate_mask_dial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(candidate_mask_dial, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_489": {
                "variable": {
                    "value": "candidate_ends_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(candidate_ends, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "flattened_candidate_mask_dial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(candidate_mask_dial, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_537": {
                "variable": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[candidate_starts_cdd, candidate_starts_caption, candidate_starts_dial]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_538": {
                "variable": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[candidate_ends_cdd, candidate_ends_caption, candidate_ends_dial]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_539": {
                "variable": {
                    "value": "candidate_span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[candidate_span_emb_cdd, candidate_span_emb_cap, candidate_span_emb_dial]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_542": {
                "variable": {
                    "value": "candidate_cluster_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([util.shape(candidate_starts_cdd, 0)], tf.int32), candidate_cluster_ids_cap, candidate_cluster_ids_dial]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_543": {
                "variable": {
                    "value": "candidate_pool_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([tf.ones(util.shape(candidate_starts_cdd, 0) + util.shape(candidate_starts_caption, 0), tf.int32), tf.zeros(util.shape(candidate_starts_dial, 0), tf.int32)], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_546": {
                "variable": {
                    "value": "candidate_mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidate_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mention_scores(candidate_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_mention_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_548": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_int32(tf.floor(tf.to_float(util.shape(candidate_starts, 0)) * self.config['top_span_ratio']))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(candidate_mention_scores)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_556": {
                "variable": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_558": {
                "variable": {
                    "value": "first_index",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.constant([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_559": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(tf.equal(top_span_indices, first_index))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_560": {
                "variable": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[first_index, valid_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_564": {
                "variable": {
                    "value": "top_span_cdd_pool_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_pool_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.concat([tf.ones(util.shape(candidate_starts_cdd, 0) + util.shape(candidate_starts_caption, 0), tf.int32), tf.zeros(util.shape(candidate_starts_dial, 0), tf.int32)], 0), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_565": {
                "variable": {
                    "value": "top_span_indices_cdd_cap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "top_span_cdd_pool_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_pool_flag, top_span_indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(candidate_pool_flag, top_span_indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_566": {
                "variable": {
                    "value": "top_span_indices_dial",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(top_span_cdd_pool_flag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_567": {
                "variable": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[top_span_indices_cdd_cap, top_span_indices_dial]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_569": {
                "variable": {
                    "value": "top_span_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.concat([candidate_starts_cdd, candidate_starts_caption, candidate_starts_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_570": {
                "variable": {
                    "value": "top_span_ends",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([candidate_ends_cdd, candidate_ends_caption, candidate_ends_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_571": {
                "variable": {
                    "value": "top_span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_span_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([candidate_span_emb_cdd, candidate_span_emb_cap, candidate_span_emb_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_572": {
                "variable": {
                    "value": "top_span_cluster_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_cluster_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([util.shape(candidate_starts_cdd, 0)], tf.int32), candidate_cluster_ids_cap, candidate_cluster_ids_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_573": {
                "variable": {
                    "value": "top_span_mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mention_scores(candidate_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_mention_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_574": {
                "variable": {
                    "value": "top_span_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "speaker_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([speaker_dict[s] for s in speakers])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_starts, top_span_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_576": {
                "variable": {
                    "value": "top_span_cdd_pool_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_pool_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.concat([tf.ones(util.shape(candidate_starts_cdd, 0) + util.shape(candidate_starts_caption, 0), tf.int32), tf.zeros(util.shape(candidate_starts_dial, 0), tf.int32)], 0), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_578": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.config['max_top_antecedents']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.shape(top_span_emb, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(top_span_emb, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.to_int32(tf.floor(tf.to_float(util.shape(candidate_starts, 0)) * self.config['top_span_ratio'])), tf.shape(candidate_mention_scores)[0])",
                            "Call"
                        ],
                        [
                            "util.shape(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(span_emb, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(top_span_emb, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_582": {
                "variable": {
                    "value": "dummy_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_600": {
                "variable": {
                    "value": "top_antecedent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dummy_scores, top_antecedent_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_602": {
                "variable": {
                    "value": "top_antecedent_cluster_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_span_cluster_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_cluster_ids, top_span_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(raw_top_antecedents, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_604": {
                "variable": {
                    "value": "same_cluster_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_antecedent_cluster_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(top_span_cluster_ids, top_antecedents)",
                            "Call"
                        ],
                        [
                            "top_antecedent_cluster_ids + tf.to_int32(tf.log(tf.to_float(top_antecedents_mask)))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(top_span_cluster_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_605": {
                "variable": {
                    "value": "non_dummy_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_cluster_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_606": {
                "variable": {
                    "value": "pairwise_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_cluster_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(top_antecedent_cluster_ids, tf.expand_dims(top_span_cluster_ids, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "non_dummy_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_span_cluster_ids > 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_607": {
                "variable": {
                    "value": "dummy_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_any(pairwise_labels, 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_608": {
                "variable": {
                    "value": "top_antecedent_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dummy_labels, pairwise_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_611": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax_loss(top_antecedent_scores, top_antecedent_labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_625": {
                "variable": {
                    "value": "span_start_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([num_words - num_words_dial, util.shape(context_outputs_dial, 1)]), context_outputs_dial], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_outputs, [-1, context_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "span_starts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_628": {
                "variable": {
                    "value": "span_end_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([num_words - num_words_dial, util.shape(context_outputs_dial, 1)]), context_outputs_dial], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_outputs, [-1, context_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "span_ends",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_653": {
                "variable": {
                    "value": "span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "span_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_666": {
                "variable": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([num_words - num_words_dial, util.shape(context_outputs_dial, 1)]), context_outputs_dial], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_outputs, [-1, context_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, context_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_668": {
                "variable": {
                    "value": "span_start_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([num_words - num_words_dial, util.shape(context_outputs_dial, 1)]), context_outputs_dial], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_outputs, [-1, context_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "span_start_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(num_candidates) * max_span_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_672": {
                "variable": {
                    "value": "span_end_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([num_words - num_words_dial, util.shape(context_outputs_dial, 1)]), context_outputs_dial], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_outputs, [-1, context_emb_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "span_end_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_start_indices + span_width - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_692": {
                "variable": {
                    "value": "span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "span_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_727": {
                "variable": {
                    "value": "marginalized_gold_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gold_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "antecedent_scores + tf.log(tf.to_float(antecedent_labels))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_728": {
                "variable": {
                    "value": "log_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "antecedent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_737": {
                "variable": {
                    "value": "use_identity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distances <= 4",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "concat_769": {
                "variable": {
                    "value": "feature_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "feature_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_770": {
                "variable": {
                    "value": "feature_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(feature_emb_list, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(feature_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_772": {
                "variable": {
                    "value": "target_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_span_emb, top_span_indices)",
                            "Call"
                        ],
                        [
                            "f * attended_span_emb + (1 - f) * top_span_emb",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_774": {
                "variable": {
                    "value": "target_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_span_emb, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(target_emb, [1, c, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, c, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_776": {
                "variable": {
                    "value": "pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_emb, top_antecedent_emb, similarity_emb, feature_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_780": {
                "variable": {
                    "value": "slow_antecedent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slow_antecedent_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(slow_antecedent_scores, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_823": {
                "variable": {
                    "value": "target_top_span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_span_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_span_emb, top_span_indices)",
                            "Call"
                        ],
                        [
                            "f * attended_span_emb + (1 - f) * top_span_emb",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_1008": {
                "variable": {
                    "value": "max_eval_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.max_eval_f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "average_f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pr_coref_results['f']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "assign_1009": {
                "variable": {
                    "value": "self.update_max_f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.max_eval_f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "max_eval_f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(self.max_eval_f1, average_f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_346": {
                "x": {
                    "value": "tf.to_float(antecedents_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_363": {
                "x": {
                    "value": "tf.to_float(top_antecedents_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_382": {
                "variable": {
                    "value": "char_emb_all",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self.char_dict), self.config['char_embedding_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_383": {
                "variable": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_embeddings', [len(self.char_dict), self.config['char_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "char_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences), max_sentence_length, max_word_length])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_384": {
                "variable": {
                    "value": "flattened_char_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(char_emb_all, char_index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length, util.shape(char_emb, 2), util.shape(char_emb, 3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_386": {
                "variable": {
                    "value": "aggregated_char_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_aggregated_char_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.cnn(flattened_char_emb, self.config['filter_widths'], self.config['filter_size'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences, max_sentence_length, util.shape(flattened_aggregated_char_emb, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_399": {
                "variable": {
                    "value": "char_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_embeddings', [len(self.char_dict), self.config['char_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "char_index_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences_cdd), max_sentence_length_cdd, max_word_length_cdd])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_400": {
                "variable": {
                    "value": "flattened_char_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "char_emb_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(char_emb_all, char_index_cdd)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences_cdd * max_sentence_length_cdd, util.shape(char_emb_cdd, 2), util.shape(char_emb_cdd, 3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_402": {
                "variable": {
                    "value": "aggregated_char_emb_cdd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_aggregated_char_emb_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.cnn(flattened_char_emb_cdd, self.config['filter_widths'], self.config['filter_size'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences_cdd, max_sentence_length_cdd, util.shape(flattened_aggregated_char_emb_cdd, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_430": {
                "variable": {
                    "value": "self.lm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.get_variable('lm_scores', [lm_num_layers], initializer=tf.constant_initializer(0.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_431": {
                "variable": {
                    "value": "self.lm_scaling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lm_scaling",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_516": {
                "variable": {
                    "value": "context_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "context_emb_list_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[context_word_emb_obj]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_517": {
                "variable": {
                    "value": "head_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "head_emb_list_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[head_word_emb_obj]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_521": {
                "variable": {
                    "value": "flattened_lm_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lm_emb_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.load_lm_embeddings_obj(example['object_detection'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_candidates_obj * max_candidate_length_obj * lm_emb_size, lm_num_layers]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_522": {
                "variable": {
                    "value": "flattened_aggregated_lm_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flattened_lm_emb_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(lm_emb_obj, [num_candidates_obj * max_candidate_length_obj * lm_emb_size, lm_num_layers])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(self.lm_weights, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_523": {
                "variable": {
                    "value": "aggregated_lm_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_aggregated_lm_emb_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(flattened_lm_emb_obj, tf.expand_dims(self.lm_weights, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_candidates_obj, max_candidate_length_obj, lm_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_526": {
                "variable": {
                    "value": "context_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[context_emb_obj, aggregated_lm_emb_obj]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_527": {
                "variable": {
                    "value": "context_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_emb_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(context_emb_list_obj, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([context_emb_obj, aggregated_lm_emb_obj], 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(context_emb_obj, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_528": {
                "variable": {
                    "value": "head_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_emb_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(head_emb_list_obj, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(head_emb_obj, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_603": {
                "x": {
                    "value": "tf.log(tf.to_float(top_antecedents_mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_637": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "span_width_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']]), span_width_index)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(span_width_emb, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']]), span_width_index)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(span_width_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_642": {
                "variable": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.shape(context_outputs, 0) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(self.config['max_span_width']), 0) + tf.expand_dims(span_starts, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(util.shape(context_outputs, 0) - 1, span_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_643": {
                "variable": {
                    "value": "span_text_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "head_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(head_emb_list, 2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(self.config['max_span_width']), 0) + tf.expand_dims(span_starts, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(util.shape(context_outputs, 0) - 1, span_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_646": {
                "variable": {
                    "value": "span_head_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.head_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(self.config['max_span_width']), 0) + tf.expand_dims(span_starts, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(util.shape(context_outputs, 0) - 1, span_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_647": {
                "variable": {
                    "value": "span_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask(span_width, self.config['max_span_width'], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_649": {
                "variable": {
                    "value": "span_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "span_head_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.head_scores, span_indices)",
                            "Call"
                        ],
                        [
                            "span_head_scores + tf.log(span_mask)",
                            "BinOp"
                        ],
                        [
                            "util.projection(context_outputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(span_head_scores, [num_candidates, max_span_width, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_650": {
                "variable": {
                    "value": "span_head_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "span_attention * span_text_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_679": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "span_width_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']]), span_width_index)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(span_width_emb, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']]), span_width_index)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(span_width_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_685": {
                "variable": {
                    "value": "span_head_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "span_head_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.head_scores, span_indices)",
                            "Call"
                        ],
                        [
                            "span_head_scores + tf.log(span_mask)",
                            "BinOp"
                        ],
                        [
                            "util.projection(context_outputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(span_head_scores, [num_candidates, max_span_width, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_candidates, max_span_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_686": {
                "variable": {
                    "value": "span_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask(span_width, max_span_width, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_688": {
                "variable": {
                    "value": "span_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "span_head_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.head_scores, span_indices)",
                            "Call"
                        ],
                        [
                            "span_head_scores + tf.log(span_mask)",
                            "BinOp"
                        ],
                        [
                            "util.projection(context_outputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(span_head_scores, [num_candidates, max_span_width, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_689": {
                "variable": {
                    "value": "span_head_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "span_attention * head_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_704": {
                "variable": {
                    "value": "text_map",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "text_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.projection(span_emb, map_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(text_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(text_map, 1), [1, n, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_705": {
                "variable": {
                    "value": "obj_map",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "obj_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.projection(obj_span_emb, map_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(obj_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(obj_map, 0), [k, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_707": {
                "variable": {
                    "value": "text_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(text_map, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_708": {
                "variable": {
                    "value": "obj_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(obj_map, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[k, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_711": {
                "variable": {
                    "value": "text_obj_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "text_map * obj_map",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_714": {
                "tensor": {
                    "value": "text_obj_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(text_map * obj_map, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, map_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_717": {
                "variable": {
                    "value": "att_grid_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_span_im_emb(top_span_emb, obj_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(text_obj_combine, [-1, map_dim]), w_att), [k, n])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_739": {
                "t": {
                    "value": "combined_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "use_identity * distances + (1 - use_identity) * logspace_idx",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_748": {
                "variable": {
                    "value": "top_antecedent_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_span_speaker_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(speaker_ids, top_span_starts)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(raw_top_antecedents, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_749": {
                "variable": {
                    "value": "same_speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(top_span_speaker_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "top_antecedent_speaker_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(top_span_speaker_ids, top_antecedents)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_750": {
                "variable": {
                    "value": "speaker_pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('same_speaker_emb', [2, self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.to_int32(same_speaker)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_754": {
                "variable": {
                    "value": "im_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.im_fc_file[file_key][:]",
                            "Subscript"
                        ],
                        [
                            "self.load_im_feat(doc_key)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_755": {
                "variable": {
                    "value": "im_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(im_feat, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(im_emb, self.im_dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(im_emb, im_weights, im_bias)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.im_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_761": {
                "variable": {
                    "value": "tiled_im_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(im_emb, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[k, c, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_766": {
                "variable": {
                    "value": "antecedent_distance_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('antecedent_distance_emb', [10, self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "antecedent_distance_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bucket_distance(top_antecedent_offsets)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_790": {
                "variable": {
                    "value": "top_span_att_max",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "has_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(detections) > 0",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : obj_att_max(att_grid)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : zero_att_max(k)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "gather_791": {
                "variable": {
                    "value": "top_antecedent_att_max",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_span_att_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(has_obj, lambda : obj_att_max(att_grid), lambda : zero_att_max(k))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(raw_top_antecedents, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_792": {
                "variable": {
                    "value": "target_att_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_att_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(has_obj, lambda : obj_att_max(att_grid), lambda : zero_att_max(k))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_794": {
                "variable": {
                    "value": "target_emb_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_att_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_span_att_max, 2)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, c, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_797": {
                "variable": {
                    "value": "top_antecedent_att",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "att_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_span_im_emb(top_span_emb, obj_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(text_obj_combine, [-1, map_dim]), w_att), [k, n])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(raw_top_antecedents, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_798": {
                "variable": {
                    "value": "top_span_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_span_im_emb(top_span_emb, obj_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(tf.reshape(text_obj_combine, [-1, map_dim]), w_att), [k, n])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_806": {
                "variable": {
                    "value": "top_span_antecedent_att_max",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "has_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(detections) > 0",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : obj_ant_att_max(top_antecedent_att * top_span_att)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : zero_ant_att_max(k, c)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_808": {
                "variable": {
                    "value": "similarity_emb_att",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[similarity_emb_att, top_span_antecedent_att_max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_810": {
                "variable": {
                    "value": "pair_emb_im",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_emb_att, top_antecedent_att_max, similarity_emb_att]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_814": {
                "variable": {
                    "value": "slow_antecedent_scores_im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slow_antecedent_scores_im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb_im, self.config['ffnn_depth_im'], self.config['ffnn_size_im'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(slow_antecedent_scores_im, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_822": {
                "variable": {
                    "value": "source_top_span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(top_span_emb, util.shape(top_span_emb, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_824": {
                "a": {
                    "value": "source_top_span_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(util.projection(top_span_emb, util.shape(top_span_emb, -1)), self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "target_top_span_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(top_span_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_832": {
                "variable": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_837": {
                "tensor": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(emb, [num_sentences * max_sentence_length])",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb, [num_sentences * max_sentence_length, util.shape(emb, 2)])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.reshape(text_len_mask, [num_sentences * max_sentence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_325": {
                "input": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.concat([candidate_starts_cdd, candidate_starts_caption, candidate_starts_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_326": {
                "input": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([candidate_ends_cdd, candidate_ends_caption, candidate_ends_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_328": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_328": {
                "x": {
                    "value": "same_span",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(same_start, same_end)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_339": {
                "x": {
                    "value": "top_span_cdd_pool_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_pool_flag, top_span_indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(candidate_pool_flag, top_span_indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_342": {
                "input": {
                    "value": "top_span_range_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros(num_cdd_in_pool, tf.int32), tf.range(1, num_cdd_in_dial + 1)], 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_345": {
                "input": {
                    "value": "top_span_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_mention_scores, top_span_indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_346": {
                "x": {
                    "value": "antecedents_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "antecedent_offsets >= 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "expand_dims_357": {
                "input": {
                    "value": "tf.range(c) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_358": {
                "input": {
                    "value": "tf.range(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_362": {
                "input": {
                    "value": "top_span_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_mention_scores, top_span_indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_362": {
                "params": {
                    "value": "top_span_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_mention_scores, top_span_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(raw_top_antecedents, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_363": {
                "x": {
                    "value": "top_antecedents_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.batch_gather(antecedents_mask, top_antecedents)",
                            "Call"
                        ],
                        [
                            "raw_top_antecedents >= 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "shape_374": {
                "input": {
                    "value": "context_word_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences), max_sentence_length, self.context_embeddings.size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_375": {
                "input": {
                    "value": "context_word_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences), max_sentence_length, self.context_embeddings.size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_391": {
                "input": {
                    "value": "context_word_emb_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences_cdd), max_sentence_length_cdd, self.context_embeddings.size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_392": {
                "input": {
                    "value": "context_word_emb_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences_cdd), max_sentence_length_cdd, self.context_embeddings.size])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_414": {
                "input": {
                    "value": "candidate_starts_caption",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_429": {
                "name_or_scope": {
                    "value": "lm_aggregation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_434": {
                "input": {
                    "value": "self.lm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_439": {
                "input": {
                    "value": "self.lm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_446": {
                "input": {
                    "value": "self.lm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_474": {
                "input": {
                    "value": "tf.range(num_sentences)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_479": {
                "input": {
                    "value": "tf.range(num_words)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_480": {
                "input": {
                    "value": "tf.range(self.max_span_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_482": {
                "x": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([candidate_ends_cdd, candidate_ends_caption, candidate_ends_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_words - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_483": {
                "x": {
                    "value": "candidate_start_sentence_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(flattened_sentence_indices, candidate_starts)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "candidate_end_sentence_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(flattened_sentence_indices, tf.minimum(candidate_ends, num_words - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_488": {
                "tensor": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.concat([candidate_starts_cdd, candidate_starts_caption, candidate_starts_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_489": {
                "tensor": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([candidate_ends_cdd, candidate_ends_caption, candidate_ends_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_509": {
                "variable": {
                    "value": "char_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_embeddings', [len(self.char_dict), self.config['char_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "char_index_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences_obj), max_sentence_length_obj, max_word_length_obj])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_510": {
                "variable": {
                    "value": "flattened_char_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "char_emb_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(char_emb_all, char_index_obj)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences_obj * max_sentence_length_obj, util.shape(char_emb_obj, 2), util.shape(char_emb_obj, 3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_512": {
                "variable": {
                    "value": "aggregated_char_emb_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_aggregated_char_emb_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.cnn(flattened_char_emb_obj, self.config['filter_widths'], self.config['filter_size'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences_obj, max_sentence_length_obj, util.shape(flattened_aggregated_char_emb_obj, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_543": {
                "values": {
                    "value": "[tf.ones(util.shape(candidate_starts_cdd, 0) + util.shape(candidate_starts_caption, 0), tf.int32), tf.zeros(util.shape(candidate_starts_dial, 0), tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_548": {
                "x": {
                    "value": "tf.floor(tf.to_float(util.shape(candidate_starts, 0)) * self.config['top_span_ratio'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_549": {
                "input": {
                    "value": "candidate_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mention_scores(candidate_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_mention_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_550": {
                "input": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.concat([candidate_starts_cdd, candidate_starts_caption, candidate_starts_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_551": {
                "input": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([candidate_ends_cdd, candidate_ends_caption, candidate_ends_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_552": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.shape(top_span_emb, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(top_span_emb, 0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.to_int32(tf.floor(tf.to_float(util.shape(candidate_starts, 0)) * self.config['top_span_ratio'])), tf.shape(candidate_mention_scores)[0])",
                            "Call"
                        ],
                        [
                            "util.shape(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(span_emb, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(top_span_emb, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_558": {
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_not_559": {
                "x": {
                    "value": "tf.equal(top_span_indices, first_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_566": {
                "x": {
                    "value": "top_span_cdd_pool_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_pool_flag, top_span_indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(candidate_pool_flag, top_span_indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_587": {
                "variable": {
                    "value": "top_antecedent_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "top_span_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_span_emb, top_span_indices)",
                            "Call"
                        ],
                        [
                            "f * attended_span_emb + (1 - f) * top_span_emb",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_antecedents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(raw_top_antecedents, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_593": {
                "variable": {
                    "value": "top_antecedent_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.concat([dummy_scores, top_antecedent_scores], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_594": {
                "variable": {
                    "value": "top_antecedent_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(top_span_emb, 1), top_antecedent_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_595": {
                "variable": {
                    "value": "attended_span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(top_antecedent_weights, 2) * top_antecedent_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_603": {
                "x": {
                    "value": "tf.to_float(top_antecedents_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_604": {
                "input": {
                    "value": "top_span_cluster_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_cluster_ids, top_span_indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_607": {
                "input_tensor": {
                    "value": "pairwise_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(same_cluster_indicator, non_dummy_indicator)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_636": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_width_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_width - 1",
                            "BinOp"
                        ],
                        [
                            "span_width - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_648": {
                "x": {
                    "value": "span_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.sequence_mask(span_width, self.config['max_span_width'], dtype=tf.float32), 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask(span_width, max_span_width, dtype=tf.float32), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_678": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_width_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_width - 1",
                            "BinOp"
                        ],
                        [
                            "span_width - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_687": {
                "x": {
                    "value": "span_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.sequence_mask(span_width, self.config['max_span_width'], dtype=tf.float32), 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.sequence_mask(span_width, max_span_width, dtype=tf.float32), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_698": {
                "name_or_scope": {
                    "value": "image_attention",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_713": {
                "variable": {
                    "value": "w_att",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_att",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[map_dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_722": {
                "name_or_scope": {
                    "value": "mention_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_726": {
                "x": {
                    "value": "tf.to_float(antecedent_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_736": {
                "x": {
                    "value": "tf.floor(tf.log(tf.to_float(distances)) / math.log(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_778": {
                "name_or_scope": {
                    "value": "slow_antecedent_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_821": {
                "name_or_scope": {
                    "value": "src_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_827": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_828": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_834": {
                "variable": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length, util.shape(emb, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_837": {
                "tensor": {
                    "value": "text_len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(text_len, maxlen=max_sentence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_840": {
                "input": {
                    "value": "text_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_849": {
                "variable": {
                    "value": "state_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "tf.tile(cell_fw.initial_state.c, [num_sentences, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "h": {
                    "value": "tf.tile(cell_fw.initial_state.h, [num_sentences, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_850": {
                "variable": {
                    "value": "state_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "tf.tile(cell_bw.initial_state.c, [num_sentences, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "h": {
                    "value": "tf.tile(cell_bw.initial_state.h, [num_sentences, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_852": {
                "variable": {
                    "value": "((fw_outputs, bw_outputs), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.CustomLSTMCell(self.config['contextualization_size'], num_sentences, self.lstm_dropout)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.CustomLSTMCell(self.config['contextualization_size'], num_sentences, self.lstm_dropout)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "current_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_emb",
                            "variable"
                        ],
                        [
                            "text_outputs",
                            "variable"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "text_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(s) for s in sentences])",
                            "Call"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "state_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(tf.tile(cell_fw.initial_state.c, [num_sentences, 1]), tf.tile(cell_fw.initial_state.h, [num_sentences, 1]))",
                            "Call"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "state_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(tf.tile(cell_bw.initial_state.c, [num_sentences, 1]), tf.tile(cell_bw.initial_state.h, [num_sentences, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_860": {
                "variable": {
                    "value": "text_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_outputs, bw_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_861": {
                "variable": {
                    "value": "text_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "text_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_outputs, bw_outputs], 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_outputs, self.lstm_dropout)",
                            "Call"
                        ],
                        [
                            "highway_gates * text_outputs + (1 - highway_gates) * current_inputs",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lstm_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_333": {
                "x": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_341": {
                "shape": {
                    "value": "num_cdd_in_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(top_span_cdd_pool_flag, tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_430": {
                "name": {
                    "value": "lm_scores",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[lm_num_layers]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_470": {
                "shape": {
                    "value": "[num_words - num_words_dial, util.shape(context_outputs_dial, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_496": {
                "x": {
                    "value": "text_len_cdd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(s) for s in sentences_cdd])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_501": {
                "input": {
                    "value": "context_word_emb_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences_obj), max_sentence_length_obj, self.context_embeddings.size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_502": {
                "input": {
                    "value": "context_word_emb_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences_obj), max_sentence_length_obj, self.context_embeddings.size])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_522": {
                "input": {
                    "value": "self.lm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_532": {
                "x": {
                    "value": "text_len_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(s) for s in sentences_obj])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_542": {
                "shape": {
                    "value": "[util.shape(candidate_starts_cdd, 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_548": {
                "x": {
                    "value": "tf.to_float(util.shape(candidate_starts, 0)) * self.config['top_span_ratio']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_548": {
                "input": {
                    "value": "candidate_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mention_scores(candidate_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_mention_scores, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_559": {
                "x": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(candidate_mention_scores, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([first_index, valid_indices], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([top_span_indices_cdd_cap, top_span_indices_dial], 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "first_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(top_span_indices, tf.constant([0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_586": {
                "name_or_scope": {
                    "value": "coref_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sigmoid_597": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(tf.concat([top_span_emb, attended_span_emb], 1), util.shape(top_span_emb, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_603": {
                "x": {
                    "value": "top_antecedents_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.batch_gather(antecedents_mask, top_antecedents)",
                            "Call"
                        ],
                        [
                            "raw_top_antecedents >= 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_618": {
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_635": {
                "name_or_scope": {
                    "value": "use_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_641": {
                "input": {
                    "value": "span_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_644": {
                "name_or_scope": {
                    "value": "head_scores",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_647": {
                "lengths": {
                    "value": "span_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + span_ends - span_starts",
                            "BinOp"
                        ],
                        [
                            "1 + span_ends - span_starts",
                            "BinOp"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "self.config['max_span_width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_677": {
                "name_or_scope": {
                    "value": "use_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_683": {
                "name_or_scope": {
                    "value": "head_scores",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_686": {
                "lengths": {
                    "value": "span_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + span_ends - span_starts",
                            "BinOp"
                        ],
                        [
                            "1 + span_ends - span_starts",
                            "BinOp"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_span_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.shape(context_outputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_701": {
                "name_or_scope": {
                    "value": "att_projection0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_707": {
                "input": {
                    "value": "text_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.projection(span_emb, map_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(text_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(text_map, 1), [1, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_708": {
                "input": {
                    "value": "obj_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.projection(obj_span_emb, map_dim)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(obj_map)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(obj_map, 0), [k, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_712": {
                "name_or_scope": {
                    "value": "get_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_714": {
                "a": {
                    "value": "tf.reshape(text_obj_combine, [-1, map_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_att', [map_dim, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_726": {
                "x": {
                    "value": "antecedent_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_736": {
                "x": {
                    "value": "tf.log(tf.to_float(distances)) / math.log(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_749": {
                "input": {
                    "value": "top_span_speaker_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(speaker_ids, top_span_starts)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_750": {
                "name": {
                    "value": "same_speaker_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_750": {
                "x": {
                    "value": "same_speaker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(top_span_speaker_ids, 1), top_antecedent_speaker_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_758": {
                "variable": {
                    "value": "im_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'im_weights_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[util.shape(im_emb, 1), self.im_fc_emb_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_variable_759": {
                "variable": {
                    "value": "im_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'im_bias_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.im_fc_emb_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "xw_plus_b_760": {
                "variable": {
                    "value": "im_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(im_feat, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(im_emb, self.im_dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(im_emb, im_weights, im_bias)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "im_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('im_weights_{}'.format(i), [util.shape(im_emb, 1), self.im_fc_emb_size], initializer=None)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "im_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('im_bias_{}'.format(i), [self.im_fc_emb_size], initializer=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_761": {
                "input": {
                    "value": "im_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(im_feat, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(im_emb, self.im_dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(im_emb, im_weights, im_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_766": {
                "name": {
                    "value": "antecedent_distance_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_785": {
                "shape": {
                    "value": "[k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_788": {
                "input_tensor": {
                    "value": "att_grid[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_801": {
                "shape": {
                    "value": "[k, c, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_804": {
                "input_tensor": {
                    "value": "att_grid[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_812": {
                "name_or_scope": {
                    "value": "slow_antecedent_scores_im",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_844": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_863": {
                "variable": {
                    "value": "highway_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(text_outputs, util.shape(text_outputs, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_431": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_543": {
                "shape": {
                    "value": "util.shape(candidate_starts_cdd, 0) + util.shape(candidate_starts_caption, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_543": {
                "shape": {
                    "value": "util.shape(candidate_starts_dial, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_593": {
                "values": {
                    "value": "[dummy_scores, top_antecedent_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_596": {
                "name_or_scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_636": {
                "name": {
                    "value": "span_width_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['max_span_width'], self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_641": {},
            "get_variable_678": {
                "name": {
                    "value": "span_width_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['max_span_width'], self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_845": {
                "name_or_scope": {
                    "value": "fw_cell",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_847": {
                "name_or_scope": {
                    "value": "bw_cell",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_849": {
                "input": {
                    "value": "cell_fw.initial_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_sentences, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_850": {
                "input": {
                    "value": "cell_bw.initial_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_sentences, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_430": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_548": {
                "x": {
                    "value": "util.shape(candidate_starts, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_594": {
                "input": {
                    "value": "top_span_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_span_emb, top_span_indices)",
                            "Call"
                        ],
                        [
                            "f * attended_span_emb + (1 - f) * top_span_emb",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_595": {
                "input": {
                    "value": "top_antecedent_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.concat([dummy_scores, top_antecedent_scores], 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_736": {
                "x": {
                    "value": "tf.to_float(distances)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_597": {
                "values": {
                    "value": "[top_span_emb, attended_span_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_736": {
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "tensorflow": {
            "ConfigProto_58": {
                "variable": {
                    "value": "configtf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_60": {
                "config": {
                    "value": "configtf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "FileWriter_23": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['log_dir']",
                            "Subscript"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_33": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_37": {
                "variable": {
                    "value": "config_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_30": {
                "seed": {
                    "value": "config['random_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_44": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['log_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Session_39": {
                "config": {
                    "value": "config_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "tensorflow": {
            "get_variable_119": {
                "variable": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape(current_inputs, 1), output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "output_weights_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_121": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "current_outputs",
                            "variable"
                        ]
                    ]
                },
                "weights": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', [shape(current_inputs, 1), output_size], initializer=output_weights_initializer)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', [output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seqlen, emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_150": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(batch_size) * seqlen",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_151": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(emb, [batch_size * seqlen, emb_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Summary_36": {
                "value": {
                    "value": "[tf.Summary.Value(tag=k, simple_value=v) for (k, v) in value_dict.items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "current_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * j + (1 - f) * inputs",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * seqlen, emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "hidden_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_weights_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape(current_inputs, 1), hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "hidden_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_bias_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "current_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(current_inputs, hidden_weights, hidden_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(current_inputs, output_weights, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [batch_size, seqlen, output_size])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seqlen, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_136": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * j + (1 - f) * inputs",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [filter_size, input_size, num_filters])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_138": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b))",
                            "Call"
                        ],
                        [
                            "h * self._dropout_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_140": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(current_inputs, output_weights, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [batch_size, seqlen, output_size])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(flattened_emb, indices + offset)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(gathered, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_206": {
                "variable": {
                    "value": "self._dropout_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones([batch_size, self.output_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_208": {
                "variable": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm_initial_cell_state",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_209": {
                "variable": {
                    "value": "initial_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm_initial_hidden_state",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_210": {
                "variable": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lstm_initial_cell_state', [1, self.output_size])",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "initial_hidden_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_87": {
                "variable": {
                    "value": "(j, f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "projection(inputs, 2 * shape(inputs, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(j)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(j, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_116": {
                "variable": {
                    "value": "current_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.xw_plus_b(current_inputs, hidden_weights, hidden_bias))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current_outputs, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_134": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, input_size, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_135": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_214": {
                "c": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_230": {
                "variable": {
                    "value": "(i, j, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projection(tf.concat([inputs, h], 1), 3 * self.output_size, initializer=self._initializer)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_231": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_layers)",
                            "Call"
                        ],
                        [
                            "range(num_hidden_layers)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_234": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - i) * c + i * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(new_c) * tf.sigmoid(o)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "'highway_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_91": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(j)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(j, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_113": {
                "x": {
                    "value": "current_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "current_outputs",
                            "variable"
                        ]
                    ]
                },
                "weights": {
                    "value": "hidden_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden_weights_{}'.format(i), [shape(current_inputs, 1), hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "hidden_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden_bias_{}'.format(i), [hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "'conv_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_137": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, w, stride=1, padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_206": {
                "shape": {
                    "value": "[batch_size, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "scope or type(self).__name__",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_229": {
                "values": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_233": {
                "x": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - i) * c + i * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_233": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_232": {
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(j)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(j, dropout)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "get_im_fc.py": {
        "torch": {
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}