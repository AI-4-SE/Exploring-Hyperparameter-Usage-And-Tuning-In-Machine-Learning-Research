{
    "model_simple.py": {
        "torch": {
            "full_22": {
                "variable": {
                    "value": "loop_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "fill_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if not improved else 2",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "None if edge_weight is None else edge_weight.dtype",
                    "type": "IfExp",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_35": {
                "variable": {
                    "value": "loop_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maybe_num_nodes(edge_index, num_nodes)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "row.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index[:, mask], loop_index]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_weight[mask], loop_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_indices_111": {
                "variable": {
                    "value": "(self.xs, self.ys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "row": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "col": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "self.edge_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([edge_weight[mask], loop_weight], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.ones((edge_index.size(1),), dtype=dtype, device=edge_index.device)",
                            "Call"
                        ],
                        [
                            "edge_weight.reshape(self.num_nodes, self.num_nodes)[self.xs, self.ys]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros((self.num_nodes, self.num_nodes), device=edge_index.device)",
                            "Call"
                        ],
                        [
                            "edge_weight + edge_weight.transpose(1, 0) - torch.diag(edge_weight.diagonal())",
                            "BinOp"
                        ],
                        [
                            "edge_weight.reshape(-1).repeat(batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "learn_edge_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_nodes, self.num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagate(edge_index, x=x, norm=norm)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "global_add_pool(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_51": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.domain_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hiddens[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_59": {
                "input": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([edge_weight[mask], loop_weight], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.ones((edge_index.size(1),), dtype=dtype, device=edge_index.device)",
                            "Call"
                        ],
                        [
                            "edge_weight.reshape(self.num_nodes, self.num_nodes)[self.xs, self.ys]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros((self.num_nodes, self.num_nodes), device=edge_index.device)",
                            "Call"
                        ],
                        [
                            "edge_weight + edge_weight.transpose(1, 0) - torch.diag(edge_weight.diagonal())",
                            "BinOp"
                        ],
                        [
                            "edge_weight.reshape(-1).repeat(batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diag_125": {
                "input": {
                    "value": "edge_weight.diagonal()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}