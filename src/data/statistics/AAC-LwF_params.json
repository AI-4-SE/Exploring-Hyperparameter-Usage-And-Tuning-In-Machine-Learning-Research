{
    "data_handlers/_clotho.py": {
        "torch": {}
    },
    "data_handlers/clotho_loader.py": {
        "torch": {
            "cat_48": {
                "tensors": {
                    "value": "[zeros(max_input_t_steps - i.shape[0], input_features).float(), from_numpy(i).float()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[from_numpy(i).long(), ones(max_output_t_steps - len(i)).mul(eos_token).long()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClothoDataset(data_dir=data_dir, split=split, input_field_name=settings_data['input_field_name'], output_field_name=settings_data['output_field_name'], load_into_memory=settings_data['load_into_memory'], multiple_captions_mode=settings_data['use_multiple_mode'], validation_files=validation_files)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "settings_data['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle if split == 'development' else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "settings_data['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last if split == 'development' else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "_clotho_collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "max_input_t_steps - i.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[0][0][0][0].shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "max_output_t_steps - len(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_54": {
                "input": {
                    "value": "eos_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[0][1][0][0][-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/wave_transformer_10.py": {
        "torch": {
            "Embedding_119": {
                "num_embeddings": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_features_decoder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "n_features_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/wave_transformer_3.py": {
        "torch": {
            "Embedding_100": {
                "num_embeddings": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_features_decoder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "n_features_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_cache_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/wave_transformer_8.py": {
        "torch": {
            "Embedding_96": {
                "num_embeddings": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_features_decoder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "n_features_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_cache_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/beam.py": {
        "torch": {
            "log_softmax_79": {
                "variable": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classifier(decoder_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_sequence_107": {
                "sequences": {
                    "value": "decoded_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "eos_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "[decoder_input, decoded_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/decode_utils.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "decoded_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_length, bs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "decoded_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_length, bs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(decoder_out)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "classifier(decoder_out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(decoder_out)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "classifier(decoder_out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argsort_66": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(decoder_out)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "classifier(decoder_out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "modules/depthwise_separable_conv_block.py": {
        "torch": {
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "inner_kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "inner_stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "inner_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules/dessed_dnn.py": {
        "torch": {
            "Sequential_39": {
                "*args": {
                    "value": "DepthWiseSeparableConvBlock(in_channels=1, out_channels=cnn_channels, kernel_size=5, stride=1, padding=2, inner_kernel_size=inner_kernel_size, inner_padding=inner_padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "DepthWiseSeparableConvBlock(in_channels=cnn_channels, out_channels=cnn_channels, kernel_size=5, stride=1, padding=2, inner_kernel_size=inner_kernel_size, inner_padding=inner_padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "DepthWiseSeparableConvBlock(in_channels=cnn_channels, out_channels=cnn_channels, kernel_size=5, stride=1, padding=2, inner_kernel_size=inner_kernel_size, inner_padding=inner_padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "cnn_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout2d_48": {
                "p": {
                    "value": "cnn_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "cnn_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout2d_60": {
                "p": {
                    "value": "cnn_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "cnn_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_71": {
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout2d_72": {
                "p": {
                    "value": "cnn_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules/dessed_dnn_encoder.py": {
        "torch": {
            "Linear_49": {
                "variable": {
                    "value": "self.fc_audioset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu__67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_audioset(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "modules/positional_encoding.py": {
        "torch": {
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_36": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_37": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_38": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_39": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_37": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/sublayer_connection.py": {
        "torch": {
            "LayerNorm_21": {
                "normalized_shape": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules/transformer.py": {
        "torch": {
            "LayerNorm_20": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "layer.n_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_10": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_10": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules/transformer_block.py": {
        "torch": {
            "ModuleList_20": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.feed_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(n_features, n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiheadAttention_42": {
                "embed_dim": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MultiheadAttention_47": {
                "embed_dim": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules/wave_block.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.filter_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.gate_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_39": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(dilation_rate * (kernel_size - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rates",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv1d_49": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(dilation_rate * (kernel_size - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rates",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv1d_59": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_93": {
                "input": {
                    "value": "self.filter_convs[i](x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_94": {
                "input": {
                    "value": "self.gate_convs[i](x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "modules/wavenet_encoder_10.py": {
        "torch": {
            "ModuleList_64": {
                "variable": {
                    "value": "self.wave_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.bn_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.fc_audioset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu__140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_audioset(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.pw_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pw_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "BatchNorm1d(self.out_waveblock[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "num_features": {
                    "value": "self.out_waveblock[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/wavenet_encoder_3.py": {
        "torch": {
            "ModuleList_45": {
                "variable": {
                    "value": "self.wave_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.bn_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "self.out_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "BatchNorm1d(self.out_channels[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_67": {
                "num_features": {
                    "value": "self.out_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "processes/method.py": {
        "torch": {
            "CrossEntropyLoss_318": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_319": {
                "variable": {
                    "value": "dist_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_320": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "settings_training['optimizer']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/model.py": {
        "torch": {
            "zeros_133": {
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_257": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_38": {
                "device": {
                    "value": "cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_312": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_315": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:target.size()[0] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "pad_sequence([target, y_hat_t], batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(target, min=0.0001)",
                            "Call"
                        ],
                        [
                            "softmax2(target / 2)",
                            "Call"
                        ],
                        [
                            "target.split(target, target.size()[0] // 2)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ],
                        [
                            "target[:target.size()[0] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "pad_sequence([target, y_hat_t], batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(target, min=0.0001)",
                            "Call"
                        ],
                        [
                            "softmax2(target / 2)",
                            "Call"
                        ],
                        [
                            "target.split(target, target.size()[0] // 2)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Softmax_316": {
                "variable": {
                    "value": "softmax2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_188": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_191": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:target.size()[0] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "pad_sequence([target, y_hat_t], batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(target, min=0.0001)",
                            "Call"
                        ],
                        [
                            "softmax2(target / 2)",
                            "Call"
                        ],
                        [
                            "target.split(target, target.size()[0] // 2)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ],
                        [
                            "target[:target.size()[0] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "pad_sequence([target, y_hat_t], batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(target, min=0.0001)",
                            "Call"
                        ],
                        [
                            "softmax2(target / 2)",
                            "Call"
                        ],
                        [
                            "target.split(target, target.size()[0] // 2)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Softmax_192": {
                "variable": {
                    "value": "softmax2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_299": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[target, y_hat_t]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_301": {
                "variable": {
                    "value": "summed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:target.size()[0] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "pad_sequence([target, y_hat_t], batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(target, min=0.0001)",
                            "Call"
                        ],
                        [
                            "softmax2(target / 2)",
                            "Call"
                        ],
                        [
                            "target.split(target, target.size()[0] // 2)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ],
                        [
                            "target[:target.size()[0] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "pad_sequence([target, y_hat_t], batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(target, min=0.0001)",
                            "Call"
                        ],
                        [
                            "softmax2(target / 2)",
                            "Call"
                        ],
                        [
                            "target.split(target, target.size()[0] // 2)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_302": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summed == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clamp_313": {
                "input": {
                    "value": "y_hat_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_hat[idx]",
                            "Subscript"
                        ],
                        [
                            "y_hat_t[:target.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "softmax(y_hat_t / 2)",
                            "Call"
                        ],
                        [
                            "target[1]",
                            "Subscript"
                        ],
                        [
                            "y_hat[idx]",
                            "Subscript"
                        ],
                        [
                            "y_hat_t[:target.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "softmax(y_hat_t / 2)",
                            "Call"
                        ],
                        [
                            "target[1]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__328": {
                "parameters": {
                    "value": "module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "grad_norm_val",
                    "type": "variable",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_177": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[target, y_hat_t]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "summed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:target.size()[0] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "pad_sequence([target, y_hat_t], batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(target, min=0.0001)",
                            "Call"
                        ],
                        [
                            "softmax2(target / 2)",
                            "Call"
                        ],
                        [
                            "target.split(target, target.size()[0] // 2)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ],
                        [
                            "target[:target.size()[0] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "pad_sequence([target, y_hat_t], batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(target, min=0.0001)",
                            "Call"
                        ],
                        [
                            "softmax2(target / 2)",
                            "Call"
                        ],
                        [
                            "target.split(target, target.size()[0] // 2)",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_179": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summed == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clamp_189": {
                "input": {
                    "value": "y_hat_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_hat[idx]",
                            "Subscript"
                        ],
                        [
                            "y_hat_t[:target.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "softmax(y_hat_t / 2)",
                            "Call"
                        ],
                        [
                            "target[1]",
                            "Subscript"
                        ],
                        [
                            "y_hat[idx]",
                            "Subscript"
                        ],
                        [
                            "y_hat_t[:target.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "softmax(y_hat_t / 2)",
                            "Call"
                        ],
                        [
                            "target[1]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__203": {
                "parameters": {
                    "value": "module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "grad_norm_val",
                    "type": "variable",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_292": {
                "input": {
                    "value": "target[target.size()[0] - 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_170": {
                "input": {
                    "value": "target[target.size()[0] - 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tools/various.py": {
        "torch": {}
    }
}