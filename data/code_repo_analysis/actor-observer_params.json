{
    "checkpoints.py": {
        "torch": {
            "save_67": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'arch': args.arch, 'state_dict': model.state_dict(), 'top1': scores[metric], 'scores': scores, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/model.pth.tar'.format(args.cache)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_29": {
                "variable": {
                    "value": "chkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/charadesegoalignment.py": {
        "torch": {
            "DataLoader_20": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CharadesEgo(args.data, 'val', val_file, args.cache, args.cache_buster, transform=transforms.Compose([transforms.Resize(int(256.0 / 224 * args.inputsize)), transforms.CenterCrop(args.inputsize), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/charadesegoplusrgb.py": {
        "torch": {
            "ConcatDataset_59": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_dataset] + [train_datasetego] * 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConcatDataset_60": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[val_dataset] + [val_datasetego] * 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/charadesrgb.py": {
        "torch": {}
    },
    "datasets/get.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "valvideo_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valvideo_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_23": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "valvideoego_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "exp/alignment_and_zeroshot.py": {
        "torch": {}
    },
    "exp/baseline_resnet152charades.py": {
        "torch": {}
    },
    "exp/baseline_resnet152imagenet.py": {
        "torch": {}
    },
    "exp/third_to_first_person.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "manualseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "manualseed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "manualseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "manualseed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/ActorObserverBase.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.firstpos_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.third_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.firstpos_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([math.log(0.5)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.third_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([math.log(0.5)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.firstneg_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([math.log(0.5)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_27": {
                "variable": {
                    "value": "dist_a",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "base_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.basenet(x)",
                            "Call"
                        ],
                        [
                            "self.base(x, y, z)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "base_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.basenet(y)",
                            "Call"
                        ],
                        [
                            "self.base(x, y, z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_28": {
                "variable": {
                    "value": "dist_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "base_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.basenet(y)",
                            "Call"
                        ],
                        [
                            "self.base(x, y, z)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "base_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.basenet(z)",
                            "Call"
                        ],
                        [
                            "self.base(x, y, z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basenet.outdim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basenet.outdim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_46": {
                "input": {
                    "value": "self.firstpos_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_47": {
                "input": {
                    "value": "self.third_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_48": {
                "input": {
                    "value": "self.firstneg_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/ActorObserverBaseNoShare.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.firstneg_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.basenet.outdim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "self.basenet.outdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/ActorObserverFC7.py": {
        "torch": {
            "exp_27": {
                "input": {
                    "value": "self.firstpos_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_28": {
                "input": {
                    "value": "self.third_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/ActorObserverFirstPerson.py": {
        "torch": {
            "exp_27": {
                "input": {
                    "value": "self.firstpos_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_28": {
                "input": {
                    "value": "self.firstneg_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/ActorObserverWithClassifier.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.basenet.outdim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_22": {
                "input": {
                    "value": "self.firstpos_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_23": {
                "input": {
                    "value": "self.third_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_24": {
                "input": {
                    "value": "self.firstneg_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/ActorObserverWithClassifierNoShare.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.basenet.outdim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_23": {
                "input": {
                    "value": "self.firstpos_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_24": {
                "input": {
                    "value": "self.third_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_25": {
                "input": {
                    "value": "self.firstneg_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/ActorObserverWithClassifierOld.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.basenet.outdim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/__init__.py": {
        "torch": {
            "SGD_12": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/ActorObserverLoss.py": {
        "torch": {}
    },
    "models/layers/ActorObserverLossAllWithClassifier.py": {
        "torch": {
            "CrossEntropyLoss_17": {
                "variable": {
                    "value": "self.clsloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/ActorObserverLossWithClassifier.py": {
        "torch": {
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "self.clsloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/BlockGradient.py": {
        "torch": {}
    },
    "models/layers/DistRatio.py": {
        "torch": {
            "exp_64": {
                "input": {
                    "value": "-input1.clone()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "-input2.clone()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers/EqualizeGradNorm.py": {
        "torch": {}
    },
    "models/layers/MarginRank.py": {
        "torch": {}
    },
    "models/layers/VideoSoftmax.py": {
        "torch": {}
    },
    "models/triplet.py": {
        "torch": {
            "pairwise_distance_18": {
                "variable": {
                    "value": "dist_a",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "embedded_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddingnet(x)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "embedded_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddingnet(y)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_19": {
                "variable": {
                    "value": "dist_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "embedded_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddingnet(y)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "embedded_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddingnet(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/utils.py": {
        "torch": {
            "Sequential_39": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*newcls[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_65": {
                "variable": {
                    "value": "chkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_84": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(*newcls[:-1])",
                            "Call"
                        ],
                        [
                            "importlib.import_module('.' + arch, package='models')",
                            "Call"
                        ],
                        [
                            "model.__dict__[arch](args)",
                            "Call"
                        ],
                        [
                            "tmodels.__dict__[arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "tmodels.__dict__[arch]()",
                            "Call"
                        ],
                        [
                            "generic_load(args.subarch, args.pretrained, args.pretrained_subweights, args)",
                            "Call"
                        ],
                        [
                            "generic_load(args.arch, args.pretrained, args.pretrained_weights, args)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*newcls[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataParallel_87": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_89": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(*newcls[:-1])",
                            "Call"
                        ],
                        [
                            "importlib.import_module('.' + arch, package='models')",
                            "Call"
                        ],
                        [
                            "model.__dict__[arch](args)",
                            "Call"
                        ],
                        [
                            "tmodels.__dict__[arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "tmodels.__dict__[arch]()",
                            "Call"
                        ],
                        [
                            "generic_load(args.subarch, args.pretrained, args.pretrained_subweights, args)",
                            "Call"
                        ],
                        [
                            "generic_load(args.arch, args.pretrained, args.pretrained_weights, args)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "is_tensor_18": {
                "obj": {
                    "value": "obj.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}