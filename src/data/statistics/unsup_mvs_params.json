{
    "code/cnn_wrapper/network.py": {
        "tensorflow": {
            "transpose_208": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.conv(input_tensor, kernel_size, filters, strides, name, relu=False, dilation_rate=dilation_rate, padding=padding, biased=biased, reuse=self.reuse, separable=separable)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d_transpose(input, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_209": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, G, C // G, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_221": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_234": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [C], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [C], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_239": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv, center=center, scale=False, training=self.training, fused=True, trainable=center, reuse=self.reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv, center=center, scale=False, training=self.training, fused=True, trainable=center, reuse=self.reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input, center=center, scale=True, fused=True, trainable=self.trainable, reuse=self.reuse, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_380": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "center": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_175": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.conv(input_tensor, kernel_size, filters, strides, name, relu=False, dilation_rate=dilation_rate, padding=padding, biased=biased, reuse=self.reuse, separable=separable)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d_transpose(input, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "center": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_299": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.conv(input_tensor, kernel_size, filters, strides, name, relu=False, dilation_rate=dilation_rate, padding=padding, biased=biased, reuse=self.reuse, separable=separable)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d_transpose(input, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "center": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_312": {
                "features": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pooling2d_316": {
                "inputs": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "average_pooling2d_324": {
                "inputs": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_332": {
                "x": {
                    "value": "tf.layers.average_pooling2d(tf.square(input), pool_size=pool_size, strides=strides, padding=padding, name=name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "local_response_normalization_341": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [C], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_350": {
                "values": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_n_354": {
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_358": {
                "inputs": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu if relu else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_376": {
                "logits": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_388": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv, center=center, scale=False, training=self.training, fused=True, trainable=center, reuse=self.reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv, center=center, scale=False, training=self.training, fused=True, trainable=center, reuse=self.reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input, center=center, scale=True, fused=True, trainable=self.trainable, reuse=self.reuse, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_393": {
                "x": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "l2_normalize_401": {
                "x": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_405": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_457": {
                "variable": {
                    "value": "residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(f, g)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, dim1, dim2, dim3, int_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(y, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_141": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_168": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_183": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv, center=center, scale=False, training=self.training, fused=True, trainable=center, reuse=self.reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv, center=center, scale=False, training=self.training, fused=True, trainable=center, reuse=self.reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input, center=center, scale=True, fused=True, trainable=self.trainable, reuse=self.reuse, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_222": {
                "x": {
                    "value": "var + self.bn_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "name + '/gn'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_227": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_229": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_231": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_233": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_transpose_265": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_292": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_transpose_294": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_307": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv, center=center, scale=False, training=self.training, fused=True, trainable=center, reuse=self.reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv, center=center, scale=False, training=self.training, fused=True, trainable=center, reuse=self.reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input, center=center, scale=True, fused=True, trainable=self.trainable, reuse=self.reuse, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_pooling2d_332": {
                "inputs": {
                    "value": "tf.square(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_373": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_418": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_439": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [-1, channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [-1, channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(phi, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv3d_445": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_446": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(g, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_450": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(theta, phi, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(f)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(g, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_451": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(f, g)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, dim1, dim2, dim3, int_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(y, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim1, dim2, dim3, int_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_455": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(f, g)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, dim1, dim2, dim3, int_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(y, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_dict",
                            "Name"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv3d_143": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_170": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_236": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, C, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_267": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_333": {
                "x": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_422": {
                "name_or_scope": {
                    "value": "theta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_425": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_427": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_428": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [-1, channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_430": {
                "name_or_scope": {
                    "value": "phi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_433": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_435": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_436": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [-1, channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(input, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(phi, [-1, int_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_438": {
                "name_or_scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_441": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(theta, phi, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_443": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_448": {
                "name_or_scope": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_initializer_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/unsup_mvsnet/homography_warping.py": {
        "tensorflow": {
            "linspace_47": {
                "variable": {
                    "value": "x_linspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(width, 'float32') - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[2]",
                            "Subscript"
                        ],
                        [
                            "image_shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linspace_48": {
                "variable": {
                    "value": "y_linspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(height, 'float32') - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "meshgrid_49": {
                "variable": {
                    "value": "(x_coordinates, y_coordinates)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_linspace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.5, tf.cast(width, 'float32') - 0.5, width)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_linspace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.5, tf.cast(height, 'float32') - 0.5, height)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "x_coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_coordinates, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "y_coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_coordinates, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_coordinates, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_53": {
                "variable": {
                    "value": "indices_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_coordinates, y_coordinates, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, num_repeats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(x_coordinates)",
                            "Call"
                        ],
                        [
                            "tf.ones((1, num_repeats), dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.ones((1, num_repeats), dtype='float')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_63": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, num_repeats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones_like(x_coordinates)",
                            "Call"
                        ],
                        [
                            "tf.ones((1, num_repeats), dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.ones((1, num_repeats), dtype='float')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_69": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_77": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_81": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_83": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, 0, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x0, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_84": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x1, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, 0, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y0, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_86": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y1, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "indices_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, y0, x0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_90": {
                "variable": {
                    "value": "indices_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, y0, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "indices_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, y1, x0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "indices_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, y1, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_94": {
                "variable": {
                    "value": "pixel_values_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([b, y0, x0], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_95": {
                "variable": {
                    "value": "pixel_values_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([b, y0, x1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_96": {
                "variable": {
                    "value": "pixel_values_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([b, y1, x0], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_97": {
                "variable": {
                    "value": "pixel_values_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([b, y1, x1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_99": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, 0, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x0, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x1, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, 0, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y0, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_102": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y1, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_103": {
                "variable": {
                    "value": "area_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y1 - y) * (x1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_104": {
                "variable": {
                    "value": "area_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y1 - y) * (x - x0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "area_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y - y0) * (x1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "variable": {
                    "value": "area_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y - y0) * (x - x0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_107": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[area_a * pixel_values_a, area_b * pixel_values_b, area_c * pixel_values_c, area_d * pixel_values_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_7": {
                "variable": {
                    "value": "R_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_8": {
                "variable": {
                    "value": "R_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_9": {
                "variable": {
                    "value": "t_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_10": {
                "variable": {
                    "value": "t_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_11": {
                "variable": {
                    "value": "K_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_12": {
                "variable": {
                    "value": "K_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_19": {
                "variable": {
                    "value": "R_left_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(R_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_20": {
                "variable": {
                    "value": "R_right_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(R_right, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_22": {
                "variable": {
                    "value": "fronto_direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.squeeze(R_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_26": {
                "variable": {
                    "value": "c_relative",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.matmul(R_right_trans, tf.squeeze(t_right, axis=1))",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "c_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.matmul(R_left_trans, tf.squeeze(t_left, axis=1))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "temp_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "c_relative",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.subtract(c_right, c_left)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fronto_direction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.squeeze(R_left, axis=1), [0, 2, 0], [-1, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_31": {
                "variable": {
                    "value": "depth_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(depth, [batch_size, num_depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_33": {
                "variable": {
                    "value": "temp_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(temp_vec, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_36": {
                "variable": {
                    "value": "middle_mat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.matmul(R_left_trans, K_left_inv), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "middle_mat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "middle_mat0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.eye(3, batch_shape=[batch_size, num_depth]) - temp_vec / depth_mat",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "middle_mat1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.matmul(R_left_trans, K_left_inv), axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "homographies",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tile(K_right, [1, num_depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matmul(tf.tile(R_right, [1, num_depth, 1, 1]), middle_mat2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_115": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "slice_121": {
                "variable": {
                    "value": "affine_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_122": {
                "variable": {
                    "value": "div_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "variable": {
                    "value": "pixel_grids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_grids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_127": {
                "variable": {
                    "value": "pixel_grids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_grids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "pixel_grids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_grids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 3, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "variable": {
                    "value": "grids_affine",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "affine_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(homography, [0, 0, 0], [-1, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pixel_grids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "grids_div",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "div_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(homography, [0, 2, 0], [-1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pixel_grids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_136": {
                "variable": {
                    "value": "grids_div",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grids_div",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(div_mat, pixel_grids)",
                            "Call"
                        ],
                        [
                            "grids_div + grids_zero_add",
                            "BinOp"
                        ],
                        [
                            "tf.tile(grids_div, [1, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_137": {
                "variable": {
                    "value": "grids_inv_warped",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grids_affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(affine_mat, pixel_grids)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "grids_div",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(div_mat, pixel_grids)",
                            "Call"
                        ],
                        [
                            "grids_div + grids_zero_add",
                            "BinOp"
                        ],
                        [
                            "tf.tile(grids_div, [1, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_138": {
                "variable": {
                    "value": "(x_warped, y_warped)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "grids_inv_warped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.div(grids_affine, grids_div)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "x_warped_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_warped",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "y_warped_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_warped",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "warped_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "warped_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "interpolate(input_image, x_warped_flatten, y_warped_flatten)",
                            "Call"
                        ],
                        [
                            "tf.reshape(warped_image, shape=image_shape, name='warped_feature')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "tf.shape(input_image)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "warped_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_5": {
                "name": {
                    "value": "get_homographies",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_77": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_79": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_114": {
                "name": {
                    "value": "warping_by_homography",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_17": {
                "input": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_start + tf.cast(tf.range(depth_num), tf.float32) * depth_interval",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_18": {
                "input": {
                    "value": "K_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_19": {
                "input": {
                    "value": "R_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_20": {
                "input": {
                    "value": "R_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_22": {
                "input": {
                    "value": "R_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_24": {
                "a": {
                    "value": "R_left_trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.squeeze(t_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "a": {
                    "value": "R_right_trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_right, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.squeeze(t_right, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_29": {
                "input": {
                    "value": "R_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_31": {
                "tensor": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_start + tf.cast(tf.range(depth_num), tf.float32) * depth_interval",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "input": {
                    "value": "temp_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(c_relative, fronto_direction)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(temp_vec, axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_35": {
                "num_rows": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[batch_size, num_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "input": {
                    "value": "tf.matmul(R_left_trans, K_left_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_39": {
                "input": {
                    "value": "K_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "tf.tile(R_right, [1, num_depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "middle_mat2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(middle_mat0, middle_mat1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_47": {
                "x": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[2]",
                            "Subscript"
                        ],
                        [
                            "image_shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_48": {
                "x": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_134": {
                "x": {
                    "value": "tf.equal(grids_div, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_15": {
                "x": {
                    "value": "tf.range(depth_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "input": {
                    "value": "t_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_25": {
                "input": {
                    "value": "t_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "a": {
                    "value": "R_left_trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_left_inv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(tf.squeeze(K_left, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_40": {
                "input": {
                    "value": "R_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_134": {
                "x": {
                    "value": "grids_div",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(div_mat, pixel_grids)",
                            "Call"
                        ],
                        [
                            "grids_div + grids_zero_add",
                            "BinOp"
                        ],
                        [
                            "tf.tile(grids_div, [1, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "code/unsup_mvsnet/model.py": {
        "tensorflow": {
            "shape_23": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "range_31": {
                "variable": {
                    "value": "y_coordinates",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "range_32": {
                "variable": {
                    "value": "x_coordinates",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "meshgrid_33": {
                "variable": {
                    "value": "(b_coordinates, y_coordinates, x_coordinates)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "b_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "_repeat_(b_coordinates, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(height)",
                            "Call"
                        ],
                        [
                            "_repeat_(y_coordinates, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "d_coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "(depth_map - depth_start) / depth_interval",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_40": {
                "variable": {
                    "value": "d_coordinates_left0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(tf.floor(d_coordinates), 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_41": {
                "variable": {
                    "value": "d_coordinates_left1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "d_coordinates_left0 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_42": {
                "variable": {
                    "value": "d_coordinates1_right0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(tf.ceil(d_coordinates), 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_43": {
                "variable": {
                    "value": "d_coordinates1_right1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "d_coordinates1_right0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "voxel_coordinates_left0",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b_coordinates, d_coordinates_left0, y_coordinates, x_coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "voxel_coordinates_left1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b_coordinates, d_coordinates_left1, y_coordinates, x_coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "voxel_coordinates_right0",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b_coordinates, d_coordinates1_right0, y_coordinates, x_coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "voxel_coordinates_right1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b_coordinates, d_coordinates1_right1, y_coordinates, x_coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_56": {
                "variable": {
                    "value": "prob_map_left0",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "voxel_coordinates_left0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([b_coordinates, d_coordinates_left0, y_coordinates, x_coordinates], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_57": {
                "variable": {
                    "value": "prob_map_left1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "voxel_coordinates_left1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([b_coordinates, d_coordinates_left1, y_coordinates, x_coordinates], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_58": {
                "variable": {
                    "value": "prob_map_right0",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "voxel_coordinates_right0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([b_coordinates, d_coordinates1_right0, y_coordinates, x_coordinates], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_59": {
                "variable": {
                    "value": "prob_map_right1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "voxel_coordinates_right1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([b_coordinates, d_coordinates1_right1, y_coordinates, x_coordinates], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "prob_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prob_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prob_map_left0 + prob_map_left1 + prob_map_right0 + prob_map_right1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(prob_map, [batch_size, height, width, 1])",
                            "Call"
                        ],
                        [
                            "get_propability_map(probability_volume, estimated_depth_map, depth_start, depth_interval)",
                            "Call"
                        ],
                        [
                            "get_propability_map(probability_volume, estimated_depth_map, depth_start, depth_interval)",
                            "Call"
                        ],
                        [
                            "get_propability_map(probability_volume, estimated_depth_map, depth_start, depth_interval)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_72": {
                "variable": {
                    "value": "ref_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "ref_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, 0, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "filtered_cost_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtered_cost_volume_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "ref_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "variable": {
                    "value": "ref_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, 0, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_198": {
                "variable": {
                    "value": "filtered_cost_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtered_cost_volume_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "variable": {
                    "value": "ref_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_232": {
                "variable": {
                    "value": "ref_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, 0, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_242": {
                "variable": {
                    "value": "ref_feature2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ref_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_250": {
                "variable": {
                    "value": "view_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "view_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(view_features, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_259": {
                "variable": {
                    "value": "view_homographies",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "view_homographies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(view_homographies, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_301": {
                "variable": {
                    "value": "filtered_cost_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtered_cost_volume_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_331": {
                "variable": {
                    "value": "depth_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_depth_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tile_333": {
                "variable": {
                    "value": "depth_start_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(depth_start, [depth_shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, depth_shape[1], depth_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_335": {
                "variable": {
                    "value": "depth_end_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(depth_end, [depth_shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, depth_shape[1], depth_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_340": {
                "variable": {
                    "value": "init_norm_depth_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "init_depth_map - depth_start_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "depth_scale_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_end_mat - depth_start_mat",
                            "BinOp"
                        ]
                    ]
                }
            },
            "resize_bilinear_343": {
                "variable": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[depth_shape[1], depth_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_464": {
                "variable": {
                    "value": "pcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "proj_c2p",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "cam_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_pixel2cam(depth, grid, K_left_inv)",
                            "Call"
                        ],
                        [
                            "tf.matmul(intrinsic_mat_inv, pixel_coords) * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "slice_465": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pcoords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_466": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pcoords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_467": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pcoords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(proj_c2p, cam_coords)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_470": {
                "variable": {
                    "value": "pixel_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_norm, y_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_480": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_483": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_488": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "(x_t + 1.0) * 0.5 * tf.cast(width - 1, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_489": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ],
                        [
                            "(y_t + 1.0) * 0.5 * tf.cast(height - 1, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_490": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_491": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_496": {
                "variable": {
                    "value": "img_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(img)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_497": {
                "variable": {
                    "value": "img_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(img)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "average_pooling2d_602": {
                "variable": {
                    "value": "mu_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.slice(pcoords, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_pooling2d_603": {
                "variable": {
                    "value": "mu_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(pcoords, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_pooling2d_610": {
                "variable": {
                    "value": "ssim_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_and(x0 >= zero, x1 <= max_x), tf.logical_and(y0 >= zero, y1 <= max_y))",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, tf.stack([batch_size, height, width, 1]))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_630": {
                "variable": {
                    "value": "weights_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(lambda_wt * tf.reduce_mean(tf.abs(image_dx), 3, keepdims=True))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_631": {
                "variable": {
                    "value": "weights_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(lambda_wt * tf.reduce_mean(tf.abs(image_dy), 3, keepdims=True))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.slice(pcoords, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_18": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, num_repeats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.slice(pcoords, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.slice(pcoords, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones((1, num_repeats), dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.ones([batch_size, 1, img_height * img_width])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(x_t_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "view_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "view_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, view, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "cost_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "depth_costs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "variable": {
                    "value": "probability_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.scalar_mul(-1, filtered_cost_volume)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_volume",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_129": {
                "variable": {
                    "value": "volume_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), dim=1, name='prob_volume')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), dim=1, name='prob_volume')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), axis=1, name='prob_volume')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "soft_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(soft_2d, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[volume_shape[0], volume_shape[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_135": {
                "variable": {
                    "value": "soft_4d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, volume_shape[2], volume_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft_4d * probability_volume",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_137": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_depth_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_162": {
                "variable": {
                    "value": "view_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_169": {
                "variable": {
                    "value": "view_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, view, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "cost_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "depth_costs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "variable": {
                    "value": "probability_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.scalar_mul(-1, filtered_cost_volume)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_volume",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_206": {
                "variable": {
                    "value": "volume_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), dim=1, name='prob_volume')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), dim=1, name='prob_volume')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), axis=1, name='prob_volume')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "soft_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(soft_2d, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[volume_shape[0], volume_shape[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_212": {
                "variable": {
                    "value": "soft_4d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, volume_shape[2], volume_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_213": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft_4d * probability_volume",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_214": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_depth_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_246": {
                "variable": {
                    "value": "view_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_255": {
                "variable": {
                    "value": "view_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, view, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_294": {
                "variable": {
                    "value": "cost_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "depth_costs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_306": {
                "variable": {
                    "value": "probability_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.scalar_mul(-1, filtered_cost_volume)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_volume",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_310": {
                "variable": {
                    "value": "volume_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), dim=1, name='prob_volume')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), dim=1, name='prob_volume')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), axis=1, name='prob_volume')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_315": {
                "variable": {
                    "value": "soft_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(soft_2d, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[volume_shape[0], volume_shape[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_316": {
                "variable": {
                    "value": "soft_4d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, volume_shape[2], volume_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_317": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft_4d * probability_volume",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_318": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_depth_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_362": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_363": {
                "variable": {
                    "value": "interval",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(interval, [shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_364": {
                "variable": {
                    "value": "mask_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(y_true, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_366": {
                "variable": {
                    "value": "masked_abs_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_true * (y_true - y_pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_367": {
                "variable": {
                    "value": "masked_mae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_abs_error",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(mask_true * (y_true - y_pred))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_368": {
                "variable": {
                    "value": "masked_mae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_mae / interval / denom",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_374": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_375": {
                "variable": {
                    "value": "mask_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(y_true, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_377": {
                "variable": {
                    "value": "interval_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(interval, [shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, shape[1], shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_385": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_386": {
                "variable": {
                    "value": "mask_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(y_true, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_388": {
                "variable": {
                    "value": "interval_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(interval, [shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, shape[1], shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_407": {
                "variable": {
                    "value": "R_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_408": {
                "variable": {
                    "value": "R_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_409": {
                "variable": {
                    "value": "t_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_410": {
                "variable": {
                    "value": "t_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_411": {
                "variable": {
                    "value": "K_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_412": {
                "variable": {
                    "value": "K_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_414": {
                "variable": {
                    "value": "K_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(K_left, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_418": {
                "variable": {
                    "value": "R_left_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(R_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_419": {
                "variable": {
                    "value": "R_right_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(R_right, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_421": {
                "variable": {
                    "value": "R_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(R_left, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_422": {
                "variable": {
                    "value": "t_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t_left, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_423": {
                "variable": {
                    "value": "R_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(R_right, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_424": {
                "variable": {
                    "value": "t_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t_right, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_427": {
                "variable": {
                    "value": "R_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "R_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(R_right, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "R_left_trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_428": {
                "variable": {
                    "value": "t_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t_right, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.matmul(R_rel, t_left)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_431": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_432": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(filler, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_433": {
                "variable": {
                    "value": "transform_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[R_rel, t_rel]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_434": {
                "variable": {
                    "value": "transform_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[transform_mat, filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_436": {
                "variable": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_438": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(cv)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(depth, [batch_size, 1, img_height * img_width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, img_height * img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_440": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(grid, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_442": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, img_height * img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_443": {
                "variable": {
                    "value": "cam_coords_hom",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cam_coords, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_446": {
                "variable": {
                    "value": "hom_filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_447": {
                "variable": {
                    "value": "hom_filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hom_filler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 0.0, 1.0], shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.tile(hom_filler, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_449": {
                "variable": {
                    "value": "intrinsic_mat_hom",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[K_left, tf.zeros([batch_size, 3, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_451": {
                "variable": {
                    "value": "intrinsic_mat_hom",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[intrinsic_mat_hom, hom_filler]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_452": {
                "variable": {
                    "value": "proj_target_cam_to_source_pixel",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "intrinsic_mat_hom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([K_left, tf.zeros([batch_size, 3, 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([intrinsic_mat_hom, hom_filler], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "transform_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([R_rel, t_rel], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([transform_mat, filler], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_455": {
                "variable": {
                    "value": "source_pixel_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_pixel_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_cam2pixel(cam_coords_hom, proj_target_cam_to_source_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 2, img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_457": {
                "variable": {
                    "value": "source_pixel_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source_pixel_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_cam2pixel(cam_coords_hom, proj_target_cam_to_source_pixel)",
                            "Call"
                        ],
                        [
                            "tf.reshape(source_pixel_coords, [batch_size, 2, img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(source_pixel_coords, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_525": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.slice(pcoords, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_526": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(pcoords, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_532": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.slice(pcoords, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_533": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(pcoords, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_534": {
                "variable": {
                    "value": "height_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_535": {
                "variable": {
                    "value": "width_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_536": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_537": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_538": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_545": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_547": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_and_550": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(x0 >= zero, x1 <= max_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_and(y0 >= zero, y1 <= max_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_553": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_and(x0 >= zero, x1 <= max_x), tf.logical_and(y0 >= zero, y1 <= max_y))",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, tf.stack([batch_size, height, width, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_555": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_556": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_557": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_558": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_564": {
                "variable": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_565": {
                "variable": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_566": {
                "variable": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size) * dim1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(base, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(base, [1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(base, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_576": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_577": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_578": {
                "variable": {
                    "value": "pixel_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_579": {
                "variable": {
                    "value": "pixel_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_580": {
                "variable": {
                    "value": "pixel_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_581": {
                "variable": {
                    "value": "pixel_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(im_flat)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_583": {
                "variable": {
                    "value": "x1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_584": {
                "variable": {
                    "value": "y1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_587": {
                "variable": {
                    "value": "wa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_588": {
                "variable": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (1.0 - (y1_f - y))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_589": {
                "variable": {
                    "value": "wc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - (x1_f - x)) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_590": {
                "variable": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - (x1_f - x)) * (1.0 - (y1_f - y))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_592": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_593": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n([wa * pixel_a, wb * pixel_b, wc * pixel_c, wd * pixel_d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, tf.stack([batch_size, height, width, channels]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batch_size, height, width, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_594": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_and(x0 >= zero, x1 <= max_x), tf.logical_and(y0 >= zero, y1 <= max_y))",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, tf.stack([batch_size, height, width, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batch_size, height, width, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "huber_loss_658": {
                "variable": {
                    "value": "photo_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "warped * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "predictions": {
                    "value": "ref * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "delta": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_gradients_672": {
                "variable": {
                    "value": "(ref_dy, ref_dx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image": {
                    "value": "ref * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_gradients_673": {
                "variable": {
                    "value": "(warped_dy, warped_dx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image": {
                    "value": "warped * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_674": {
                "variable": {
                    "value": "photo_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "warped * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "predictions": {
                    "value": "ref * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "delta": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_676": {
                "variable": {
                    "value": "grad_loss_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warped_dx - ref_dx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_677": {
                "variable": {
                    "value": "grad_loss_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warped_dy - ref_dy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.slice(pcoords, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_27": {
                "input": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.floor(d_coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_42": {
                "x": {
                    "value": "tf.ceil(d_coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_72": {
                "input_": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_73": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "cost_volume_homography",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_103": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ref_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_124": {
                "name": {
                    "value": "soft_arg_min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_132": {
                "variable": {
                    "value": "soft_1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "depth_start[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stop": {
                    "value": "depth_end[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(depth_num, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_152": {
                "input_": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_153": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_175": {
                "name": {
                    "value": "cost_volume_homography",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_180": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ref_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_201": {
                "name": {
                    "value": "soft_arg_min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_209": {
                "variable": {
                    "value": "soft_1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "depth_start[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stop": {
                    "value": "depth_end[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(depth_num, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_231": {
                "input_": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_232": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_262": {
                "name": {
                    "value": "cost_volume_homography",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_267": {
                "variable": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ave",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_270": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ave2",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_273": {
                "variable": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "ref_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_274": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave2', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ref_feature2)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ave_feature2 / FLAGS.view_num - ave_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature2, tf.square(warped_view_feature))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "ref_feature2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(ref_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_286": {
                "variable": {
                    "value": "view",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_288": {
                "variable": {
                    "value": "(_, ave_feature, ave_feature2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda view, *_: tf.less(view, FLAGS.view_num - 1)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[view, ave_feature, ave_feature2]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_291": {
                "variable": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_292": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave2', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ref_feature2)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ave_feature2 / FLAGS.view_num - ave_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature2, tf.square(warped_view_feature))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "ave_feature2 / FLAGS.view_num - ave_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_304": {
                "name": {
                    "value": "soft_arg_min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_313": {
                "variable": {
                    "value": "soft_1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "depth_start[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stop": {
                    "value": "depth_end[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(depth_num, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_323": {
                "x": {
                    "value": "tf.greater_equal(prob_map, 0.8)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "tensor": {
                    "value": "depth_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth_shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_335": {
                "tensor": {
                    "value": "depth_end",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[depth_shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_355": {
                "x": {
                    "value": "norm_depth_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_depth_tower.get_output()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "depth_scale_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_end_mat - depth_start_mat",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_361": {
                "name": {
                    "value": "MAE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_373": {
                "name": {
                    "value": "less_one_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_380": {
                "input_tensor": {
                    "value": "less_one_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask_true * tf.cast(tf.less_equal(abs_diff_image, 1.0), dtype='float32')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_384": {
                "name": {
                    "value": "less_three_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_391": {
                "input_tensor": {
                    "value": "less_three_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask_true * tf.cast(tf.less_equal(abs_diff_image, 3.0), dtype='float32')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_405": {
                "name": {
                    "value": "inverse_warping",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_475": {
                "a": {
                    "value": "intrinsic_mat_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "pixel_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([x_norm, y_norm], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_481": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_482": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_484": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_485": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_486": {
                "x": {
                    "value": "width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_487": {
                "x": {
                    "value": "height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_524": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'blinear_sampler'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "average_pooling2d_604": {
                "inputs": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_pooling2d_605": {
                "inputs": {
                    "value": "y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_pooling2d_606": {
                "inputs": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_611": {
                "t": {
                    "value": "(1 - ssim) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_634": {
                "input_tensor": {
                    "value": "abs(smoothness_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_647": {
                "input_tensor": {
                    "value": "tf.abs(dy2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "huber_loss_653": {
                "labels": {
                    "value": "warped * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "predictions": {
                    "value": "ref * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "delta": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "absolute_difference_667": {
                "labels": {
                    "value": "warped * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "predictions": {
                    "value": "ref * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_40": {
                "x": {
                    "value": "d_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape((depth_map - depth_start) / depth_interval, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_42": {
                "x": {
                    "value": "d_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape((depth_map - depth_start) / depth_interval, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_84": {
                "input_": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_92": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_105": {
                "variable": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "view_homographies[view]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, d, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_mul_127": {
                "scalar": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "filtered_cost_volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_134": {
                "values": {
                    "value": "soft_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_162": {
                "input_": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_169": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_182": {
                "variable": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "view_homographies[view]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, d, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_183": {
                "variable": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_mul_204": {
                "scalar": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "filtered_cost_volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_211": {
                "values": {
                    "value": "soft_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_246": {
                "input_": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_255": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_278": {
                "variable": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "view_homographies[view]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, d, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_279": {
                "variable": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homography",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_add_281": {
                "variable": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "warped_view_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "homography_warping(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "homography_warping(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "homography_warping(view_features[view], homography)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_282": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave2', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ref_feature2)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ave_feature2 / FLAGS.view_num - ave_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature2, tf.square(warped_view_feature))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.square(warped_view_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_283": {
                "variable": {
                    "value": "view",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "view",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(0, FLAGS.view_num - 1)",
                            "Call"
                        ],
                        [
                            [
                                1,
                                2
                            ],
                            "Call"
                        ],
                        [
                            "range(1, view_num)",
                            "Call"
                        ],
                        [
                            "range(0, view_num - 1)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.add(view, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_mul_306": {
                "scalar": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "filtered_cost_volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_315": {
                "values": {
                    "value": "soft_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_323": {
                "x": {
                    "value": "prob_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prob_map_left0 + prob_map_left1 + prob_map_right0 + prob_map_right1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(prob_map, [batch_size, height, width, 1])",
                            "Call"
                        ],
                        [
                            "get_propability_map(probability_volume, estimated_depth_map, depth_start, depth_interval)",
                            "Call"
                        ],
                        [
                            "get_propability_map(probability_volume, estimated_depth_map, depth_start, depth_interval)",
                            "Call"
                        ],
                        [
                            "get_propability_map(probability_volume, estimated_depth_map, depth_start, depth_interval)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "not_equal_364": {
                "x": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_365": {
                "input_tensor": {
                    "value": "mask_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_375": {
                "x": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_376": {
                "input_tensor": {
                    "value": "mask_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_377": {
                "tensor": {
                    "value": "interval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(interval, [shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_378": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_379": {
                "x": {
                    "value": "tf.less_equal(abs_diff_image, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_386": {
                "x": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "input_tensor": {
                    "value": "mask_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_388": {
                "tensor": {
                    "value": "interval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(interval, [shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_389": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_390": {
                "x": {
                    "value": "tf.less_equal(abs_diff_image, 3.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_418": {
                "input": {
                    "value": "R_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(R_left, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_419": {
                "input": {
                    "value": "R_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(R_right, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_428": {
                "a": {
                    "value": "R_rel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(R_right, R_left_trans)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "t_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t_left, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_440": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_meshgrid_abs(img_height, img_width)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, 0), [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_482": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_484": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_496": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_497": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_529": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_545": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.slice(pcoords, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * (width_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_547": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(pcoords, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(y)",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * (height_f - 1.0) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_and_551": {
                "x": {
                    "value": "x0 >= zero",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "x1 <= max_x",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_552": {
                "x": {
                    "value": "y0 >= zero",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "y1 <= max_y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "range_563": {},
            "stack_576": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_593": {
                "values": {
                    "value": "[batch_size, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_594": {
                "values": {
                    "value": "[batch_size, height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_646": {
                "input_tensor": {
                    "value": "tf.abs(dydx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_647": {
                "x": {
                    "value": "dy2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "huber_loss_659": {
                "labels": {
                    "value": "warped_dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "ref_dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "huber_loss_660": {
                "labels": {
                    "value": "warped_dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "ref_dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_69": {
                "x": {
                    "value": "depth_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_112": {
                "x": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_132": {
                "x": {
                    "value": "depth_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_149": {
                "x": {
                    "value": "depth_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_189": {
                "x": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_209": {
                "x": {
                    "value": "depth_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_225": {
                "x": {
                    "value": "depth_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "shape": {
                    "value": "[FLAGS.batch_size, feature_h, feature_w, feature_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "shape": {
                    "value": "[FLAGS.batch_size, feature_h, feature_w, feature_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_287": {
                "x": {
                    "value": "view",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(0, FLAGS.view_num - 1)",
                            "Call"
                        ],
                        [
                            [
                                1,
                                2
                            ],
                            "Call"
                        ],
                        [
                            "range(1, view_num)",
                            "Call"
                        ],
                        [
                            "range(0, view_num - 1)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.add(view, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FLAGS.view_num - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_313": {
                "x": {
                    "value": "depth_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_332": {
                "x": {
                    "value": "depth_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_379": {
                "x": {
                    "value": "abs_diff_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(y_true - y_pred) / interval_image",
                            "BinOp"
                        ],
                        [
                            "tf.abs(y_true - y_pred) / interval_image",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_equal_390": {
                "x": {
                    "value": "abs_diff_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(y_true - y_pred) / interval_image",
                            "BinOp"
                        ],
                        [
                            "tf.abs(y_true - y_pred) / interval_image",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_450": {
                "shape": {
                    "value": "[batch_size, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_481": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_482": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_485": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_630": {
                "input_tensor": {
                    "value": "tf.abs(image_dx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_631": {
                "input_tensor": {
                    "value": "tf.abs(image_dy)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_644": {
                "input_tensor": {
                    "value": "tf.abs(dx2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_645": {
                "input_tensor": {
                    "value": "tf.abs(dxdy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_646": {
                "x": {
                    "value": "dydx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_109": {
                "x": {
                    "value": "warped_view_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "homography_warping(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "homography_warping(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "homography_warping(view_features[view], homography)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_186": {
                "x": {
                    "value": "warped_view_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "homography_warping(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "homography_warping(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "homography_warping(view_features[view], homography)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_282": {
                "x": {
                    "value": "warped_view_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "homography_warping(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "homography_warping(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "homography_warping(view_features[view], homography)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_291": {
                "x": {
                    "value": "ave_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_537": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_538": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_630": {
                "x": {
                    "value": "image_dx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gradient_x(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_631": {
                "x": {
                    "value": "image_dy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gradient_y(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_644": {
                "x": {
                    "value": "dx2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_645": {
                "x": {
                    "value": "dxdy",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/unsup_mvsnet/preprocess.py": {
        "tensorflow": {
            "split_230": {
                "variable": {
                    "value": "cluster_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_343": {
                "variable": {
                    "value": "cluster_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/unsup_mvsnet/test_dtu.py": {
        "tensorflow": {
            "DEFINE_string_22": {
                "name": {
                    "value": "dense_folder",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/home/tejas/unsup_mvs/data/mvs_testing/dtu",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Root path to dense folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "output_folder",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/home/tejas/unsup_mvs/outputs/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Root path to output folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/home/tejas/unsup_mvs/saved_models/lambda1_128_nc3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to restore the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "ckpt_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "45000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "ckpt step.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "view_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images (1 ref image and view_num - 1 view images).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "max_d",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum depth step when testing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "max_w",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image width when testing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "max_h",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image height when testing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_40": {
                "name": {
                    "value": "sample_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Downsample scale for building cost volume (W and H).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_42": {
                "name": {
                    "value": "interval_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Downsample scale for building cost volume (D).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_44": {
                "name": {
                    "value": "base_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Base image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Testing batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_48": {
                "name": {
                    "value": "adaptive_scaling",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Let image size to fit the network, including 'scaling', 'cropping'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "depth_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(scaled_cams, [0, 0, 1, 3, 0], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "depth_interval",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(scaled_cams, [0, 0, 1, 3, 1], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_163": {
                "variable": {
                    "value": "depth_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.slice(scaled_cams, [0, 0, 1, 3, 2], [1, 1, 1, 1, 1]), [])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "depth_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(scaled_cams, [0, 0, 1, 3, 3], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_176": {
                "variable": {
                    "value": "var_init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_179": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_156": {
                "dims": {
                    "value": "[None, FLAGS.view_num, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_157": {
                "dims": {
                    "value": "[None, FLAGS.view_num, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_158": {
                "dims": {
                    "value": "[None, FLAGS.view_num, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_160": {
                "input_": {
                    "value": "scaled_cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scale_mvs_camera(croped_cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(scaled_cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_162": {
                "input_": {
                    "value": "scaled_cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scale_mvs_camera(croped_cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(scaled_cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "tensor": {
                    "value": "tf.slice(scaled_cams, [0, 0, 1, 3, 2], [1, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_168": {
                "input_": {
                    "value": "scaled_cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scale_mvs_camera(croped_cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(scaled_cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_182": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_192": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_164": {
                "input_": {
                    "value": "scaled_cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scale_mvs_camera(croped_cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(scaled_cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/unsup_mvsnet/train_dtu.py": {
        "tensorflow": {
            "DEFINE_string_23": {
                "name": {
                    "value": "dtu_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/home/tejas/unsup_mvs/data/mvs_training/dtu/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to dtu dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "log_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/home/tejas/unsup_mvs/logs/lambda1_128_nc3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to store the log.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_27": {
                "name": {
                    "value": "save_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/home/tejas/unsup_mvs/saved_models/lambda1_128_nc3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to save the model checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "save_op_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/home/tejas/unsup_mvs/saved_outputs/lambda1_128_nc3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to dir where outputs are dumped",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "save_op_interval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Interval to dump out outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "val_interval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of train steps after which to run 40 val steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "num_gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of GPUs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "view_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images (1 ref image and view_num - 1 view images).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "max_d",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum depth steps when training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "max_w",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image width when training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "max_h",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image height when train  ing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_48": {
                "name": {
                    "value": "sample_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Downsample scale for building cost volume.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "base_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Base image size to fit the network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_52": {
                "name": {
                    "value": "interval_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.6",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Downsample scale for building cost volume.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "training batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_56": {
                "name": {
                    "value": "epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "training epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_58": {
                "name": {
                    "value": "val_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "ratio of validation set when splitting dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_60": {
                "name": {
                    "value": "smooth_lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "lamda weighting of image gradient in smooth loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_64": {
                "name": {
                    "value": "pretrained_model_ckpt_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to restore the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "ckpt_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "ckpt step.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_73": {
                "name": {
                    "value": "base_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Base learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_75": {
                "name": {
                    "value": "display",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Interval of loginfo display.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_77": {
                "name": {
                    "value": "stepvalue",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Step interval to decay learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "snapshot",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Step interval to save the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_81": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "average_gradients(tower_grads)",
                            "Call"
                        ],
                        [
                            "self.opt.compute_gradients(self.unsup_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_145": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_160": {
                "variable": {
                    "value": "self.config",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_162": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self.config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_199": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_200": {
                "variable": {
                    "value": "self.lr_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.5 * FLAGS.base_lr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "FLAGS.stepvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "FLAGS.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_202": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_327": {
                "variable": {
                    "value": "weights_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_334": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "merge_335": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.SUMMARIES, scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_336": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_338": {
                "variable": {
                    "value": "self.train_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_343": {
                "variable": {
                    "value": "self.init_unsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.unsup_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_517": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_138": {
                "variable": {
                    "value": "expanded_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_353": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_355": {
                "variable": {
                    "value": "val_summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "val_summary_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(FLAGS.log_dir), os.path.basename(FLAGS.log_dir) + '_val')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_319": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_320": {
                "name": {
                    "value": "unsup_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.unsup_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_321": {
                "name": {
                    "value": "less_one_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.less_one_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_322": {
                "name": {
                    "value": "less_three_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.less_three_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_323": {
                "name": {
                    "value": "reconstr_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reconstr_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_324": {
                "name": {
                    "value": "self.ssim_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.ssim_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_325": {
                "name": {
                    "value": "self.smooth_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.smooth_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_326": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_359": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_207": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_210": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_211": {
                "variable": {
                    "value": "self.cams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "self.depth_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "variable": {
                    "value": "depth_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(cams, [0, 0, 1, 3, 0], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "depth_interval",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(cams, [0, 0, 1, 3, 1], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_230": {
                "variable": {
                    "value": "inf_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(images, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_234": {
                "variable": {
                    "value": "ref_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_244": {
                "variable": {
                    "value": "resized_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images[0, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(FLAGS.max_h / 4), int(FLAGS.max_w / 4)]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_245": {
                "variable": {
                    "value": "ref_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "resized_imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(images[0, :, :, :, :], [int(FLAGS.max_h / 4), int(FLAGS.max_w / 4)], align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_246": {
                "variable": {
                    "value": "ref_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, 0, 0, 0, 0], [1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_247": {
                "variable": {
                    "value": "dmap_coarse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_248": {
                "variable": {
                    "value": "dmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(refined_depth_map, [0, 0, 0, 0], [1, -1, -1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_264": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_": {
                    "value": "ref_cam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(cams, [0, 0, 0, 0, 0], [1, 1, 2, 4, 4]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_289": {
                "variable": {
                    "value": "reprojection_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(reprojection_losses)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 3, 4, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_291": {
                "variable": {
                    "value": "(top_vals, self.top_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.negative(reprojection_volume)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "negative_292": {
                "variable": {
                    "value": "top_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.negative(top_vals)",
                            "Call"
                        ],
                        [
                            "tf.multiply(top_vals, tf.cast(top_mask, top_vals.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "less_293": {
                "variable": {
                    "value": "top_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.negative(top_vals)",
                            "Call"
                        ],
                        [
                            "tf.multiply(top_vals, tf.cast(top_mask, top_vals.dtype))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "10000.0 * tf.ones_like(top_vals)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_294": {
                "variable": {
                    "value": "top_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.negative(top_vals)",
                            "Call"
                        ],
                        [
                            "tf.multiply(top_vals, tf.cast(top_mask, top_vals.dtype))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(top_mask, top_vals.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_296": {
                "variable": {
                    "value": "self.error_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "top_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.negative(top_vals)",
                            "Call"
                        ],
                        [
                            "tf.multiply(top_vals, tf.cast(top_mask, top_vals.dtype))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_297": {
                "variable": {
                    "value": "self.reconstr_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(top_vals, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_298": {
                "variable": {
                    "value": "self.warped",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "warped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_299": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_collection_305": {
                "variable": {
                    "value": "summaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_329": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_list",
                            "Name"
                        ]
                    ]
                }
            },
            "name_scope_208": {
                "name": {
                    "value": "'Model_tower%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_266": {
                "variable": {
                    "value": "view_cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, view, 0, 0, 0], [1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_267": {
                "variable": {
                    "value": "view_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "resized_imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(images[0, :, :, :, :], [int(FLAGS.max_h / 4), int(FLAGS.max_w / 4)], align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_332": {
                "name": {
                    "value": "var.op.name + '/gradients'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_215": {
                "dims": {
                    "value": "[None, FLAGS.view_num, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_216": {
                "dims": {
                    "value": "[None, FLAGS.view_num, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_217": {
                "dims": {
                    "value": "[None, None, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_219": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_221": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_234": {
                "input_": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(images, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_246": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_248": {
                "input_": {
                    "value": "refined_depth_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_refine(depth_map, ref_image, FLAGS.max_d, depth_start, depth_interval, is_master_gpu)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_286": {
                "input": {
                    "value": "dmap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(refined_depth_map, [0, 0, 0, 0], [1, -1, -1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_289": {
                "values": {
                    "value": "reprojection_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "negative_291": {
                "x": {
                    "value": "reprojection_volume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.stack(reprojection_losses), [1, 2, 3, 4, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_294": {
                "x": {
                    "value": "top_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(top_vals, 10000.0 * tf.ones_like(top_vals))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "top_vals.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_297": {
                "input_tensor": {
                    "value": "top_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.negative(top_vals)",
                            "Call"
                        ],
                        [
                            "tf.multiply(top_vals, tf.cast(top_mask, top_vals.dtype))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Summary_416": {
                "variable": {
                    "value": "val_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_266": {
                "input_": {
                    "value": "cams",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_282": {
                "input_tensor": {
                    "value": "ssim(ref_resized, warped_view, mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_293": {
                "input": {
                    "value": "top_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.negative(top_vals)",
                            "Call"
                        ],
                        [
                            "tf.multiply(top_vals, tf.cast(top_mask, top_vals.dtype))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}