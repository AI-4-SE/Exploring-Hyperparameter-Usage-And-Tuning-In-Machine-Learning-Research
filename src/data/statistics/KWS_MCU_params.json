{
    "Scripts/ParameterExtraction/weight_extractor.py": {
        "torch": {
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_maps[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(n_mels, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_maps[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9921875 * torch.ones((1, 1, 40, 100)).type(torch.FloatTensor)",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 2)",
                            "Call"
                        ],
                        [
                            "self.output(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9921875 * torch.ones((1, 1, 40, 100)).type(torch.FloatTensor)",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 2)",
                            "Call"
                        ],
                        [
                            "self.output(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'conv{}'.format(i))(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_127": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "self.n_maps[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_maps[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if i % 2 == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_111": {
                "*size": {
                    "value": "(1, 1, 40, 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_130": {
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "Scripts/Preprocessing/compute_filter_values.py": {
        "torch": {}
    },
    "Scripts/TrainedNetwork/main.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sd.SpeechDataset(test, 'train', ap, WORD_LIST)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Scripts/TrainedNetwork/model.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_maps[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(n_mels, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_maps[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, (x.shape[0], 1, self.n_mels, -1))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.shape[0], 1, self.n_mels, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, (x.shape[0], 1, self.n_mels, -1))",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'conv{}'.format(i))(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_46": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "self.n_maps[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_maps[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if i % 2 == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_49": {
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "Scripts/TrainedNetwork/speech_dataset.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SpeechDataset(train, 'train', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SpeechDataset(dev, 'train', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_205": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SpeechDataset(test, 'train', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_16": {
                "device": {
                    "value": "geforce_rtx_3060_xc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "zero_fill",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "audio_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "abs(shift_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.spectrogram",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torchaudio.transforms.MelSpectrogram(sample_rate=16000, n_fft=480, hop_length=160, f_min=0, f_max=8000, n_mels=40, window_fn=torch.hann_window)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "audio_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(audio_data[:, 0:audio_data.shape[1] + shift_val], zero_fill)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "audio_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zero_fill, audio_data[:, shift_val:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_149": {
                "variable": {
                    "value": "out_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "amplitude * wav_data[:, slice_idx:slice_idx + self.sample_length]",
                            "BinOp"
                        ],
                        [
                            "1 * wav_data",
                            "BinOp"
                        ],
                        [
                            "F.pad(out_data, pad=(0, 16000 - out_data.shape[1]), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self.shift_audio(out_data)",
                            "Call"
                        ],
                        [
                            "out_data + 0.01 * torch.randn(out_data.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 16000 - out_data.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_157": {
                "*size": {
                    "value": "out_data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Scripts/TrainedNetwork/utility.py": {
        "torch": {
            "is_available_7": {
                "variable": {
                    "value": "train_on_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_22": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sd.SpeechDataset(train_files, 'train', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sd.SpeechDataset(dev_files, 'dev', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sd.SpeechDataset(test_files, 'test', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_71": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=0.01, weight_decay=0.001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_38": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_34": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_123": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_119": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_100": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TCResNet_pytorch/main.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sd.SpeechDataset(test, 'train', ap, WORD_LIST)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TCResNet_pytorch/model.py": {
        "torch": {
            "rand_197": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "101",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.s2_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block2(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.s2_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block2(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block2(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.s2_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block2(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.s2_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block2(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block2(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.s2_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block2(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.s2_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block2(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block2(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_82": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.conv_res(x)",
                            "Call"
                        ],
                        [
                            "self.bn_res(identity)",
                            "Call"
                        ],
                        [
                            "F.relu(identity)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_85": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.s2_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block2(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "self.conv_block(x)",
                            "Call"
                        ],
                        [
                            "self.s2_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block0(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block1(out)",
                            "Call"
                        ],
                        [
                            "self.s2_block2(out)",
                            "Call"
                        ],
                        [
                            "self.s1_block2(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_mels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(16 * k)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_111": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 13)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(48 * k)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_mels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(16 * k)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_164": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 13)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_165": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(48 * k)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_131": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "101",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_187": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "101",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "TCResNet8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_137": {
                "f": {
                    "value": "TCResNet8",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "TCResNet14",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_193": {
                "f": {
                    "value": "TCResNet14",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "TCResNet_pytorch/speech_dataset.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SpeechDataset(train, 'train', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SpeechDataset(dev, 'train', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_205": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SpeechDataset(test, 'train', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_16": {
                "device": {
                    "value": "geforce_rtx_3060_xc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "zero_fill",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "audio_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "abs(shift_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.spectrogram",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torchaudio.transforms.MelSpectrogram(sample_rate=16000, n_fft=480, hop_length=160, f_min=0, f_max=8000, n_mels=40, window_fn=torch.hann_window)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "audio_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(audio_data[:, 0:audio_data.shape[1] + shift_val], zero_fill)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "audio_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zero_fill, audio_data[:, shift_val:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_149": {
                "variable": {
                    "value": "out_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "amplitude * wav_data[:, slice_idx:slice_idx + self.sample_length]",
                            "BinOp"
                        ],
                        [
                            "1 * wav_data",
                            "BinOp"
                        ],
                        [
                            "F.pad(out_data, pad=(0, 16000 - out_data.shape[1]), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self.shift_audio(out_data)",
                            "Call"
                        ],
                        [
                            "out_data + 0.01 * torch.randn(out_data.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 16000 - out_data.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_157": {
                "*size": {
                    "value": "out_data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TCResNet_pytorch/utility.py": {
        "torch": {
            "is_available_7": {
                "variable": {
                    "value": "train_on_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_22": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sd.SpeechDataset(train_files, 'train', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sd.SpeechDataset(dev_files, 'dev', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sd.SpeechDataset(test_files, 'test', ap, word_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_71": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=0.1, weight_decay=0.001, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "torch.argmax(output, 1) == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_38": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_34": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_123": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_119": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_100": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ],
                        [
                            "model(audio_data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}