{
    "hloc/extractors/dir.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(image)",
                            "Call"
                        ],
                        [
                            "desc.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "common.whiten_features(desc.cpu().numpy(), pca, **self.conf['whiten_params'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(desc)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hloc/extract_features.py": {
        "torch": {
            "DataLoader_225": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageDataset(image_dir, conf['preprocessing'], image_list)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(loader, num_workers=1)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hloc/extractors/d2net.py": {
        "torch": {
            "from_numpy_51": {
                "ndarray": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints[:, [1, 0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "ndarray": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "descriptors.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hloc/extractors/dog.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "PS",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "PS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_87": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "keypoints[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(scores)",
                            "Call"
                        ],
                        [
                            "scores[indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "grid_sample_47": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_img[i:i + 1].expand(grid.size(0), ch, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_patch_grid_from_normalized_LAF(cur_img[i:i + 1], nlaf[i:i + 1, scale_mask, :, :], PS)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_96": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('device')",
                            "Call"
                        ],
                        [
                            "match[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sift_to_rootsift(descriptors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(descriptors)",
                            "Call"
                        ],
                        [
                            "torch.zeros((0, 128))",
                            "Call"
                        ],
                        [
                            "self.describe(patches).reshape(len(patches), 128)",
                            "Call"
                        ],
                        [
                            "descriptors[indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "topk_147": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(scores)",
                            "Call"
                        ],
                        [
                            "scores[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "self.conf['max_keypoints']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "ndarray": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints[:, :2] + 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * get_laf_scale(denormalize_laf(nlaf, img)) / float(PS)",
                            "BinOp"
                        ],
                        [
                            "keypoints[:, 2] * self.conf['mr_size'] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "ori",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-np.rad2deg(keypoints[:, 3])",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "hloc/extractors/netvlad.py": {
        "torch": {
            "Conv1d_23": {
                "variable": {
                    "value": "self.score_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "score_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty([input_dim, K])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_proj(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_41": {
                "variable": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores.unsqueeze(1) * diff).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(desc, dim=1)",
                            "Call"
                        ],
                        [
                            "desc.view(b, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(desc, dim=1)",
                            "Call"
                        ],
                        [
                            "self.netvlad(descriptors)",
                            "Call"
                        ],
                        [
                            "self.whiten(desc)",
                            "Call"
                        ],
                        [
                            "F.normalize(desc, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(backbone.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "score_w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "score_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat['net'].layers[30].weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(score_w).float().permute([1, 0]).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_108": {
                "variable": {
                    "value": "score_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "variable": {
                    "value": "score_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "center_w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "center_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-mat['net'].layers[30].weights[1]",
                            "UnaryOp"
                        ],
                        [
                            "torch.tensor(center_w).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.netvlad.score_proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "score_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat['net'].layers[30].weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(score_w).float().permute([1, 0]).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.netvlad.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "center_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-mat['net'].layers[30].weights[1]",
                            "UnaryOp"
                        ],
                        [
                            "torch.tensor(center_w).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_135": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_147": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(image)",
                            "Call"
                        ],
                        [
                            "descriptors.view(b, c, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(descriptors, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_39": {
                "variable": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores.unsqueeze(1) * diff).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(desc, dim=1)",
                            "Call"
                        ],
                        [
                            "desc.view(b, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(desc, dim=1)",
                            "Call"
                        ],
                        [
                            "self.netvlad(descriptors)",
                            "Call"
                        ],
                        [
                            "self.whiten(desc)",
                            "Call"
                        ],
                        [
                            "F.normalize(desc, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.whiten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.netvlad.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat_layer.weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(w).float().permute([3, 2, 0, 1])",
                            "Call"
                        ],
                        [
                            "mat['net'].layers[33].weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(w).float().squeeze().permute([1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_119": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_119": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "b.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.whiten.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat_layer.weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(w).float().permute([3, 2, 0, 1])",
                            "Call"
                        ],
                        [
                            "mat['net'].layers[33].weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(w).float().squeeze().permute([1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.whiten.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "mat_layer.weights[1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(b).float()",
                            "Call"
                        ],
                        [
                            "mat['net'].layers[33].weights[1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(b.squeeze()).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_153": {
                "variable": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores.unsqueeze(1) * diff).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(desc, dim=1)",
                            "Call"
                        ],
                        [
                            "desc.view(b, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(desc, dim=1)",
                            "Call"
                        ],
                        [
                            "self.netvlad(descriptors)",
                            "Call"
                        ],
                        [
                            "self.whiten(desc)",
                            "Call"
                        ],
                        [
                            "F.normalize(desc, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_25": {
                "*size": {
                    "value": "[input_dim, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat_layer.weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(w).float().permute([3, 2, 0, 1])",
                            "Call"
                        ],
                        [
                            "mat['net'].layers[33].weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(w).float().squeeze().permute([1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_95": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[3, 2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "mat_layer.weights[1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(b).float()",
                            "Call"
                        ],
                        [
                            "mat['net'].layers[33].weights[1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(b.squeeze()).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat_layer.weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(w).float().permute([3, 2, 0, 1])",
                            "Call"
                        ],
                        [
                            "mat['net'].layers[33].weights[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(w).float().squeeze().permute([1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "layer.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "mat_layer.weights[1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(b).float()",
                            "Call"
                        ],
                        [
                            "mat['net'].layers[33].weights[1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(b.squeeze()).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hloc/extractors/openibl.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "yxgeee/OpenIBL",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "conf['model_name']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "hloc/extractors/superpoint.py": {
        "torch": {
            "grid_sample_22": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(descriptors, keypoints.view(b, 1, -1, 2), mode='bilinear', **args)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(descriptors.reshape(b, c, -1), p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.grid_sample(descriptors, keypoints.view(b, 1, -1, 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(descriptors.reshape(b, c, -1), p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "keypoints.view(b, 1, -1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_24": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descriptors.reshape(b, c, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_39": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(descriptors, keypoints.view(b, 1, -1, 2), mode='bilinear', **args)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(descriptors.reshape(b, c, -1), p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.grid_sample(descriptors, keypoints.view(b, 1, -1, 2), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(descriptors.reshape(b, c, -1), p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "keypoints.view(b, 1, -1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_42": {
                "variable": {
                    "value": "descriptors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descriptors.reshape(b, c, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[w * s - s / 2 - 0.5, h * s - s / 2 - 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "hloc/localize_inloc.py": {
        "torch": {
            "where_30": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(interp_lin)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "interp_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(scan, kp, align_corners=True, mode='nearest')[0, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "interp_lin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_sample(scan, kp, align_corners=True, mode='bilinear')[0, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_20": {
                "ndarray": {
                    "value": "scan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(scan).permute(2, 0, 1)[None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_20": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "kp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kp / np.array([[w - 1, h - 1]]) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(kp)[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "grid_sample_28": {
                "input": {
                    "value": "scan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(scan).permute(2, 0, 1)[None]",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "kp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kp / np.array([[w - 1, h - 1]]) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(kp)[None, None]",
                            "Subscript"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_30": {
                "input": {
                    "value": "interp_lin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_sample(scan, kp, align_corners=True, mode='bilinear')[0, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_31": {
                "input": {
                    "value": "torch.isnan(interp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_31": {
                "input": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(interp_lin), interp_nn, interp_lin)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hloc/match_features.py": {
        "torch": {
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_157": {
                "variable": {
                    "value": "data[image0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,) + tuple(grp['image_size'])[::-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_162": {
                "variable": {
                    "value": "data[image1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,) + tuple(grp['image_size'])[::-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "data[k + 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v.__array__()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "data[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v.__array__()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "hloc/matchers/nearest_neighbor.py": {
        "torch": {
            "ones_9": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ind_nn.shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sim.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_14": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(ind_nn.shape[:-1], dtype=torch.bool, device=sim.device)",
                            "Call"
                        ],
                        [
                            "mask & (dist_nn[..., 0] <= ratio_thresh ** 2 * dist_nn[..., 1])",
                            "BinOp"
                        ],
                        [
                            "mask & (dist_nn[..., 0] <= distance_thresh ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "ind_nn[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "ind_nn.new_tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_15": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(ind_nn.shape[:-1], dtype=torch.bool, device=sim.device)",
                            "Call"
                        ],
                        [
                            "mask & (dist_nn[..., 0] <= ratio_thresh ** 2 * dist_nn[..., 1])",
                            "BinOp"
                        ],
                        [
                            "mask & (dist_nn[..., 0] <= distance_thresh ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "(sim_nn[..., 0] + 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "sim_nn.new_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_20": {
                "variable": {
                    "value": "inds0",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "m0.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "m0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_21": {
                "variable": {
                    "value": "loop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.where(m0 > -1, m0, m0.new_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_23": {
                "variable": {
                    "value": "m0_new",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(m0 > -1) & (inds0 == loop)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "m0.new_tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_50": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bdn,bdm->bnm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "data['descriptors0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_21": {
                "condition": {
                    "value": "m0 > -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "m0",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "m0.new_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_40": {
                "variable": {
                    "value": "matches0",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "data['descriptors0'].shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "data['descriptors0'].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_45": {
                "input": {
                    "value": "matches0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(data['descriptors0'].shape[:2], -1, device=data['descriptors0'].device)",
                            "Call"
                        ],
                        [
                            "mutual_check(matches0, matches1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hloc/pairs_from_retrieval.py": {
        "torch": {
            "from_numpy_52": {
                "variable": {
                    "value": "invalid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "invalid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(invalid).to(scores.device)",
                            "Call"
                        ],
                        [
                            "invalid | (scores < min_score)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_57": {
                "variable": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(scores)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "num_select",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_95": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "id,jd->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query_desc.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "ndarray": {
                    "value": "np.stack(desc, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hloc/pipelines/7Scenes/create_gt_sfm.py": {
        "torch": {
            "where_35": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(interp_lin)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "interp_nn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.grid_sample(depth, kp, align_corners=True, mode='nearest')[0, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "interp_lin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_sample(depth, kp, align_corners=True, mode='bilinear')[0, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(depth)[None, None]",
                            "Subscript"
                        ],
                        [
                            "PIL.Image.open(Path(depth_folder_path) / depth_name)",
                            "Call"
                        ],
                        [
                            "np.array(depth).astype('float64')",
                            "Call"
                        ],
                        [
                            "depth / 1000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "kp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kp / np.array([[w - 1, h - 1]]) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(kp)[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "grid_sample_33": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(depth)[None, None]",
                            "Subscript"
                        ],
                        [
                            "PIL.Image.open(Path(depth_folder_path) / depth_name)",
                            "Call"
                        ],
                        [
                            "np.array(depth).astype('float64')",
                            "Call"
                        ],
                        [
                            "depth / 1000.0",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "kp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kp / np.array([[w - 1, h - 1]]) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(kp)[None, None]",
                            "Subscript"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_35": {
                "input": {
                    "value": "interp_lin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_sample(depth, kp, align_corners=True, mode='bilinear')[0, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_36": {
                "input": {
                    "value": "torch.isnan(interp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_36": {
                "input": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(interp_lin), interp_nn, interp_lin)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hloc/utils/base_model.py": {
        "torch": {}
    },
    "hloc/utils/tools.py": {
        "torch": {}
    }
}