{
    "examples/time_series_classification.py": {
        "sklearn": {
            "LabelEncoder_91": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_244": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GridSearchCV_111": {
                "variable": {
                    "value": "svc_model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TimeSeriesSVC(kernel=ker, decision_function_shape='ovo')",
                            "Call"
                        ],
                        [
                            "SVC(kernel='precomputed', decision_function_shape='ovo')",
                            "Call"
                        ],
                        [
                            "SVC(kernel=ker_, decision_function_shape='ovo')",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "svc_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': np.logspace(0, 4, 5), 'gamma': list(np.logspace(-4, 4, 9)) + ['auto']}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SVC_196": {
                "variable": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "decision_function_shape": {
                    "value": "ovo",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GridSearchCV_197": {
                "variable": {
                    "value": "svc_model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TimeSeriesSVC(kernel=ker, decision_function_shape='ovo')",
                            "Call"
                        ],
                        [
                            "SVC(kernel='precomputed', decision_function_shape='ovo')",
                            "Call"
                        ],
                        [
                            "SVC(kernel=ker_, decision_function_shape='ovo')",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "svc_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': np.logspace(0, 4, 5), 'gamma': list(np.logspace(-4, 4, 9)) + ['auto']}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SVC_155": {
                "variable": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "ker_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['linear', 'rbf']",
                            "List"
                        ]
                    ]
                },
                "decision_function_shape": {
                    "value": "ovo",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GridSearchCV_156": {
                "variable": {
                    "value": "svc_model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TimeSeriesSVC(kernel=ker, decision_function_shape='ovo')",
                            "Call"
                        ],
                        [
                            "SVC(kernel='precomputed', decision_function_shape='ovo')",
                            "Call"
                        ],
                        [
                            "SVC(kernel=ker_, decision_function_shape='ovo')",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "svc_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': np.logspace(0, 4, 5), 'gamma': list(np.logspace(-4, 4, 9)) + ['auto']}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_179": {
                "variable": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train / x_train.max()",
                            "BinOp"
                        ],
                        [
                            "sigkernel.transform(x_train, at=at, ll=ll, scale=0.1)",
                            "Call"
                        ],
                        [
                            "x_train[:, ::subsample, :]",
                            "Subscript"
                        ],
                        [
                            "sigkernel.transform(x_train, at=at, ll=ll, scale=0.1)[:, ::subsample, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x_train, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_train, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ]
                    ]
                }
            },
            "device_172": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "empty_cache_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_307": {
                "variable": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train / x_train.max()",
                            "BinOp"
                        ],
                        [
                            "sigkernel.transform(x_train, at=at, ll=ll, scale=0.1)",
                            "Call"
                        ],
                        [
                            "x_train[:, ::subsample, :]",
                            "Subscript"
                        ],
                        [
                            "sigkernel.transform(x_train, at=at, ll=ll, scale=0.1)[:, ::subsample, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x_train, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_train, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ]
                    ]
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_test / x_test.max()",
                            "BinOp"
                        ],
                        [
                            "sigkernel.transform(x_test, at=at, ll=ll, scale=0.1)[:, ::subsample, :]",
                            "Subscript"
                        ],
                        [
                            "sigkernel.transform(x_test, at=at, ll=ll, scale=scale * 0.1)[:, ::subsample, :]",
                            "Subscript"
                        ],
                        [
                            "sigkernel.transform(x_test, at=at, ll=ll, scale=0.1)[:, ::subsample, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x_test, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ]
                    ]
                }
            },
            "device_300": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "empty_cache_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sigkernel/transformers.py": {
        "sklearn": {
            "as_float_array_53": {
                "X": {
                    "value": "x[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_float_array_97": {
                "X": {
                    "value": "interval",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sigkernel/cuda_backend.py": {
        "torch": {}
    },
    "sigkernel/sigkernel.py": {
        "torch": {
            "tensor_567": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c_alpha(m, confidence_level)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y_pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_594": {
                "variable": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(A, MM + 1, NN + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_648": {
                "variable": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(A, B, MM + 1, NN + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "Ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_69": {
                "variable": {
                    "value": "Ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "k_Xy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flip_312": {
                "variable": {
                    "value": "X_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_313": {
                "variable": {
                    "value": "Y_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_364": {
                "variable": {
                    "value": "grad_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KK[:, :, :, None] * Diff_1 / h",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_1, axis=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_1.reshape(A, M - 1, 2 ** dyadic_order, D), axis=2)",
                            "Call"
                        ],
                        [
                            "GG[:, :, :, :, None] * Diff_1 / h",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_1, axis=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_1.reshape(A, B, M - 1, 2 ** dyadic_order, D), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_365": {
                "variable": {
                    "value": "grad_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_1.reshape(A, M - 1, 2 ** dyadic_order, D)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_366": {
                "variable": {
                    "value": "grad_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KK[:, :, :, None] * Diff_2 / h",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_2, axis=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_2.reshape(A, M - 1, 2 ** dyadic_order, D), axis=2)",
                            "Call"
                        ],
                        [
                            "GG[:, :, :, :, None] * Diff_2 / h",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_2, axis=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_2.reshape(A, B, M - 1, 2 ** dyadic_order, D), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_367": {
                "variable": {
                    "value": "grad_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_2.reshape(A, M - 1, 2 ** dyadic_order, D)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "grad_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros((A, 1, D), dtype=X.dtype, device=X.device), grad_1[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "grad_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(grad_2[:, 0, :] - grad_1[:, 0, :])[:, None, :], grad_incr, grad_1[:, -1, :][:, None, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_456": {
                "variable": {
                    "value": "X_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_457": {
                "variable": {
                    "value": "Y_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_509": {
                "variable": {
                    "value": "grad_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KK[:, :, :, None] * Diff_1 / h",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_1, axis=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_1.reshape(A, M - 1, 2 ** dyadic_order, D), axis=2)",
                            "Call"
                        ],
                        [
                            "GG[:, :, :, :, None] * Diff_1 / h",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_1, axis=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_1.reshape(A, B, M - 1, 2 ** dyadic_order, D), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_510": {
                "variable": {
                    "value": "grad_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_1.reshape(A, B, M - 1, 2 ** dyadic_order, D)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_511": {
                "variable": {
                    "value": "grad_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KK[:, :, :, None] * Diff_2 / h",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_2, axis=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_2.reshape(A, M - 1, 2 ** dyadic_order, D), axis=2)",
                            "Call"
                        ],
                        [
                            "GG[:, :, :, :, None] * Diff_2 / h",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_2, axis=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_2.reshape(A, B, M - 1, 2 ** dyadic_order, D), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_512": {
                "variable": {
                    "value": "grad_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_2.reshape(A, B, M - 1, 2 ** dyadic_order, D)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "grad_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros((A, B, 1, D), dtype=X.dtype, device=X.device), grad_1[:, :, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "grad_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(grad_2[:, :, 0, :] - grad_1[:, :, 0, :])[:, :, None, :], grad_incr, grad_1[:, :, -1, :][:, :, None, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_545": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.dim() + dim if dim < 0 else dim",
                            "IfExp"
                        ]
                    ]
                },
                "index": {
                    "value": "order_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).to(a.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_23": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_32": {
                "equation": {
                    "value": "ipk,jqk->ijpq",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "-dist / self.sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_72": {
                "input": {
                    "value": "-dist / self.sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(A, MM + 2, NN + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "K_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(A, MM + 2, NN + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(K, dtype=G_static.dtype, device=G_static.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((A, MM + 2, NN + 2), device=G_static.device, dtype=G_static.dtype)",
                            "Call"
                        ],
                        [
                            "K[:, :-1, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(sig_kernel_batch_varpar(G_static_.detach().numpy(), _naive_solver), dtype=G_static.dtype, device=G_static.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((A, MM + 2, NN + 2), device=G_static.device, dtype=G_static.dtype)",
                            "Call"
                        ],
                        [
                            "K[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "K_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "K_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(K_diff, dtype=G_static.dtype, device=G_static.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((A, MM + 2, NN + 2), device=G_static.device, dtype=G_static.dtype)",
                            "Call"
                        ],
                        [
                            "K_diff[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_222": {
                "input": {
                    "value": "k_Xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_Gram(X, y, sym=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(A, MM + 2, NN + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sig_kernel_batch_varpar(G_static_.detach().numpy(), _naive_solver)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "K_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(A, MM + 2, NN + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static_rev.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static_rev.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "variable": {
                    "value": "K_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sig_kernel_batch_varpar(G_static_rev.detach().numpy(), _naive_solver)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_410": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(A, B, MM + 2, NN + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_423": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sig_kernel_Gram_varpar(G_static_.detach().numpy(), sym, _naive_solver)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_466": {
                "variable": {
                    "value": "G_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(A, B, MM + 2, NN + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_484": {
                "variable": {
                    "value": "G_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sig_kernel_Gram_varpar(G_static_rev.detach().numpy(), sym, _naive_solver)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G_static.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "G_static.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_53": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "input": {
                    "value": "Ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(Y ** 2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(Y ** 2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(A, 1, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_70": {
                "equation": {
                    "value": "ipk,jqk->ijpq",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "input": {
                    "value": "Ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(Y ** 2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(Y ** 2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, B, 1, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_201": {
                "input": {
                    "value": "k_Xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_Gram(X, y, sym=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_186": {
                "input": {
                    "value": "k_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_kernel(X, Y)",
                            "Call"
                        ],
                        [
                            "SigKernel_naive(X, Y, self.static_kernel, self.dyadic_order, self._naive_solver)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_238": {
                "input": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((A, MM + 1, NN + 1), dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((A, B, MM + 1, NN + 1), dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "self.compute_Gram(X, Y, sym=False)",
                            "Call"
                        ],
                        [
                            "SigKernelGramMat_naive(X, Y, self.static_kernel, self.dyadic_order, self._naive_solver)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_370": {
                "*size": {
                    "value": "(A, 1, D)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_515": {
                "*size": {
                    "value": "(A, B, 1, D)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_635": {
                "input": {
                    "value": "k_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_kernel(X, Y)",
                            "Call"
                        ],
                        [
                            "SigKernel_naive(X, Y, self.static_kernel, self.dyadic_order, self._naive_solver)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_689": {
                "input": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((A, MM + 1, NN + 1), dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((A, B, MM + 1, NN + 1), dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "self.compute_Gram(X, Y, sym=False)",
                            "Call"
                        ],
                        [
                            "SigKernelGramMat_naive(X, Y, self.static_kernel, self.dyadic_order, self._naive_solver)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_347": {
                "n": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_492": {
                "n": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X.shape[2]",
                            "Subscript"
                        ],
                        [
                            "X.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_536": {
                "start": {
                    "value": "x.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}