{
    "principal_directions/find_principal_directions.py": {
        "sklearn": {}
    },
    "data/dataset_preparation/prepare_celeba_hq_tfrecords.py": {
        "tensorflow": {
            "TFRecordOptions_68": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_71": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path % (lod, i)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_78": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=img.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_78": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=img.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_79": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=img.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_80": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_81": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[img.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_79": {
                "value": {
                    "value": "img.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_80": {
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_81": {
                "value": {
                    "value": "[img.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_preparation/prepare_celeba_tfrecords.py": {
        "tensorflow": {
            "TFRecordOptions_167": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_174": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATASET.PATH % (cfg.DATASET.MAX_RESOLUTION_LEVEL, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH_TEST % (cfg.DATASET.MAX_RESOLUTION_LEVEL, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH % (cfg.DATASET.MAX_RESOLUTION_LEVEL - j - 1, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH_TEST % (cfg.DATASET.MAX_RESOLUTION_LEVEL - j - 1, i)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_179": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_204": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATASET.PATH % (cfg.DATASET.MAX_RESOLUTION_LEVEL, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH_TEST % (cfg.DATASET.MAX_RESOLUTION_LEVEL, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH % (cfg.DATASET.MAX_RESOLUTION_LEVEL - j - 1, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH_TEST % (cfg.DATASET.MAX_RESOLUTION_LEVEL - j - 1, i)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_206": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_179": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_206": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_180": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=image.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_181": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_182": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[image.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_207": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=image.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_208": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_209": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[image.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_180": {
                "value": {
                    "value": "image.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_181": {
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_182": {
                "value": {
                    "value": "[image.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_207": {
                "value": {
                    "value": "image.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_208": {
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_209": {
                "value": {
                    "value": "[image.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_preparation/prepare_imagenet.py": {
        "tensorflow": {
            "TFRecordOptions_44": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_47": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path % (lod, i)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_67": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=img.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[wnid_to_indx[s]])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_67": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=img.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[wnid_to_indx[s]])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_68": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=img.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_69": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[wnid_to_indx[s]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_70": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[img.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_68": {
                "value": {
                    "value": "img.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_69": {
                "value": {
                    "value": "[wnid_to_indx[s]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_70": {
                "value": {
                    "value": "[img.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "save_127": {
                "obj": {
                    "value": "(wnid_to_classes, val_wnids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('', 'meta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.asarray(img, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_74": {
                "variable": {
                    "value": "image_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_folds[i]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(np.asarray(img, dtype=np.float32)).view(1, 3, img.shape[1], img.shape[2])",
                            "Call"
                        ],
                        [
                            "names",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_preparation/prepare_mnist_tfrecords.py": {
        "tensorflow": {
            "TFRecordOptions_72": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_74": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path % (2 + 3, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH % (5 - j - 1, i)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_77": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_99": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path % (2 + 3, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH % (5 - j - 1, i)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_101": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_77": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_101": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_78": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=image.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_79": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_80": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[image.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_78": {
                "value": {
                    "value": "image.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_79": {
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_80": {
                "value": {
                    "value": "[image.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Feature_102": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=image.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_103": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_104": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[image.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_102": {
                "value": {
                    "value": "image.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_103": {
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_104": {
                "value": {
                    "value": "[image.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_preparation/prepare_svhn_tfrecords.py": {
        "tensorflow": {
            "TFRecordOptions_65": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_67": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path % (2 + 3, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH % (5 - j - 1, i)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_70": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_92": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path % (2 + 3, i)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH % (5 - j - 1, i)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_94": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_70": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_94": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_71": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=image.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_72": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_73": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[image.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_71": {
                "value": {
                    "value": "image.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_72": {
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_73": {
                "value": {
                    "value": "[image.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Feature_95": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=image.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_96": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_97": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[image.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_95": {
                "value": {
                    "value": "image.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_96": {
                "value": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_97": {
                "value": {
                    "value": "[image.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_preparation/split_tfrecords_bedroom.py": {
        "tensorflow": {
            "TFRecordDataset_69": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_path % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_76": {
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATASET.PATH % (i, part_num)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "data/dataset_preparation/split_tfrecords_ffhq.py": {
        "tensorflow": {
            "TFRecordDataset_38": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_path % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_48": {
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATASET.PATH % (i, part_num)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH_TEST % (i, part_num - cfg.DATASET.PART_COUNT)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TFRecordWriter_54": {
                "path": {
                    "value": "part_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATASET.PATH % (i, part_num)",
                            "BinOp"
                        ],
                        [
                            "cfg.DATASET.PATH_TEST % (i, part_num - cfg.DATASET.PART_COUNT)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "principal_directions/extract_attributes.py": {
        "tensorflow": {
            "Example_32": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordDataset_52": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "principal_directions/generated_data.000",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "principal_directions/generate_images.py": {
        "tensorflow": {
            "TFRecordOptions_38": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_39": {
                "variable": {
                    "value": "tfr_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "principal_directions/generated_data.000",
                    "type": "str",
                    "possible_values": []
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_58": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=img.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.tostring()])), 'lat': tf.train.Feature(bytes_list=tf.train.BytesList(value=[lat[i].cpu().numpy().tostring()])), 'dlat': tf.train.Feature(bytes_list=tf.train.BytesList(value=[dlat[i, 0].cpu().numpy().tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_58": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=img.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.tostring()])), 'lat': tf.train.Feature(bytes_list=tf.train.BytesList(value=[lat[i].cpu().numpy().tostring()])), 'dlat': tf.train.Feature(bytes_list=tf.train.BytesList(value=[dlat[i, 0].cpu().numpy().tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_59": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=img.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_60": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[img.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_61": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[lat[i].cpu().numpy().tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_62": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[dlat[i, 0].cpu().numpy().tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_59": {
                "value": {
                    "value": "img.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BytesList_60": {
                "value": {
                    "value": "[img.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_61": {
                "value": {
                    "value": "[lat[i].cpu().numpy().tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_62": {
                "value": {
                    "value": "[dlat[i, 0].cpu().numpy().tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "checkpts/checkpointer.py": {
        "torch": {
            "load_86": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_checkpoint.read().strip()",
                            "Call"
                        ],
                        [
                            "file_name",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_64": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.cfg.OUTPUT_DIR, '%s.pth' % _name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.cfg.OUTPUT_DIR, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.cfg.OUTPUT_DIR, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_86": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "custom_adam.py": {
        "torch": {
            "zeros_like_68": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataloader.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_113": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_136": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_237": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_274": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ],
                        [
                            "np.array([img[flip] for (img, flip) in zip(x, flips)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, requires_grad=True, device=torch.device(self.device), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.stack(images)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_126": {
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_146": {
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_263": {
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_300": {
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset.py": {
        "torch": {
            "load_179": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f\"{self.root}/{video_folder}/{random_slice_folder}/{random_frame_file.replace('.PNG', '.pt')}\"",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Tensor_189": {
                "variable": {
                    "value": "inputs[keypoints]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_205": {
                "tensors": {
                    "value": "[item['image'] for item in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_206": {
                "tensors": {
                    "value": "[item['keypoints'] for item in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_207": {
                "tensors": {
                    "value": "[item['ci'] for item in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_171": {
                "tensors": {
                    "value": "[self.transform_ci(image=frame)['image'] for frame in ci]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "interactive_alae_demo.py": {
        "torch": {}
    },
    "launcher.py": {
        "torch": {
            "current_device_86": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_40": {
                "device": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank",
                            "Method Argument"
                        ],
                        [
                            "rank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_85": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_device_name_87": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lod_driver.py": {
        "torch": {}
    },
    "logger.py": {
        "torch": {
            "save_20": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{self.log_dir}/checkpoint_{iteration}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "sum_45": {
                "variable": {
                    "value": "r1_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_grads.pow(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_28": {
                "input": {
                    "value": "(recon_x - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_37": {
                "variable": {
                    "value": "r1_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_grads.pow(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_51": {
                "input": {
                    "value": "-d_result_fake",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_24": {
                "input": {
                    "value": "1 + log_var - mu.pow(2) - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_32": {
                "input": {
                    "value": "-d_result_real",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_44": {
                "outputs": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_result_real.sum()",
                            "Call"
                        ],
                        [
                            "d_result_real.sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_36": {
                "outputs": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_result_real.sum()",
                            "Call"
                        ],
                        [
                            "d_result_real.sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "L1Loss_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lreq.py": {
        "torch": {
            "Parameter_57": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_87": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_89": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_144": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_160": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv_transpose2d_150": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w * self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_154": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_166": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w * self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "bias * self.lrmul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_169": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1), mode='constant')",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "make_figures/make_recon_figure_celeba_pioneer.py": {
        "torch": {}
    },
    "make_figures/make_recon_figure_ffhq_real.py": {
        "torch": {}
    },
    "make_figures/make_recon_figure_interpolation.py": {
        "torch": {}
    },
    "make_figures/make_recon_figure_multires.py": {
        "torch": {}
    },
    "make_figures/make_recon_figure_paged.py": {
        "torch": {}
    },
    "make_figures/make_traversarls.py": {
        "torch": {}
    },
    "make_figures/old/make_recon_figure_bed.py": {
        "torch": {}
    },
    "make_figures/old/make_recon_figure_celeba.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "zeros_28": {
                "variable": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_count",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dlatent_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dlatent_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_205": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer_idx.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_206": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "layer_idx < self.truncation_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.truncation_psi * ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_idx.shape, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_idx.shape, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "lerp_207": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dlatent_avg.buff.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mapping_fl(z)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "s.repeat(1, self.mapping_fl.num_layers, 1)",
                            "Call"
                        ],
                        [
                            "torch.where(layer_idx < mixing_cutoff, styles, styles2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(self.dlatent_avg.buff.data, styles, coefs)",
                            "Call"
                        ],
                        [
                            "self.mapping_fl(z)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "s.repeat(1, self.mapping_fl.num_layers, 1)",
                            "Call"
                        ],
                        [
                            "torch.lerp(self.dlatent_avg.buff.data, styles, coefs)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(layer_idx < self.truncation_cutoff, self.truncation_psi * ones, ones)",
                            "Call"
                        ],
                        [
                            "torch.where(layer_idx < self.truncation_cutoff, self.truncation_psi * ones, ones)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_77": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_101": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "layer_idx.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_102": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "layer_idx < self.truncation_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.truncation_psi * ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(layer_idx.shape, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(layer_idx.shape, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "lerp_103": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dlatent_avg.buff.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mapping_fl(z)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "s.repeat(1, self.mapping_fl.num_layers, 1)",
                            "Call"
                        ],
                        [
                            "torch.where(layer_idx < mixing_cutoff, styles, styles2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(self.dlatent_avg.buff.data, styles, coefs)",
                            "Call"
                        ],
                        [
                            "self.mapping_fl(z)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "s.repeat(1, self.mapping_fl.num_layers, 1)",
                            "Call"
                        ],
                        [
                            "torch.lerp(self.dlatent_avg.buff.data, styles, coefs)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(layer_idx < self.truncation_cutoff, self.truncation_psi * ones, ones)",
                            "Call"
                        ],
                        [
                            "torch.where(layer_idx < self.truncation_cutoff, self.truncation_psi * ones, ones)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_120": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_90": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_97": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "layer_idx < mixing_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mapping_fl(z)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "s.repeat(1, self.mapping_fl.num_layers, 1)",
                            "Call"
                        ],
                        [
                            "torch.where(layer_idx < mixing_cutoff, styles, styles2)",
                            "Call"
                        ],
                        [
                            "torch.lerp(self.dlatent_avg.buff.data, styles, coefs)",
                            "Call"
                        ],
                        [
                            "self.mapping_fl(z)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "s.repeat(1, self.mapping_fl.num_layers, 1)",
                            "Call"
                        ],
                        [
                            "torch.lerp(self.dlatent_avg.buff.data, styles, coefs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "styles2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mapping_fl(z2)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "styles2.view(styles2.shape[0], 1, styles2.shape[1]).repeat(1, self.mapping_fl.num_layers, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_128": {
                "variable": {
                    "value": "Lae",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Z[:, 0] - z) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "Lae",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Z - s.detach()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_204": {
                "start": {
                    "value": "self.mapping_fl.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_100": {
                "start": {
                    "value": "self.mapping_fl.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_148": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_94": {
                "start": {
                    "value": "self.mapping_fl.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules.py": {
        "torch": {
            "reshape_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "addcmul_37": {
                "input": {
                    "value": "style[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "style[:, 0] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.bias_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, inputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_72": {
                "variable": {
                    "value": "self.instance_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "startf",
                            "variable"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "startf",
                            "variable"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "startf",
                            "variable"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "startf",
                            "variable"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "startf",
                            "variable"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "latent_size",
                            "variable"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "latent_size",
                            "variable"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "latent_size",
                            "variable"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "dlatent_size",
                            "variable"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.bias_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_85": {
                "variable": {
                    "value": "self.instance_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "2 * dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "latent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_100": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_101": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((x - m) ** 2, dim=[2, 3], keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "style_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_136": {
                "variable": {
                    "value": "self.bias_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, inputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_149": {
                "variable": {
                    "value": "self.bias_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_188": {
                "variable": {
                    "value": "self.noise_weight_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_190": {
                "variable": {
                    "value": "self.bias_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_191": {
                "variable": {
                    "value": "self.instance_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "2 * dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "latent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "self.noise_weight_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_197": {
                "variable": {
                    "value": "self.bias_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, outputs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_198": {
                "variable": {
                    "value": "self.instance_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "min(self.maxf, startf * mul)",
                            "Call"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "2 * dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "dlatent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "latent_size if i == mapping_layers - 1 else mapping_fmaps",
                            "IfExp"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_226": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_262": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_313": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_316": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_329": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_334": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_337": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_339": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_403": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_406": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_416": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_424": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_427": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_429": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_491": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_494": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_504": {
                "variable": {
                    "value": "styles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_507": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_512": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_515": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_517": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_552": {
                "variable": {
                    "value": "self.from_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_581": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_591": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_594": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_597": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_599": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_620": {
                "variable": {
                    "value": "self.from_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_649": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_659": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_662": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_665": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_667": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_695": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, inputs, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_703": {
                "variable": {
                    "value": "to_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_751": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "needed_resolution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_to_resolution[lod]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "lerp_752": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_orig, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - (lod - 1) - 1](x_prev)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x_prev, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_prev, size=needed_resolution)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ],
                        [
                            "blend",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_798": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, 512, 4, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_829": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, 64, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_861": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_972": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_976": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_978": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_980": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_1010": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_1012": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_1016": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "2 ** (2 + lod)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_31": {
                "input": {
                    "value": "torch.mean(x.pow(2.0), dim=1, keepdim=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_120": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_121": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((x - m) ** 2, dim=[2, 3], keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "style_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_557": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_705": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_894": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_915": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_940": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_101": {
                "input": {
                    "value": "(x - m) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "addcmul_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_1.to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_219": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_1.to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_236": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_2.to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_239": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, factor, 1, factor)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x) + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.dense(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(self.blur(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_1.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_1",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_1(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_1(s1))",
                            "Call"
                        ],
                        [
                            "self.conv_2(x)",
                            "Call"
                        ],
                        [
                            "x + s * torch.exp(-x * x / (2.0 * s * s)) / math.sqrt(2 * math.pi) * 0.8",
                            "BinOp"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([1, 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.addcmul(x, value=1.0, tensor1=self.noise_weight_2.to(x.device), tensor2=torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device))",
                            "Call"
                        ],
                        [
                            "x + self.bias_2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.instance_norm_2(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, self.style_2(s2))",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.encode_block[self.layer_count - lod - 1](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.encode_block[i](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "self.decode_block[i](x, styles[:, 2 * i + 0], styles[:, 2 * i + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.decode_block[lod](x, styles[:, 2 * lod + 0], styles[:, 2 * lod + 1], noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[lod](x)",
                            "Call"
                        ],
                        [
                            "torch.lerp(x_prev, x, blend)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.fc(x), 0.2)",
                            "Call"
                        ],
                        [
                            "pixel_norm(z)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'block_%d' % (i + 1))(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.map_blocks[i](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 28)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.fc_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc_3(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, 2 ** (2 + lod))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "self.noise_weight_2.to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "torch.randn([x.shape[0], 1, x.shape[2], x.shape[3]]).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_695": {},
            "ConvTranspose2d_800": {
                "in_channels": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_801": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_802": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_804": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_805": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_806": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_808": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_809": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_810": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_812": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_817": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_834": {
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_835": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_836": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_838": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_839": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_840": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_842": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_843": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_844": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_846": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_847": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_31": {
                "input": {
                    "value": "x.pow(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_121": {
                "input": {
                    "value": "(x - m) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_217": {
                "*size": {
                    "value": "[1, 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_220": {
                "*size": {
                    "value": "[x.shape[0], 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_237": {
                "*size": {
                    "value": "[1, 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_240": {
                "*size": {
                    "value": "[x.shape[0], 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_223": {
                "input": {
                    "value": "-x * x / (2.0 * s * s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_243": {
                "input": {
                    "value": "-x * x / (2.0 * s * s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rotation.py": {
        "torch": {
            "Linear_45": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.latent_dim + self.landmarks_dim",
                            "BinOp"
                        ],
                        [
                            "self.latent_dim + self.landmarks_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[torch.nn.Sequential(*[torch.nn.Linear(self.latent_dim, self.latent_dim), torch.nn.BatchNorm1d(self.latent_dim), torch.nn.ReLU()]) for _ in range(self.num_layers)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "z_and_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, c.reshape(B, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.latent_dim + self.landmarks_dim",
                            "BinOp"
                        ],
                        [
                            "self.latent_dim + self.landmarks_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[torch.nn.Sequential(*[torch.nn.Linear(self.latent_dim, self.latent_dim), torch.nn.BatchNorm1d(self.latent_dim), torch.nn.ReLU()]) for _ in range(self.num_layers)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "z_and_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, c.reshape(B, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_161": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_179": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.face_alignment(image) for image in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.encode(ci_) for ci_ in ci]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_196": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_155": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*[torch.nn.Linear(self.latent_dim, self.latent_dim), torch.nn.BatchNorm1d(self.latent_dim), torch.nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "*[torch.nn.Linear(self.latent_dim, self.latent_dim), torch.nn.BatchNorm1d(self.latent_dim), torch.nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_49": {
                "num_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "num_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scheduler.py": {
        "torch": {}
    },
    "style_mixing/stylemix.py": {
        "torch": {}
    },
    "tracker.py": {
        "torch": {
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_alae.py": {
        "torch": {}
    },
    "train_alae_separate.py": {
        "torch": {}
    },
    "train_talking_heads.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SingleFaceDataset(root=args.data_dir, center_identity_size=cfg.TRAIN.CENTER_IDENTITY_SIZE, center_identity_step=cfg.TRAIN.CENTER_IDENTITY_STEP, transform=transform, transform_ci=transform_ci, size=cfg.TRAIN.ROTATION_BATCH_SIZE * 100)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.TRAIN.ROTATION_BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "batch_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BatchCollate()",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_40": {
                "f": {
                    "value": "args.finetune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "params": {
                    "value": "model.rotation.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "params": {
                    "value": "model.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "save_62": {
                "obj": {
                    "value": "x.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "x.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}