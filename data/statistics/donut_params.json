{
    "donut/model.py": {
        "tensorflow": {
            "softplus_19": {
                "features": {
                    "value": "tf.layers.dense(inputs, units, name=name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "hidden",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_144": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_145": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1 - y, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vi.training.sgvb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_19": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_141": {
                "name": {
                    "value": "Donut.training_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_194": {
                "name": {
                    "value": "Donut.get_score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_213": {
                "variable": {
                    "value": "assert_shape_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(r_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.stack([n_z, tf.shape(x)[0], self.x_dims])",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "Unexpected shape of reconstruction prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "input_tensor": {
                    "value": "alpha * x_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_219": {
                "variable": {
                    "value": "r_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "r_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_net['x'].log_prob(group_ndims=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(r_prob, axis=0)",
                            "Call"
                        ],
                        [
                            "r_prob[:, -1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_214": {
                "input": {
                    "value": "r_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_net['x'].log_prob(group_ndims=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(r_prob, axis=0)",
                            "Call"
                        ],
                        [
                            "r_prob[:, -1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_215": {
                "values": {
                    "value": "[n_z, tf.shape(x)[0], self.x_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_218": {
                "control_inputs": {
                    "value": "[assert_shape_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "shape": {
                    "value": "[z_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_69": {
                "shape": {
                    "value": "[z_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_215": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "donut/prediction.py": {
        "tensorflow": {
            "placeholder_52": {
                "variable": {
                    "value": "self._input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.x_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self._input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.x_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_113": {
                "name": {
                    "value": "DonutPredictor.get_score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "score_without_y",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "donut/reconstruction.py": {
        "tensorflow": {
            "convert_to_tensor_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_29": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "mask * tf.ones_like(x, dtype=mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_101": {
                "variable": {
                    "value": "(x_r, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda x_i, i: i < iter_count",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "lambda x_i, i: (masked_reconstruct(reconstruct, x_i, mask), i + 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[x, tf.constant(0, dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "back_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "masked_reconstruct",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_34": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape_x": {
                    "value": "x.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "mask.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_68": {
                "condition": {
                    "value": "tf.cast(mask, dtype=tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "r_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstruct(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_95": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "iterative_masked_reconstruct",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_39": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_53": {
                "variable": {
                    "value": "assert_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.rank(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.rank(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "Shape of `mask` cannot broadcast into the shape of `x`",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_68": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "mask * tf.ones_like(x, dtype=mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_62": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "mask * tf.ones_like(x, dtype=mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_104": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rank_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_57": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "mask * tf.ones_like(x, dtype=mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_61": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "donut/training.py": {
        "tensorflow": {
            "get_variable_110": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "self._input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.x_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "self._input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.x_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "self._learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variables_initializer_174": {
                "variable": {
                    "value": "self._trainer_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "list(six.itervalues(self.get_variables_as_dict()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_168": {
                "variable": {
                    "value": "self._summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.histogram(v.name.rsplit(':', 1)[0], v) for v in six.itervalues(self._train_params)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_124": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_161": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_167": {
                "name": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_112": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_regularization_loss_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_152": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "origin_grad_vars",
                            "variable"
                        ],
                        [
                            "tf.clip_by_norm(grad, grad_clip_norm)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(grad, 'gradient for {} has numeric issue'.format(var.name))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "grad_clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_numerics_154": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "origin_grad_vars",
                            "variable"
                        ],
                        [
                            "tf.clip_by_norm(grad, grad_clip_norm)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(grad, 'gradient for {} has numeric issue'.format(var.name))",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "'gradient for {} has numeric issue'.format(var.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_162": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_169": {
                "name": {
                    "value": "v.name.rsplit(':', 1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_model.py": {
        "tensorflow": {
            "reshape_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(20, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(20, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_92": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1 - y, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(20, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_172": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_35": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_101": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_160": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_211": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.cast(y, dtype=tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(20, dtype=tf.float32), [4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(20, dtype=tf.float32), [4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(20, dtype=tf.float32), [4, 5])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x + tf.reduce_sum(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_41": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_91": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_171": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_net['x'].log_prob(group_ndims=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(p, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(12, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(n_z * 12, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_z, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_126": {
                "dims": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "input_tensor": {
                    "value": "sgvb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(p_net['x'].log_prob(group_ndims=0) * alpha, axis=-1) + p_net['z'].log_prob() * beta - capture.q_net['z'].log_prob()",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(p_net['x'].log_prob(group_ndims=0) * alpha, axis=-1) + p_net['z'].log_prob() * beta - capture.q_net['z'].log_prob()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_144": {
                "dims": {
                    "value": "[7, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_145": {
                "input_tensor": {
                    "value": "sgvb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(p_net['x'].log_prob(group_ndims=0) * alpha, axis=-1) + p_net['z'].log_prob() * beta - capture.q_net['z'].log_prob()",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(p_net['x'].log_prob(group_ndims=0) * alpha, axis=-1) + p_net['z'].log_prob() * beta - capture.q_net['z'].log_prob()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_212": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_232": {
                "dims": {
                    "value": "[7, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "p_net['x'].log_prob(group_ndims=0) * alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "p_net['x'].log_prob(group_ndims=0) * alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_214": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(20, dtype=tf.float32), [4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(20, dtype=tf.float32), [4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(20, dtype=tf.float32), [4, 5])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_83": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_85": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_169": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(20, dtype=tf.float32), [4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(20, dtype=tf.float32), [4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(20, dtype=tf.float32), [4, 5])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_prediction.py": {
        "tensorflow": {
            "placeholder_79": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_22": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "shape": {
                    "value": "[4, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "shape": {
                    "value": "[4, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_reconstruction.py": {
        "tensorflow": {
            "reshape_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(6)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_17": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(6), [2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(6), [2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(6), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(6), [2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(6), [2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(6), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_27": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1, 0], [1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(6)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "mask_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(6)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1, 0], [1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_88": {
                "value": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_99": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_training.py": {
        "tensorflow": {
            "placeholder_63": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_56": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_97": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_37": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}