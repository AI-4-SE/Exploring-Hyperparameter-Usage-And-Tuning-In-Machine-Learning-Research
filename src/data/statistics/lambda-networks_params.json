{
    "lambda_networks/tfkeras.py": {
        "tensorflow": {
            "stack_16": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "meshgrid(tf.range(n), tf.range(n), indexing='ij')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_45": {
                "variable": {
                    "value": "self.to_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.dim_k * heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_46": {
                "variable": {
                    "value": "self.to_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.dim_k * dim_u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_47": {
                "variable": {
                    "value": "self.to_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.dim_v * dim_u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_49": {
                "variable": {
                    "value": "self.norm_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_50": {
                "variable": {
                    "value": "self.norm_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_k(x)",
                            "Call"
                        ],
                        [
                            "Rearrange('b hh ww (u k) -> b u k (hh ww)', u=u)(k)",
                            "Call"
                        ],
                        [
                            "nn.softmax(k)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_81": {
                "variable": {
                    "value": "Lc",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b u k m, b u v m -> b k v",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_k(x)",
                            "Call"
                        ],
                        [
                            "Rearrange('b hh ww (u k) -> b u k (hh ww)', u=u)(k)",
                            "Call"
                        ],
                        [
                            "nn.softmax(k)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_v(x)",
                            "Call"
                        ],
                        [
                            "self.norm_v(v)",
                            "Call"
                        ],
                        [
                            "Rearrange('b hh ww (u v) -> b u v (hh ww)', u=u)(v)",
                            "Call"
                        ],
                        [
                            "Rearrange('b u v (hh ww) -> b v hh ww u', hh=hh, ww=ww)(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_82": {
                "variable": {
                    "value": "Yc",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h k n, b k v -> b n h v",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "Rearrange('b hh ww (h k) -> b h k (hh ww)', h=h)(q)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "Lc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "einsum('b u k m, b u v m -> b k v', k, v)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_16": {
                "*args": {
                    "value": "tf.range(n)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.range(n)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_55": {
                "variable": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, r, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "einsum_88": {
                "variable": {
                    "value": "Yp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h k n, b v k n -> b n h v",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "Rearrange('b hh ww (h k) -> b h k (hh ww)', h=h)(q)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "Lp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pos_conv(v)",
                            "Call"
                        ],
                        [
                            "Rearrange('b v h w k -> b v k (h w)')(Lp)",
                            "Call"
                        ],
                        [
                            "einsum('n m k u, b u v m -> b n k v', rel_pos_emb, v)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_90": {
                "variable": {
                    "value": "rel_pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.rel_pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.rel_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_91": {
                "variable": {
                    "value": "Lp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "n m k u, b u v m -> b n k v",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rel_pos_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.rel_pos_emb, self.rel_pos)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_v(x)",
                            "Call"
                        ],
                        [
                            "self.norm_v(v)",
                            "Call"
                        ],
                        [
                            "Rearrange('b hh ww (u v) -> b u v (hh ww)', u=u)(v)",
                            "Call"
                        ],
                        [
                            "Rearrange('b u v (hh ww) -> b v hh ww u', hh=hh, ww=ww)(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_92": {
                "variable": {
                    "value": "Yp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h k n, b n k v -> b n h v",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "Rearrange('b hh ww (h k) -> b h k (hh ww)', h=h)(q)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "Lp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pos_conv(v)",
                            "Call"
                        ],
                        [
                            "Rearrange('b v h w k -> b v k (h w)')(Lp)",
                            "Call"
                        ],
                        [
                            "einsum('n m k u, b u v m -> b n k v', rel_pos_emb, v)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lambda_networks/lambda_networks.py": {
        "torch": {
            "meshgrid_14": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(n)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.to_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_k * heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.to_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_k * dim_u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.to_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_v * dim_u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.norm_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_k * heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self.norm_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_v * dim_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_74": {
                "variable": {
                    "value": "\u03bbc",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b u k m, b u v m -> b k v",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_k(x)",
                            "Call"
                        ],
                        [
                            "rearrange(k, 'b (u k) hh ww -> b u k (hh ww)', u=u)",
                            "Call"
                        ],
                        [
                            "k.softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_75": {
                "variable": {
                    "value": "Yc",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h k n, b k v -> b h v n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b (h k) hh ww -> b h k (hh ww)', h=h)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_14": {
                "start": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_15": {
                "tensors": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.meshgrid(torch.arange(n), torch.arange(n))",
                            "Call"
                        ],
                        [
                            "rearrange(torch.stack(pos), 'n i j -> (i j) n')",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_51": {
                "variable": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, r, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, r // 2, r // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.rel_pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(rel_lengths, rel_lengths, dim_k, dim_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_80": {
                "variable": {
                    "value": "Yp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h k n, b k v n -> b h v n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b (h k) hh ww -> b h k (hh ww)', h=h)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_84": {
                "variable": {
                    "value": "\u03bbp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "n m k u, b u v m -> b n k v",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "rel_pos_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rel_pos_emb[n, m]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_85": {
                "variable": {
                    "value": "Yp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h k n, b n k v -> b h v n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b (h k) hh ww -> b h k (hh ww)', h=h)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_55": {
                "*size": {
                    "value": "rel_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * n - 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "rel_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * n - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim_u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}