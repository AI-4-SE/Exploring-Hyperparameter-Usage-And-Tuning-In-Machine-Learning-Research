{
    "datasets/load_dataset.py": {
        "torch": {
            "clamp_80": {
                "variable": {
                    "value": "data[gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_166": {
                "variable": {
                    "value": "data[gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_239": {
                "variable": {
                    "value": "data[input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "raw[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_240": {
                "variable": {
                    "value": "data[gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_291": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, self.patch_size, self.patch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "raw4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(raw4, noise_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_299": {
                "variable": {
                    "value": "data[input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "raw4[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_300": {
                "variable": {
                    "value": "data[gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "rgb2raw(rgb.clone(), is_tensor=True)",
                            "Call"
                        ],
                        [
                            "raw[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "raw.view(1, 1, raw.shape[-2], raw.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.raw_stack(raw)",
                            "Call"
                        ],
                        [
                            "raw + self.raw_stack(noise)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((raw, noise_map), 1)",
                            "Call"
                        ],
                        [
                            "rgb2raw(rgb, is_tensor=True)",
                            "Call"
                        ],
                        [
                            "raw[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "rgb2raw(rgb, is_tensor=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_336": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_346": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, self.patch_size, self.patch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_354": {
                "variable": {
                    "value": "data[input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_noisy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb + noise",
                            "BinOp"
                        ],
                        [
                            "torch.cat((rgb_noisy, noise_map), 1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_355": {
                "variable": {
                    "value": "data[gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_402": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_436": {
                "variable": {
                    "value": "data[input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "lr_raw[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_437": {
                "variable": {
                    "value": "data[gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "rgb2raw(rgb.clone(), is_tensor=True)",
                            "Call"
                        ],
                        [
                            "raw[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "raw.view(1, 1, raw.shape[-2], raw.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.raw_stack(raw)",
                            "Call"
                        ],
                        [
                            "raw + self.raw_stack(noise)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((raw, noise_map), 1)",
                            "Call"
                        ],
                        [
                            "rgb2raw(rgb, is_tensor=True)",
                            "Call"
                        ],
                        [
                            "raw[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "rgb2raw(rgb, is_tensor=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_482": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_506": {
                "variable": {
                    "value": "data[input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "lr_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.resize(rgb.copy(), (0, 0), fx=1 / self.scale, fy=1 / self.scale, interpolation=cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(lr_rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(rgb.clone(), self.scale, self.scale)",
                            "Call"
                        ],
                        [
                            "cv2.resize(rgb.copy(), (0, 0), fx=1 / self.scale, fy=1 / self.scale, interpolation=cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(lr_rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(rgb.clone(), self.scale, self.scale)",
                            "Call"
                        ],
                        [
                            "lr_rgb[:, hi // self.scale:hi // self.scale + self.patch_size // self.scale, wi // self.scale:wi // self.scale + self.patch_size // self.scale]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(rgb.copy(), (0, 0), fx=1 / self.scale, fy=1 / self.scale, interpolation=cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(lr_rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(rgb.clone(), self.scale, self.scale)",
                            "Call"
                        ],
                        [
                            "lr_rgb[:, hi // self.scale:hi // self.scale + self.patch_size // self.scale, wi // self.scale:wi // self.scale + self.patch_size // self.scale]",
                            "Subscript"
                        ],
                        [
                            "lr_rgb + noise",
                            "BinOp"
                        ],
                        [
                            "torch.cat((lr_rgb, noise_map), 1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_507": {
                "variable": {
                    "value": "data[gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "cv2.cvtColor(cv2.imread(self.data_lists[index]), cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "data_aug(rgb, mode=np.random.randint(0, 8))",
                            "Call"
                        ],
                        [
                            "rgb[0:h, 0:w, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.ascontiguousarray(np.transpose(rgb, [2, 0, 1]))).float()",
                            "Call"
                        ],
                        [
                            "rgb[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_70": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, self.patch_size // self.scale, self.patch_size // self.scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "lr_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lr_raw, noise_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_83": {
                "variable": {
                    "value": "data[raw_gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "rgb2raw(rgb.clone(), is_tensor=True)",
                            "Call"
                        ],
                        [
                            "raw[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "raw.view(1, 1, raw.shape[-2], raw.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.raw_stack(raw)",
                            "Call"
                        ],
                        [
                            "raw + self.raw_stack(noise)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((raw, noise_map), 1)",
                            "Call"
                        ],
                        [
                            "rgb2raw(rgb, is_tensor=True)",
                            "Call"
                        ],
                        [
                            "raw[:, hi:hi + self.patch_size, wi:wi + self.patch_size]",
                            "Subscript"
                        ],
                        [
                            "rgb2raw(rgb, is_tensor=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "lr_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(lr_rgb, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_135": {
                "variable": {
                    "value": "lr_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_156": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, self.patch_size // self.scale, self.patch_size // self.scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "lr_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lr_raw, noise_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_168": {
                "variable": {
                    "value": "data[raw_gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb2raw(rgb.clone(), is_tensor=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_230": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, self.patch_size, self.patch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(raw, noise_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_399": {
                "variable": {
                    "value": "lr_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(lr_rgb, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_405": {
                "variable": {
                    "value": "lr_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_427": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, self.patch_size // self.scale, self.patch_size // self.scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "lr_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lr_raw, noise_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_480": {
                "variable": {
                    "value": "lr_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(lr_rgb, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_485": {
                "variable": {
                    "value": "lr_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_497": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, self.patch_size // self.scale, self.patch_size // self.scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_79": {
                "input": {
                    "value": "lr_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr_raw[:, hi // self.scale:hi // self.scale + self.patch_size // self.scale, wi // self.scale:wi // self.scale + self.patch_size // self.scale]",
                            "Subscript"
                        ],
                        [
                            "lr_raw.view(1, 1, lr_raw.shape[-2], lr_raw.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.raw_stack(lr_raw)",
                            "Call"
                        ],
                        [
                            "lr_raw + self.raw_stack(noise)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((lr_raw, noise_map), 1)",
                            "Call"
                        ],
                        [
                            "rgb2raw(lr_rgb, is_tensor=True)",
                            "Call"
                        ],
                        [
                            "lr_raw[:, hi // self.scale:hi // self.scale + self.patch_size // self.scale, wi // self.scale:wi // self.scale + self.patch_size // self.scale]",
                            "Subscript"
                        ],
                        [
                            "lr_raw.view(1, 1, lr_raw.shape[-2], lr_raw.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.raw_stack(lr_raw)",
                            "Call"
                        ],
                        [
                            "lr_raw + self.raw_stack(noise)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((lr_raw, noise_map), 1)",
                            "Call"
                        ],
                        [
                            "rgb2raw(lr_rgb, is_tensor=True)",
                            "Call"
                        ],
                        [
                            "lr_raw.view(1, 1, lr_raw.shape[-2], lr_raw.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.raw_stack(lr_raw)",
                            "Call"
                        ],
                        [
                            "lr_raw + self.raw_stack(noise)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((lr_raw, noise_map), 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_165": {
                "input": {
                    "value": "lr_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr_raw[:, hi // self.scale:hi // self.scale + self.patch_size // self.scale, wi // self.scale:wi // self.scale + self.patch_size // self.scale]",
                            "Subscript"
                        ],
                        [
                            "lr_raw.view(1, 1, lr_raw.shape[-2], lr_raw.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.raw_stack(lr_raw)",
                            "Call"
                        ],
                        [
                            "lr_raw + self.raw_stack(noise)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((lr_raw, noise_map), 1)",
                            "Call"
                        ],
                        [
                            "rgb2raw(lr_rgb, is_tensor=True)",
                            "Call"
                        ],
                        [
                            "lr_raw[:, hi // self.scale:hi // self.scale + self.patch_size // self.scale, wi // self.scale:wi // self.scale + self.patch_size // self.scale]",
                            "Subscript"
                        ],
                        [
                            "lr_raw.view(1, 1, lr_raw.shape[-2], lr_raw.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.raw_stack(lr_raw)",
                            "Call"
                        ],
                        [
                            "lr_raw + self.raw_stack(noise)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((lr_raw, noise_map), 1)",
                            "Call"
                        ],
                        [
                            "rgb2raw(lr_rgb, is_tensor=True)",
                            "Call"
                        ],
                        [
                            "lr_raw.view(1, 1, lr_raw.shape[-2], lr_raw.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.raw_stack(lr_raw)",
                            "Call"
                        ],
                        [
                            "lr_raw + self.raw_stack(noise)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((lr_raw, noise_map), 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_295": {
                "*size": {
                    "value": "[1, 1, self.patch_size // 2, self.patch_size // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_350": {
                "*size": {
                    "value": "[1, 1, self.patch_size, self.patch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_351": {
                "tensors": {
                    "value": "(rgb_noisy, noise_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "[1, 1, self.patch_size // (2 * self.scale), self.patch_size // (2 * self.scale)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_160": {
                "*size": {
                    "value": "[1, 1, self.patch_size // (2 * self.scale), self.patch_size // (2 * self.scale)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_234": {
                "*size": {
                    "value": "[1, 1, self.patch_size // 2, self.patch_size // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_431": {
                "*size": {
                    "value": "[1, 1, self.patch_size // (2 * self.scale), self.patch_size // (2 * self.scale)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_501": {
                "*size": {
                    "value": "[1, 1, self.patch_size // self.scale, self.patch_size // self.scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_502": {
                "tensors": {
                    "value": "(lr_rgb, noise_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/common.py": {
        "torch": {
            "PixelShuffle_300": {
                "variable": {
                    "value": "demo",
                    "type": "Variable",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_channelss",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.SFT_scale_conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "variable": {
                    "value": "self.SFT_scale_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.SFT_shift_conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "variable": {
                    "value": "self.SFT_shift_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_212": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_213": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_17": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "neg_slope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_31": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_19": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "n_prelu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "init": {
                    "value": "neg_slope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_257": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_263": {
                "upscale_factor": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/demosaicnet.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock2(3, self.num_channels, 9, 1, 4, norm=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c0, b1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c1, b2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "c3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c2, b3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.entry",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.exit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c0, b1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c1, b2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "c3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c2, b3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "common.ConvBlock(5, 64, 3, act_type=act_type, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "common.ConvBlock(6, 64, 3, act_type=act_type, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PixelShuffle_216": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "mask3",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_278": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c1, c2, c3, c456]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_250": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "mask3",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_17": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PReLU_23": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_27": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_29": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/ops.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.shifter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_21": {
                "variable": {
                    "value": "self.shifter.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "self.shifter.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, ksize, stride, pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, 1, 1, groups=group)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PixelShuffle_127": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "9 * n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PixelShuffle_130": {
                "upscale_factor": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/pac.py": {
        "torch": {
            "conv_transpose2d_73": {
                "variable": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input_nd, w_one, stride=stride)",
                            "Call"
                        ],
                        [
                            "F.pad(input_nd, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_one",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_nd.new_ones(1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_74": {
                "variable": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input_nd, w_one, stride=stride)",
                            "Call"
                        ],
                        [
                            "F.pad(input_nd, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_85": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_nd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input_nd, w_one, stride=stride)",
                            "Call"
                        ],
                        [
                            "F.pad(input_nd, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kernel_size,) * n_dims if isinstance(kernel_size, Number) else kernel_size",
                            "IfExp"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "tuple(weight.shape[-2:])",
                            "Call"
                        ],
                        [
                            "tuple(weight.shape[-2:])",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(dilation,) * n_dims if isinstance(dilation, Number) else dilation",
                            "IfExp"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(padding,) * n_dims if isinstance(padding, Number) else padding",
                            "IfExp"
                        ],
                        [
                            "_pair(0)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "tuple(((k - 1) * d // 2 for (k, d) in zip(kernel_size, dilation)))",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unfold_101": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_108": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * diff_sq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unfold_120": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_160": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_240": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_242": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_244": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unfold_326": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_329": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn->ijmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(output,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(mask, dtype=input.dtype, device=input.device)",
                            "Call"
                        ],
                        [
                            "nd2col(mask, kernel_size, stride=stride, padding=padding, output_padding=output_padding, dilation=dilation, transposed=transposed)",
                            "Call"
                        ],
                        [
                            "mask_pattern",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_491": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_493": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_166": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,zykl->ijmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_168": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,ojkl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_190": {
                "variable": {
                    "value": "in_cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_215": {
                "variable": {
                    "value": "grad_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn->o",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_250": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,jokl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_252": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,jokl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv_transpose2d_277": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.in_ch",
                            "Attribute"
                        ],
                        [
                            "ctx.in_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_278": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1][0], pad[1][1], pad[0][0], pad[0][1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_279": {
                "variable": {
                    "value": "in_cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_306": {
                "variable": {
                    "value": "grad_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn->o",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_341": {
                "variable": {
                    "value": "grad_im2col_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,izklmn->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, kernel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_352": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_354": {
                "variable": {
                    "value": "grad_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,ijklmn->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, cols)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_414": {
                "variable": {
                    "value": "smoothed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_for_kernel_crop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(-1, 1, in_h, in_w)[:, :, crop[0]:_neg_idx(crop[0]), crop[1]:_neg_idx(crop[1])]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "smooth_kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smooth_1d",
                            "Name"
                        ],
                        [
                            "smooth_1d",
                            "Name"
                        ],
                        [
                            "smooth_kernel * smooth_1d.view(-1, *repeat(1, d))",
                            "BinOp"
                        ],
                        [
                            "smooth_kernel * smooth_1d.view(-1, *repeat(1, d))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "tuple(np.maximum(0, smooth_padding))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_419": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_423": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_468": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,zykl->ijmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(im_cols * kernel, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_470": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,ojkl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(im_cols * kernel, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_593": {
                "variable": {
                    "value": "self.smooth_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, *repeat(smooth_kernel_size, len(kernel_size)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_188": {
                "variable": {
                    "value": "grad_in_mul_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,ojkl->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_210": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,ijklmn->kl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_213": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,ijklmn->ojkl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_274": {
                "variable": {
                    "value": "grad_in_mul_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,jokl->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_301": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,ijklmn->kl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_304": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,ijklmn->jokl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_569": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_581": {
                "variable": {
                    "value": "inv_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(self.inv_alpha_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_582": {
                "variable": {
                    "value": "inv_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(self.inv_lambda_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_595": {
                "variable": {
                    "value": "smooth_1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.25, 0.5, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_447": {
                "data": {
                    "value": "empty_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm == 0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_563": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_602": {
                "variable": {
                    "value": "smooth_1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(1.0 / smooth_kernel_size,) * smooth_kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_430": {
                "input": {
                    "value": "x + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5 * inv_lambda.view(1, -1, 1, 1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_559": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*kernel_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_565": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_567": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_578": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_579": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_584": {
                "data": {
                    "value": "inv_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(float(self.inv_alpha_init))",
                            "Call"
                        ],
                        [
                            "self.inv_alpha_init * torch.ones(out_channels)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_585": {
                "data": {
                    "value": "inv_lambda",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(float(self.inv_lambda_init))",
                            "Call"
                        ],
                        [
                            "self.inv_lambda_init * torch.ones(out_channels)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_639": {
                "variable": {
                    "value": "self.weight.data[c, c, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_650": {
                "variable": {
                    "value": "self.weight.data[0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "gauss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np_gaussian_2d(self.kernel_size[0]) * self.kernel_size[0] * self.kernel_size[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_653": {
                "variable": {
                    "value": "self.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "compat.reshape(n_classes, n_classes, 1, 1) * gauss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_655": {
                "input": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/sgnet.py": {
        "torch": {
            "Sequential_71": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "common.Upsampler(2, dm_n_feats, norm_type, act_type, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "*args": {
                    "value": "*m_sr_resblock",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.sr_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_sr_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.model_dm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_dm_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.model_dm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_dm_up",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "common.ConvBlock(dm_n_feats + 1, dm_n_feats, 1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.greenup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "common.ConvBlock(1, 4, 1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_188": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_191": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** (1 / 2.2) * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_200": {
                "variable": {
                    "value": "im_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cv2.dilate(im_minus, kernel).astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "im_minus",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_minus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(np.array(im).astype(np.float) - np.array(im_blur).astype(np.float))",
                            "Call"
                        ],
                        [
                            "np.uint8(im_minus)",
                            "Call"
                        ],
                        [
                            "abs(np.array(im).astype(np.float) - np.array(im_blur).astype(np.float))",
                            "Call"
                        ],
                        [
                            "np.uint8(im_minus)",
                            "Call"
                        ],
                        [
                            "cv2.dilate(im_minus, kernel).astype(np.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_minus).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_211": {
                "variable": {
                    "value": "im_minus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "im_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im_sum, im_minus]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PixelShuffle_131": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_176": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_180": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_182": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_224": {
                "tensors": {
                    "value": "[x, dmap]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_model.py": {
        "torch": {
            "save_42": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_50": {
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/dist_model.py": {
        "torch": {
            "Adam_97": {
                "variable": {
                    "value": "self.optimizer_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.old_lr - lrd",
                            "BinOp"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_203": {
                "input": {
                    "value": "self.loss_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "backward_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_173": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(inspect.getfile(self.initialize), '..', '..', 'weights/v%s/%s.pth' % (version, net)))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks_basic.py": {
        "torch": {
            "mean_167": {
                "input": {
                    "value": "self.lin0.model(diffs[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BCELoss_202": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.net]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_239": {
                "input": {
                    "value": "(in0 - in1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_168": {
                "input": {
                    "value": "self.lin1.model(diffs[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_169": {
                "input": {
                    "value": "self.lin2.model(diffs[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_170": {
                "input": {
                    "value": "self.lin3.model(diffs[3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_171": {
                "input": {
                    "value": "self.lin4.model(diffs[4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_185": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_187": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "(d0, d1, d0 - d1, d0 / (d1 + eps), d1 / (d0 + eps))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_221": {
                "in_channels": {
                    "value": "chn_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_173": {
                "input": {
                    "value": "self.lin5.model(diffs[5])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_174": {
                "input": {
                    "value": "self.lin6.model(diffs[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/pretrained_networks.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.slice6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.slice7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "net_canny.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.gaussian_filter_horizontal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, filter_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, filter_size // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.gaussian_filter_vertical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(filter_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(filter_size // 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.sobel_filter_horizontal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "sobel_filter.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "sobel_filter.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.sobel_filter_vertical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "sobel_filter.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "sobel_filter.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.directional_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_0.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "filter_0.shape[-1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "blurred_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[blurred_img_r, blurred_img_g, blurred_img_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_104": {
                "variable": {
                    "value": "blurred_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.squeeze(blurred_img)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_143": {
                "variable": {
                    "value": "channel_select_filtered",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[channel_select_filtered_positive, channel_select_filtered_negative]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "variable": {
                    "value": "is_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel_select_filtered.min(dim=0)[0] > 0.0",
                            "Compare"
                        ],
                        [
                            "torch.unsqueeze(is_max, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_18": {
                "ndarray": {
                    "value": "generated_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gaussian(filter_size, std=1.0).reshape([1, filter_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "np.array([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "generated_filters.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "np.array([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "sobel_filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_30": {
                "ndarray": {
                    "value": "np.array([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "sobel_filter.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "np.array([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "all_filters[:, None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "np.zeros(shape=(all_filters.shape[0],))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_119": {
                "input": {
                    "value": "grad_y_r + grad_y_g + grad_y_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_x_r + grad_x_g + grad_x_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_121": {
                "input": {
                    "value": "grad_orientation / 45.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_173": {
                "input": {
                    "value": "output[i, :].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_174": {
                "input": {
                    "value": "gt[i, :].detach().unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "input": {
                    "value": "blurred_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([blurred_img_r, blurred_img_g, blurred_img_b], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.squeeze(blurred_img)])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}