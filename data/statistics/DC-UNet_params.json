{
    "model.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_in, c_out, kernel_size, stride, padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.net1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dBN(c_in=c_in, c_out=c_out, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.net2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dBN(c_in=c_in, c_out=c_out, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dBN(c_in, int(w / 6), kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dBN(int(w / 6), int(w / 3), kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dBN(int(w / 3), int(w / 2), kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.dc_block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.dc_block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.dc_block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.dc_block5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.dc_block6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DC_Block_Decoder(w[4], w[3], res_channels=res_dim[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.dc_block7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DC_Block_Decoder(w[3], w[2], res_channels=res_dim[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.dc_block8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DC_Block_Decoder(w[2], w[1], res_channels=res_dim[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.dc_block9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DC_Block_Decoder(w[1], w[0], res_channels=res_dim[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dBN(c_in=int(w[0] / 6) + int(w[0] / 3) + int(w[0] / 2), c_out=num_classes, kernel_size=1, stride=1, padding=0, use_activation=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, res_h4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ReLU(self.net(x)) if self.use_activation else self.net(x)",
                            "IfExp"
                        ],
                        [
                            "self.dc_block5(h4)",
                            "Call"
                        ],
                        [
                            "torch.cat((h, res_h4))",
                            "Call"
                        ],
                        [
                            "self.dc_block6(h)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, res_h3)",
                            "Call"
                        ],
                        [
                            "self.dc_block7(h)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, res_h2)",
                            "Call"
                        ],
                        [
                            "self.dc_block8(h)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, res_h1)",
                            "Call"
                        ],
                        [
                            "self.dc_block9(h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "res_h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res2(h3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_192": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ReLU(self.net(x)) if self.use_activation else self.net(x)",
                            "IfExp"
                        ],
                        [
                            "self.dc_block5(h4)",
                            "Call"
                        ],
                        [
                            "torch.cat((h, res_h4))",
                            "Call"
                        ],
                        [
                            "self.dc_block6(h)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, res_h3)",
                            "Call"
                        ],
                        [
                            "self.dc_block7(h)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, res_h2)",
                            "Call"
                        ],
                        [
                            "self.dc_block8(h)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, res_h1)",
                            "Call"
                        ],
                        [
                            "self.dc_block9(h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "res_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res2(h2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_195": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ReLU(self.net(x)) if self.use_activation else self.net(x)",
                            "IfExp"
                        ],
                        [
                            "self.dc_block5(h4)",
                            "Call"
                        ],
                        [
                            "torch.cat((h, res_h4))",
                            "Call"
                        ],
                        [
                            "self.dc_block6(h)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, res_h3)",
                            "Call"
                        ],
                        [
                            "self.dc_block7(h)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, res_h2)",
                            "Call"
                        ],
                        [
                            "self.dc_block8(h)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, res_h1)",
                            "Call"
                        ],
                        [
                            "self.dc_block9(h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "res_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res1(h1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_44": {
                "input": {
                    "value": "self.net1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.net2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "*net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_100": {
                "input": {
                    "value": "self.left_net(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.right_net(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_112": {
                "input": {
                    "value": "self.left_net(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.right_net(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(w_in / 6) + int(w_in / 3) + int(w_in / 2)",
                            "BinOp"
                        ],
                        [
                            "initial_channels",
                            "variable"
                        ],
                        [
                            "int(w_in / 6) + int(w_in / 3) + int(w_in / 2) + res_dim",
                            "BinOp"
                        ],
                        [
                            "w_in + res_channels",
                            "BinOp"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_in",
                            "variable"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_in",
                            "variable"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "self.net(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(w_in / 6) + int(w_in / 3) + int(w_in / 2)",
                            "BinOp"
                        ],
                        [
                            "initial_channels",
                            "variable"
                        ],
                        [
                            "int(w_in / 6) + int(w_in / 3) + int(w_in / 2) + res_dim",
                            "BinOp"
                        ],
                        [
                            "w_in + res_channels",
                            "BinOp"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_in",
                            "variable"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_122": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_126": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_130": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_134": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}