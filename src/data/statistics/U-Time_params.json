{
    "utime/bin/cm.py": {
        "sklearn": {
            "confusion_matrix_162": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(glob(args.true_pattern))",
                            "Call"
                        ],
                        [
                            "np.where(np.isin(true, [1, 2, 3]), ones, true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(glob(args.pred_pattern))",
                            "Call"
                        ],
                        [
                            "np.where(np.isin(pred, [1, 2, 3]), ones, pred)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "list((set(np.unique(true)) | set(np.unique(pred))) - set(args.ignore_classes))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utime/bin/evaluate.py": {
        "sklearn": {
            "f1_score_415": {
                "variable": {
                    "value": "dice_pr_class",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "list(range(seq.n_classes))",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "zero_division": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utime/evaluation/metrics.py": {
        "sklearn": {
            "cohen_kappa_score_16": {
                "variable": {
                    "value": "kappa_scores[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y1": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true == _class",
                            "Compare"
                        ]
                    ]
                },
                "y2": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred == _class",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "utime/evaluation/plotting.py": {
        "sklearn": {
            "confusion_matrix_66": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_labels_67": {
                "*ys": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utime/_defaults.py": {
        "tensorflow": {
            "set_seed_105": {
                "seed": {
                    "value": "cls.GLOBAL_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utime/bin/train.py": {
        "tensorflow": {
            "MirroredStrategy_263": {
                "devices": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[g.name.replace('physical_device', 'device') for g in tf.config.list_physical_devices('GPU')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "OneDeviceStrategy_263": {
                "device": {
                    "value": "/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "list_physical_devices_260": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utime/callbacks/callbacks.py": {
        "tensorflow": {
            "reduce_mean_117": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "metric(y, pred)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utime/callbacks/utils.py": {
        "tensorflow": {}
    },
    "utime/evaluation/loss_functions.py": {
        "tensorflow": {
            "cond_9": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(y_true.shape[-1] or -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.shape(y_true)[:-1]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.shape(y_true)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_10": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_true, dims)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(y_true, tf.uint8), depth=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(y_true.shape[-1] or -1, 1), lambda : tf.shape(y_true)[:-1], lambda : tf.shape(y_true))",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_11": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(y_true, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_28": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shape))[1:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_29": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true + y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "reduction_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shape))[1:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_9": {
                "x": {
                    "value": "y_true.shape[-1] or -1",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_11": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_true, dims)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(y_true, tf.uint8), depth=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_31": {
                "input_tensor": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * intersection + smooth) / (union + smooth)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_9": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_true, dims)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(y_true, tf.uint8), depth=n_classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utime/evaluation/utils.py": {
        "tensorflow": {
            "reshape_20": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(true, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(true, mask, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pred, [-1, n_pred_classes])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(pred, mask, axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_pred_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_22": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(true, 0), tf.less(true, n_pred_classes))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(true)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.greater_equal(true, 0), tf.less(true, n_pred_classes)), tf.ones_like(true), tf.zeros_like(true))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_29": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(true, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(true, mask, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.greater_equal(true, 0), tf.less(true, n_pred_classes)), tf.ones_like(true), tf.zeros_like(true))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_30": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pred, [-1, n_pred_classes])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(pred, mask, axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(tf.greater_equal(true, 0), tf.less(true, n_pred_classes)), tf.ones_like(true), tf.zeros_like(true))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_22": {
                "x": {
                    "value": "tf.greater_equal(true, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(true, n_pred_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_26": {
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(true, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(true, mask, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_27": {
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(true, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(true, mask, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_23": {
                "x": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(true, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(true, mask, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_24": {
                "x": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(true, [-1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(true, mask, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "n_pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.get_shape()[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utime/models/deep_sleep_net.py": {
        "tensorflow": {
            "Input_203": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_periods, self.input_dims, self.n_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_103": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.batch_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "tensor": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1D_72": {
                "filters": {
                    "value": "n_filters_input",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size_input",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_input",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "kr",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{name}_conv_input'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "MaxPooling1D_81": {
                "pool_size": {
                    "value": "pool_size_input",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{name}_MP_input'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "MaxPooling1D_95": {
                "pool_size": {
                    "value": "pool_size_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{name}_MP_lower'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "small_filter_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "large_filter_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_178": {
                "name": {
                    "value": "self.model_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Lambda_207": {
                "function": {
                    "value": "self._reshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "arguments": {
                    "value": "{'shape': s}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "name_scope_212": {
                "name": {
                    "value": "fc_skip_conn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_218": {
                "name": {
                    "value": "bidirect_LSTMs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_237": {
                "name": {
                    "value": "LSTM_and_skip_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_242": {
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_51": {
                "name": {
                    "value": "self.model_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNormalization_80": {
                "name": {
                    "value": "f'{name}_BN_input'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{name}_DO_input'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Conv1D_86": {
                "filters": {
                    "value": "n_filters_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "kr",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{name}_conv_lower{i}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Dropout_98": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{name}_DO_lower'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Flatten_132": {
                "name": {
                    "value": "flatten_small_filters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_133": {
                "name": {
                    "value": "flatten_large_filters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_135": {
                "name": {
                    "value": "concat_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_136": {
                "units": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_139": {
                "name": {
                    "value": "concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_214": {
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "skip_conn_FC",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Lambda_221": {
                "function": {
                    "value": "self._reshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "arguments": {
                    "value": "{'shape': s}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "LSTM_input_reshape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_234": {
                "function": {
                    "value": "self._reshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "arguments": {
                    "value": "{'shape': s}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "LSTM_output_reshape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Add_239": {
                "name": {
                    "value": "add_LSTM_and_skip",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_244": {
                "units": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "deep_sleep_net_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_247": {
                "function": {
                    "value": "self._reshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "arguments": {
                    "value": "{'shape': s}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "output_reshape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_94": {
                "name": {
                    "value": "f'{name}BN_lower_{i}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "BatchNormalization_217": {
                "name": {
                    "value": "skip_conn_BN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Bidirectional_225": {
                "layer": {
                    "value": "LSTM(units=512, dropout=do, recurrent_dropout=0, return_sequences=True, kernel_regularizer=self.reg, name=f'LSTM_{i}')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "f'bidirect_{i}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Dropout_241": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTM_225": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "do",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 if self.use_dropout else 0",
                            "IfExp"
                        ]
                    ]
                },
                "recurrent_dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f'LSTM_{i}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "BatchNormalization_232": {
                "name": {
                    "value": "f'LSTM_bn_{i}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "utime/models/model_init.py": {
        "tensorflow": {
            "clear_session_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utime/models/usleep.py": {
        "tensorflow": {
            "reshape_47": {
                "variable": {
                    "value": "inputs_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=[self.n_periods, self.input_dims, self.n_channels])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], self.seq_length or shape[1] * shape[2], 1, self.n_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_86": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "shape_safe(inputs[1], 1) - shape_safe(inputs[0], 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_96": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "shape_safe(inputs[0], 1) - shape_safe(inputs[1], 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=[self.n_periods, self.input_dims, self.n_channels])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_safe(inputs)",
                            "Call"
                        ],
                        [
                            "shape_safe(inputs)",
                            "Call"
                        ],
                        [
                            "[shape[0], self.n_periods or shape[1], n_pred, inputs.shape[-1]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_77": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=[self.n_periods, self.input_dims, self.n_channels])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, shape_safe(inputs, 1) % 2], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_87": {
                "tensor": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [s // 2, s // 2 + s % 2], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "glorot_uniform_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_344": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_periods, self.input_dims, self.n_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_235": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_241": {
                "name": {
                    "value": "name + '_BN1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_295": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "dense_classifier_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'tanh'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}dense_classifier_out'.format(name_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AveragePooling2D_317": {
                "pool_size": {
                    "value": "(data_per_period, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}average_pool'.format(name_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_319": {
                "filters": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(transition_window, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}sequence_conv_out_1'.format(name_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_327": {
                "filters": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(transition_window, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}sequence_conv_out_2'.format(name_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2D_219": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "l_name + '_conv1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_225": {
                "name": {
                    "value": "l_name + '_BN1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPooling2D_227": {
                "pool_size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "l_name + '_pool'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpSampling2D_265": {
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "l_name + '_up'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_266": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "l_name + '_conv1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_272": {
                "name": {
                    "value": "l_name + '_BN1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_277": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "l_name + '_concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_278": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "l_name + '_conv2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_283": {
                "name": {
                    "value": "l_name + '_BN2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utime/models/utils.py": {
        "tensorflow": {
            "function_76": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "input_signature": {
                    "value": "[tf.TensorSpec(keras_model.inputs[0].shape, keras_model.inputs[0].dtype)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "write_graph_79": {
                "graph_or_graph_def": {
                    "value": "frozen_func.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "out_folder",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pb_file_name",
                    "type": "variable",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorSpec_76": {
                "shape": {
                    "value": "keras_model.inputs[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "keras_model.inputs[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utime/models/utime.py": {
        "tensorflow": {
            "Input_295": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_periods, self.input_dims, self.n_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_167": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_173": {
                "name": {
                    "value": "name + '_BN1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_174": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_conv2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_180": {
                "name": {
                    "value": "name + '_BN2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_244": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "dense_classifier_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'tanh'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}dense_classifier_out'.format(name_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AveragePooling2D_267": {
                "pool_size": {
                    "value": "(data_per_period, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}average_pool'.format(name_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_269": {
                "filters": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(transition_window, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}sequence_conv_out_1'.format(name_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_276": {
                "filters": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(transition_window, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}sequence_conv_out_2'.format(name_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Lambda_286": {
                "function": {
                    "value": "lambda x: tf.reshape(x, s)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}sequence_classification_reshaped'.format(name_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Lambda_299": {
                "function": {
                    "value": "lambda x: tf.reshape(x, reshaped)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Conv2D_144": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "l_name + '_conv1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_150": {
                "name": {
                    "value": "l_name + '_BN1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_151": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "l_name + '_conv2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_157": {
                "name": {
                    "value": "l_name + '_BN2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPooling2D_158": {
                "pool_size": {
                    "value": "(pools[i], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "l_name + '_pool'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpSampling2D_206": {
                "size": {
                    "value": "(fs, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "l_name + '_up'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_208": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(fs, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "l_name + '_conv1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_214": {
                "name": {
                    "value": "l_name + '_BN1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_219": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "l_name + '_concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_221": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "l_name + '_conv2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_226": {
                "name": {
                    "value": "l_name + '_BN2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_227": {
                "filters": {
                    "value": "int(filters * complexity_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation_function(activation_string=self.activation)",
                            "Call"
                        ],
                        [
                            "'elu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizers.l2(self.l2_reg) if self.l2_reg else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "l_name + '_conv3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_232": {
                "name": {
                    "value": "l_name + '_BN3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Cropping2D_370": {
                "cropping": {
                    "value": "[list(cr), [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_252": {
                "padding": {
                    "value": "[[s // 2, s // 2 + s % 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_286": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_periods * self.input_dims - cls.get_shape().as_list()[1]",
                            "BinOp"
                        ],
                        [
                            "[-1, n_periods, input_dims // data_per_period, n_classes]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_299": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, self.n_periods * self.input_dims, 1, self.n_channels]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "utime/sequences/base_sequence.py": {
        "tensorflow": {
            "convert_to_tensor_72": {
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(shape=y_shape, dtype=Defaults.HYP_DTYPE)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(y.astype(Defaults.HYP_DTYPE).squeeze(), -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utime/train/trainer.py": {
        "tensorflow": {
            "Options_159": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utime/train/utils.py": {
        "tensorflow": {}
    },
    "utime/utils/label_smoothing/label_smoothing.py": {
        "tensorflow": {
            "to_categorical_11": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}