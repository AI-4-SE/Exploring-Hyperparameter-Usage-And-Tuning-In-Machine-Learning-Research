{
    "metrics/motion_metrics.py": {
        "tensorflow": {
            "merge_all_194": {
                "variable": {
                    "value": "self.all_summaries_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "all_metrics_summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_186": {
                "variable": {
                    "value": "pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_{}_summary_pl'.format(m, t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_188": {
                "variable": {
                    "value": "smry",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}/until_{}'.format(m, t)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='{}_{}_summary_pl'.format(m, t))",
                            "Call"
                        ],
                        [
                            "self.summaries[m][t][1]",
                            "Subscript"
                        ]
                    ]
                },
                "collections": {
                    "value": "['all_metrics_summaries']",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "preprocessing/preprocess_dip.py": {
        "tensorflow": {
            "Feature_49": {
                "variable": {
                    "value": "features[file_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[file_id.encode('utf-8')])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_50": {
                "variable": {
                    "value": "features[db_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[db_name.encode('utf-8')])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_51": {
                "variable": {
                    "value": "features[shape]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=poses.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_52": {
                "variable": {
                    "value": "features[poses]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=poses.flatten())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_53": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_33": {
                "path": {
                    "value": "'{}-{:0>5d}-of-{:0>5d}'.format(output_file, i, n_shards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_49": {
                "value": {
                    "value": "[file_id.encode('utf-8')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_50": {
                "value": {
                    "value": "[db_name.encode('utf-8')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_51": {
                "value": {
                    "value": "poses.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FloatList_52": {
                "value": {
                    "value": "poses.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_53": {
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocessing/preprocess_h36m.py": {
        "tensorflow": {
            "Feature_59": {
                "variable": {
                    "value": "features[file_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[file_id.encode('utf-8')])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_60": {
                "variable": {
                    "value": "features[db_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[db_name.encode('utf-8')])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_61": {
                "variable": {
                    "value": "features[shape]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=poses.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_62": {
                "variable": {
                    "value": "features[poses]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=poses.flatten())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_63": {
                "variable": {
                    "value": "features[one_hot]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=one_hot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_64": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_59": {
                "value": {
                    "value": "[file_id.encode('utf-8')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_60": {
                "value": {
                    "value": "[db_name.encode('utf-8')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_61": {
                "value": {
                    "value": "poses.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FloatList_62": {
                "value": {
                    "value": "poses.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_63": {
                "value": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Features_64": {
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "spl/data/amass_tf.py": {
        "tensorflow": {
            "Options_62": {
                "variable": {
                    "value": "tf_data_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "minimum_134": {
                "variable": {
                    "value": "end",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "start + self.extract_windows_of",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(sample['poses'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_136": {
                "variable": {
                    "value": "sample[shape]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_142": {
                "variable": {
                    "value": "sample[shape]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_148": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_len // 2 - self.extract_windows_of // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_151": {
                "variable": {
                    "value": "sample[shape]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "parse_single_example_177": {
                "variable": {
                    "value": "parsed_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_to_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'file_id': tf.FixedLenFeature([], dtype=tf.string), 'db_name': tf.FixedLenFeature([], dtype=tf.string), 'shape': tf.FixedLenFeature([2], dtype=tf.int64), 'poses': tf.VarLenFeature(dtype=tf.float32)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "parsed_features[poses]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sparse.to_dense(parsed_features['poses'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "parsed_features['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "substr_181": {
                "variable": {
                    "value": "file_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parsed_features['file_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pos": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "len": {
                    "value": "tf.strings.length(parsed_features['file_id']) - 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "join_182": {
                "variable": {
                    "value": "parsed_features[sample_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[parsed_features['db_name'], file_id]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parallel_interleave_67": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "self.num_parallel_calls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "block_length": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_147": {
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FixedLenFeature_171": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_172": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_173": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_174": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_dense_178": {
                "sp_input": {
                    "value": "parsed_features['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "prefetch_to_device_115": {
                "device": {
                    "value": "/device:GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_130": {
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "length_181": {
                "input": {
                    "value": "parsed_features['file_id']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_133": {
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "spl/data/base_dataset.py": {
        "tensorflow": {
            "executing_eagerly_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spl/data/srnn_tf.py": {
        "tensorflow": {
            "Options_37": {
                "variable": {
                    "value": "tf_data_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_57": {
                "variable": {
                    "value": "sample[shape]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_59": {
                "variable": {
                    "value": "sample[euler_shape]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample['euler_targets']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_65": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_len // 2 - self.extract_windows_of // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_68": {
                "variable": {
                    "value": "sample[shape]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "parse_single_example_96": {
                "variable": {
                    "value": "parsed_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_to_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'file_id': tf.FixedLenFeature([], dtype=tf.string), 'db_name': tf.FixedLenFeature([], dtype=tf.string), 'pose_shape': tf.FixedLenFeature([2], dtype=tf.int64), 'poses': tf.VarLenFeature(dtype=tf.float32), 'euler_shape': tf.FixedLenFeature([2], dtype=tf.int64), 'euler_targets': tf.VarLenFeature(dtype=tf.float32)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "parsed_features[poses]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sparse.to_dense(parsed_features['poses'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "parsed_features['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "parsed_features[euler_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sparse.to_dense(parsed_features['euler_targets'])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "parsed_features['euler_shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "parallel_interleave_41": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "self.num_parallel_calls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "block_length": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "sample['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FixedLenFeature_89": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_90": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_91": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_92": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_93": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_94": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_dense_98": {
                "sp_input": {
                    "value": "parsed_features['poses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_dense_99": {
                "sp_input": {
                    "value": "parsed_features['euler_targets']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "spl/evaluation.py": {
        "tensorflow": {
            "get_checkpoint_state_40": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "experiment_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "latest_filename": {
                    "value": "checkpoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_107": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_80": {
                "name": {
                    "value": "test_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_92": {
                "name": {
                    "value": "C.TEST",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_260": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reset_default_graph_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_261": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_261": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.9, allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "spl/model/base_model.py": {
        "tensorflow": {
            "get_global_step_215": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "exponential_decay_216": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.get('learning_rate')",
                    "type": "Call",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_global_step(graph=None)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self.config.get('learning_rate_decay_steps', 1000)",
                    "type": "Call",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.config.get('learning_rate_decay_rate', 0.98)",
                    "type": "Call",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_229": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_254": {
                "variable": {
                    "value": "self.summary_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "self.mode + '/model_summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_222": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.config.get('learning_rate'), global_step=global_step, decay_steps=self.config.get('learning_rate_decay_steps', 1000), decay_rate=self.config.get('learning_rate_decay_rate', 0.98), staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_231": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_233": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_246": {
                "name": {
                    "value": "self.mode + '/loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "[self.mode + '/model_summary']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_161": {
                "name": {
                    "value": "loss_angles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "pose_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_224": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.config.get('learning_rate'), global_step=global_step, decay_steps=self.config.get('learning_rate_decay_steps', 1000), decay_rate=self.config.get('learning_rate_decay_rate', 0.98), staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_230": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_235": {
                "variable": {
                    "value": "(gradients, self.gradient_norms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.config.get('grad_clip_norm')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_norm_237": {
                "variable": {
                    "value": "self.gradient_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_249": {
                "name": {
                    "value": "self.mode + '/gradient_norms'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gradient_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "[self.mode + '/model_summary']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_159": {
                "input": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "per_joint_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.square(diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, seq_len, self.NUM_JOINTS, self.JOINT_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_168": {
                "variable": {
                    "value": "per_joint_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(per_joint_loss, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_169": {
                "variable": {
                    "value": "per_joint_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_joint_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.square(diff), (-1, seq_len, self.NUM_JOINTS, self.JOINT_SIZE))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(per_joint_loss, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(per_joint_loss, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(per_joint_loss)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_170": {
                "variable": {
                    "value": "per_joint_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_joint_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.square(diff), (-1, seq_len, self.NUM_JOINTS, self.JOINT_SIZE))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(per_joint_loss, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(per_joint_loss, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(per_joint_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_195": {
                "variable": {
                    "value": "pose_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=current_layer, units=self.config['output_hidden_size'], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.HUMAN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_164": {
                "x": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_pose - predicted_pose",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dense_192": {
                "variable": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=current_layer, units=self.config['output_hidden_size'], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config['output_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "'out_dense_all_' + str(hidden_layers)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_167": {
                "x": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_pose - predicted_pose",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_168": {
                "input_tensor": {
                    "value": "per_joint_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.square(diff), (-1, seq_len, self.NUM_JOINTS, self.JOINT_SIZE))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(per_joint_loss, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(per_joint_loss, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(per_joint_loss)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "'out_dense_all_' + str(layer_idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_210": {
                "input": {
                    "value": "pose_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sp_layer.build(inputs)",
                            "Call"
                        ],
                        [
                            "pose_prediction + self.prediction_inputs[:, 0:tf.shape(pose_prediction)[1], :self.HUMAN_SIZE]",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=current_layer, units=self.HUMAN_SIZE, activation=None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "spl/model/rnn.py": {
        "tensorflow": {
            "dynamic_rnn_86": {
                "variable": {
                    "value": "(rnn_outputs, self.rnn_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.build_input_layer(self.prediction_inputs)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.prediction_seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "self.initial_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_49": {
                "shape": {
                    "value": "tf.shape(self.prediction_targets)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_",
                            "Name"
                        ],
                        [
                            "tf.layers.dropout(current_layer, rate=drop_rate, seed=self.config['seed'], training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=current_layer, units=hidden_size, activation=self.activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.get('input_dropout_rate', 0)",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "self.config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_",
                            "Name"
                        ],
                        [
                            "tf.layers.dropout(current_layer, rate=drop_rate, seed=self.config['seed'], training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=current_layer, units=hidden_size, activation=self.activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.get('input_hidden_size', 0)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "self.activation_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "rnn_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "self.prediction_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "input_dropout",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "'inp_dense_' + str(layer_idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "self.prediction_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "spl/model/seq2seq.py": {
        "tensorflow": {
            "transpose_50": {
                "variable": {
                    "value": "enc_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_51": {
                "variable": {
                    "value": "dec_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_52": {
                "variable": {
                    "value": "dec_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.decoder_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "enc_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "enc_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.encoder_inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(enc_in, [-1, self.input_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "dec_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.decoder_inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_in, [-1, self.input_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "dec_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.decoder_outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_out, [-1, self.input_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "self.enc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "enc_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.encoder_inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(enc_in, [-1, self.input_size])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.source_seq_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_59": {
                "variable": {
                    "value": "self.dec_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "dec_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.decoder_inputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_in, [-1, self.input_size])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.target_seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_60": {
                "variable": {
                    "value": "self.dec_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "dec_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.decoder_outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_out, [-1, self.input_size])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.target_seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_67": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_78": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.contrib.rnn.GRUCell(self.rnn_size) for _ in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "transpose_131": {
                "a": {
                    "value": "tf.stack(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_45": {
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_69": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "seq2seq",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_131": {
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "session.run(output_feed)",
                            "Call"
                        ],
                        [
                            "session.run(output_feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "static_rnn_121": {
                "variable": {
                    "value": "(_, enc_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(self.rnn_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(self.rnn_size)",
                            "Call"
                        ],
                        [
                            "rnn_cell_extensions.InputDropoutWrapper(cell, self.is_training, drop_rate)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell([tf.contrib.rnn.GRUCell(self.rnn_size) for _ in range(self.num_layers)])",
                            "Call"
                        ],
                        [
                            "rnn_cell_extensions.LinearSpaceDecoderWrapper(cell, self.input_size)",
                            "Call"
                        ],
                        [
                            "rnn_cell_extensions.SPLWrapper(cell=cell, spl=sp_layer, human_size=self.HUMAN_SIZE)",
                            "Call"
                        ],
                        [
                            "rnn_cell_extensions.InputEncoderWrapper(cell, self.input_layer_size, reuse=self.reuse)",
                            "Call"
                        ],
                        [
                            "rnn_cell_extensions.ResidualWrapper(cell)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.enc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_78": {
                "units": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "rnn_decoder_cell",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "basic_rnn_seq2seq",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "spl/model/spl.py": {
        "tensorflow": {
            "concat_115": {
                "variable": {
                    "value": "pose_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "list(joint_predictions.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_133": {
                "variable": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=current_layer, units=self.per_joint_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.per_joint_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "'out_dense_' + name + '_' + str(self.per_joint_layers)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_136": {
                "inputs": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=current_layer, units=self.per_joint_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_111": {
                "values": {
                    "value": "joint_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[context]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "'out_dense_' + name + '_' + str(layer_idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "spl/model/zero_velocity.py": {
        "tensorflow": {
            "Variable_33": {
                "variable": {
                    "value": "self._dummy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "dummy_variable",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_53": {
                "variable": {
                    "value": "self.summary_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "self.mode + '/model_summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_43": {
                "input": {
                    "value": "last_known_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prediction_inputs[:, 0:1]",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.target_seq_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "input_tensor": {
                    "value": "tf.reduce_sum(d * d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_52": {
                "name": {
                    "value": "self.mode + '/loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "[self.mode + '/model_summary']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "d * d",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "spl/tests/data_render.py": {
        "tensorflow": {
            "enable_eager_execution_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spl/tests/eval_metrics.py": {
        "tensorflow": {
            "enable_eager_execution_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spl/tests/tfrecord_to_numpy.py": {
        "tensorflow": {
            "enable_eager_execution_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spl/training.py": {
        "tensorflow": {
            "DEFINE_integer_46": {
                "name": {
                    "value": "seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Seed value.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "experiment_id",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Unique experiment id to restore an existing model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_48": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to data. If not passed, then AMASS_DATA environment variable is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "save_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to experiments. If not passed, then AMASS_EXPERIMENTS environment variable is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_52": {
                "name": {
                    "value": "from_config",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to an existing config.json to start a new experiment.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "print_frequency",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Print/log every this many training steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "test_frequency",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Runs validation every this many training steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_58": {
                "name": {
                    "value": "data_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rotmat",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['rotmat', 'aa', 'quat']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "Which data representation: rotmat (rotation matrix), aa (angle axis), quat (quaternion).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "source_seq_len",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of frames to feed into the encoder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "target_seq_len",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of frames that the decoder has to predict.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size to use during training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "num_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Training epochs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_68": {
                "name": {
                    "value": "early_stopping_tolerance",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "# of waiting steps until the validation loss improves.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_70": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_71": {
                "name": {
                    "value": "learning_rate_decay_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate multiplier. See tf.exponential_decay.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_72": {
                "name": {
                    "value": "learning_rate_decay_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay steps. See tf.exponential_decay.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_73": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "adam",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['adam', 'sgd']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "Optimization function type.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_74": {
                "name": {
                    "value": "grad_clip_norm",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Clip gradients to this norm. If 0, gradient clipping is not applied.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_76": {
                "name": {
                    "value": "model_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rnn",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['rnn', 'seq2seq', 'zero_velocity']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "Which model to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_77": {
                "name": {
                    "value": "input_dropout_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout rate on the inputs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_78": {
                "name": {
                    "value": "input_hidden_layers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "# of hidden layers directly on the inputs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "input_hidden_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of hidden layers directly on the inputs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_80": {
                "name": {
                    "value": "cell_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "lstm",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['lstm', 'gru']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "RNN cell type: gru or lstm.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_81": {
                "name": {
                    "value": "cell_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "RNN cell size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_82": {
                "name": {
                    "value": "cell_layers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of cells in the RNN model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_84": {
                "name": {
                    "value": "loss_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "joint_sum",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['joint_sum', 'all_mean']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "Joint-wise or vanilla mean loss.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_85": {
                "name": {
                    "value": "joint_prediction_layer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "spl",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['spl', 'spl_sparse', 'plain']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to use structured prediction layer (sparse or dense) or a standard dense layer to make predictions.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_88": {
                "name": {
                    "value": "output_hidden_layers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "# of hidden layers in the prediction layer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_89": {
                "name": {
                    "value": "output_hidden_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of hidden layers in the prediction layer. It is not scaled based on joint_prediction_layer. If it is `plain`, then it is recommended to pass a larger value (i.e., 960)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_93": {
                "name": {
                    "value": "architecture",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "tied",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['tied', 'basic']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "If tied, encoder and decoder use the same cell.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_94": {
                "name": {
                    "value": "autoregressive_input",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "sampling_based",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['sampling_based', 'supervised']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "If sampling_based, decoder is trained with its predictions. More robust.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_102": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "experiment_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "glob.glob(os.path.join(save_dir, args.experiment_id + '-*'), recursive=False)[0]",
                            "Subscript"
                        ],
                        [
                            "os.path.normpath(os.path.join(save_dir, experiment_name))",
                            "Call"
                        ]
                    ]
                },
                "latest_filename": {
                    "value": "checkpoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_236": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_282": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GPUOptions_297": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_147": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_349": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "summaries_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.normpath(os.path.join(experiment_dir, 'log'))",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_169": {
                "name": {
                    "value": "training_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_184": {
                "name": {
                    "value": "validation_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_195": {
                "name": {
                    "value": "test_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_207": {
                "name": {
                    "value": "C.TRAIN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_215": {
                "name": {
                    "value": "C.SAMPLE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_223": {
                "name": {
                    "value": "C.TEST",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_298": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_240": {
                "name": {
                    "value": "srnn_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_254": {
                "name": {
                    "value": "SRNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_298": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.9, allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "spl/util/rnn_cell_extensions.py": {
        "tensorflow": {
            "get_variable_104": {
                "variable": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_w_out",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[insize, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.04, maxval=0.04)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "self.b_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_b_out",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.04, maxval=0.04)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_139": {
                "variable": {
                    "value": "self._dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_63": {
                "variable": {
                    "value": "pred_with_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output, tf.zeros_like(input_pose[:, -self._action_len:])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_64": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_with_actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([output, tf.zeros_like(input_pose[:, -self._action_len:])], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[:, :error_signal_start]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_66": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(pred_with_actions, input_pose)",
                            "Call"
                        ],
                        [
                            "tf.add(output, input_pose)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output, self.w_out) + self.b_out",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "input_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[:, :error_signal_start]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_129": {
                "a": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(pred_with_actions, input_pose)",
                            "Call"
                        ],
                        [
                            "tf.add(output, input_pose)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output, self.w_out) + self.b_out",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_223": {
                "variable": {
                    "value": "inputs_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.dropout(inputs_hidden, rate=self.dropout_rate, seed=self.seed, training=self.is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_107": {
                "minval": {
                    "value": "-0.04",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.04",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_110": {
                "minval": {
                    "value": "-0.04",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.04",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "input_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_63": {
                "input": {
                    "value": "input_pose[:, -self._action_len:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "spl/util/tf_utils.py": {
        "tensorflow": {
            "DropoutWrapper_213": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rnn_cell_constructor(size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=dropout_keep_prob[i], output_keep_prob=dropout_keep_prob, state_keep_prob=1, dtype=tf.float32, seed=1)",
                            "Call"
                        ],
                        [
                            "CustomMultiRNNCell(cells=rnn_cells, state_is_tuple=True, intermediate_outputs=intermediate_outputs)",
                            "Call"
                        ],
                        [
                            "rnn_cells[0]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=dropout_keep_prob, output_keep_prob=dropout_keep_prob, state_keep_prob=1, dtype=tf.float32, seed=1)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('dropout_keep_prob', 1.0)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('dropout_keep_prob', 1.0)",
                            "Call"
                        ]
                    ]
                },
                "state_keep_prob": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "input_tensor": {
                    "value": "step_loss_per_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(loss, axis=[1, 2]) / tf.cast(seq_len, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=[1]) / tf.cast(seq_len, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=[1, 2]) / tf.cast(seq_len, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=[1]) / tf.cast(seq_len, tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DropoutWrapper_198": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rnn_cell_constructor(size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=dropout_keep_prob[i], output_keep_prob=dropout_keep_prob, state_keep_prob=1, dtype=tf.float32, seed=1)",
                            "Call"
                        ],
                        [
                            "CustomMultiRNNCell(cells=rnn_cells, state_is_tuple=True, intermediate_outputs=intermediate_outputs)",
                            "Call"
                        ],
                        [
                            "rnn_cells[0]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=dropout_keep_prob, output_keep_prob=dropout_keep_prob, state_keep_prob=1, dtype=tf.float32, seed=1)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "dropout_keep_prob[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs.get('dropout_keep_prob', 1.0)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('dropout_keep_prob', 1.0)",
                            "Call"
                        ]
                    ]
                },
                "state_keep_prob": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "tf.reduce_sum(loss, axis=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_153": {
                "values": {
                    "value": "new_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple(new_states) if self._state_is_tuple else array_ops.concat(new_states, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "tf.reduce_sum(loss, axis=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_75": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "'cell_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_147": {
                "variable": {
                    "value": "cur_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, cur_state_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, cell.state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_155": {
                "values": {
                    "value": "new_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple(new_outputs) if self._state_is_tuple else array_ops.concat(new_outputs, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_77": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_34": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1.0 / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "ClampedLeakyRelu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_37": {
                "t": {
                    "value": "tf.nn.leaky_relu(x, alpha=1.0 / 3.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-3.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_37": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1.0 / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}