{
    "demucs/apply.py": {
        "torch": {
            "BagOfModels_26": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_56": {
                    "variable": {
                        "value": "self.models",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "models",
                        "possible_values": []
                    }
                },
                "self.weights": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "[[1.0 for _ in first.sources] for _ in models]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "pad_106": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensor[..., correct_start:correct_end]",
                    "possible_values": []
                },
                "pad": {
                    "value": "(pad_left, pad_right)",
                    "possible_values": []
                }
            },
            "device_142": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "possible_values": [
                        [
                            "mix.device",
                            "Attribute"
                        ],
                        [
                            "th.device(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "possible_values": []
                },
                "out": {
                    "value": "len(model.sources)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "channels",
                    "possible_values": []
                },
                "layout": {
                    "value": "length",
                    "possible_values": [
                        [
                            "total_length - offset",
                            "BinOp"
                        ],
                        [
                            "min(total_length - offset, length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "mix.device",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "sum_weight",
                    "possible_values": []
                },
                "*size": {
                    "value": "length",
                    "possible_values": [
                        [
                            "total_length - offset",
                            "BinOp"
                        ],
                        [
                            "min(total_length - offset, length)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "mix.device",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.arange(1, segment // 2 + 1, device=device), th.arange(segment - segment // 2, 0, -1, device=device)]",
                    "possible_values": []
                }
            },
            "arange_193": {
                "start": {
                    "value": "1",
                    "possible_values": []
                },
                "end": {
                    "value": "segment // 2 + 1",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "mix.device",
                            "Attribute"
                        ],
                        [
                            "th.device(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_194": {
                "start": {
                    "value": "segment - segment // 2",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "mix.device",
                            "Attribute"
                        ],
                        [
                            "th.device(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/audio.py": {
        "torch": {
            "stack_140": {
                "variable": {
                    "value": "wav",
                    "possible_values": []
                },
                "tensors": {
                    "value": "wavs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "wav",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "possible_values": [
                        [
                            "wav.mean(dim=-2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "wav.expand(*shape, channels, length)",
                            "Call"
                        ],
                        [
                            "wav[..., :channels, :]",
                            "Subscript"
                        ],
                        [
                            "convert_audio_channels(wav, channels)",
                            "Call"
                        ],
                        [
                            "i16_pcm(wav)",
                            "Call"
                        ],
                        [
                            "wav.transpose(0, 1).numpy()",
                            "Call"
                        ],
                        [
                            "wav / max(1.01 * wav.abs().max(), 1)",
                            "BinOp"
                        ],
                        [
                            "wav.clamp(-0.99, 0.99)",
                            "Call"
                        ],
                        [
                            "torch.tanh(wav)",
                            "Call"
                        ],
                        [
                            "prevent_clip(wav, mode=clip)",
                            "Call"
                        ],
                        [
                            "np.fromfile(filename, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav)",
                            "Call"
                        ],
                        [
                            "wav.view(-1, self.channels()).t()",
                            "Call"
                        ],
                        [
                            "torch.stack(wavs, dim=0)",
                            "Call"
                        ],
                        [
                            "convert_audio_channels(wav, channels)",
                            "Call"
                        ],
                        [
                            "wav[0]",
                            "Subscript"
                        ],
                        [
                            "wav[..., :target_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_230": {
                "variable": {
                    "value": "wav",
                    "possible_values": []
                },
                "input": {
                    "value": "wav",
                    "possible_values": [
                        [
                            "wav.mean(dim=-2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "wav.expand(*shape, channels, length)",
                            "Call"
                        ],
                        [
                            "wav[..., :channels, :]",
                            "Subscript"
                        ],
                        [
                            "convert_audio_channels(wav, channels)",
                            "Call"
                        ],
                        [
                            "i16_pcm(wav)",
                            "Call"
                        ],
                        [
                            "wav.transpose(0, 1).numpy()",
                            "Call"
                        ],
                        [
                            "wav / max(1.01 * wav.abs().max(), 1)",
                            "BinOp"
                        ],
                        [
                            "wav.clamp(-0.99, 0.99)",
                            "Call"
                        ],
                        [
                            "torch.tanh(wav)",
                            "Call"
                        ],
                        [
                            "prevent_clip(wav, mode=clip)",
                            "Call"
                        ],
                        [
                            "np.fromfile(filename, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav)",
                            "Call"
                        ],
                        [
                            "wav.view(-1, self.channels()).t()",
                            "Call"
                        ],
                        [
                            "torch.stack(wavs, dim=0)",
                            "Call"
                        ],
                        [
                            "convert_audio_channels(wav, channels)",
                            "Call"
                        ],
                        [
                            "wav[0]",
                            "Subscript"
                        ],
                        [
                            "wav[..., :target_size]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "demucs/demucs.py": {
        "torch": {
            "BLSTM_19": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.max_steps": {
                    "value": "max_steps",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "LSTM_29": {
                    "variable": {
                        "value": "self.lstm",
                        "possible_values": []
                    },
                    "bidirectional": {
                        "value": "True",
                        "possible_values": []
                    },
                    "num_layers": {
                        "value": "layers",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "hidden_size": {
                        "value": "dim",
                        "possible_values": []
                    },
                    "input_size": {
                        "value": "dim",
                        "possible_values": []
                    }
                },
                "Linear_30": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "2 * dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "dim",
                        "possible_values": []
                    }
                },
                "self.skip": {
                    "value": "skip",
                    "possible_values": [
                        [
                            "saved.pop(-1)",
                            "Call"
                        ],
                        [
                            "center_trim(skip, x)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerScale_85": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_91": {
                    "variable": {
                        "value": "self.scale",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(channels, requires_grad=True)",
                        "possible_values": []
                    }
                },
                "self.scale.data[:]": {
                    "value": "init",
                    "possible_values": []
                }
            },
            "DConv_98": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.compress": {
                    "value": "compress",
                    "possible_values": []
                },
                "ModuleList_145": {
                    "variable": {
                        "value": "self.layers",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[]",
                        "possible_values": []
                    }
                }
            },
            "LocalState_169": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.heads": {
                    "value": "heads",
                    "possible_values": [
                        [
                            "self.heads",
                            "Attribute"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.nfreqs": {
                    "value": "nfreqs",
                    "possible_values": []
                },
                "self.ndecay": {
                    "value": "ndecay",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv1d_181": {
                    "variable": {
                        "value": "self.content",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "channels",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "int(growth * channels)",
                                "Call"
                            ],
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "channels",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "int(growth * channels)",
                                "Call"
                            ],
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv1d_182": {
                    "variable": {
                        "value": "self.query",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "channels",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "int(growth * channels)",
                                "Call"
                            ],
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "channels",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "int(growth * channels)",
                                "Call"
                            ],
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv1d_183": {
                    "variable": {
                        "value": "self.key",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "channels",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "int(growth * channels)",
                                "Call"
                            ],
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "channels",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "int(growth * channels)",
                                "Call"
                            ],
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv1d_192": {
                    "variable": {
                        "value": "self.proj",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "channels + heads * nfreqs",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "channels",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ],
                            [
                                "int(growth * channels)",
                                "Call"
                            ],
                            [
                                "64",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "Demucs_231": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.audio_channels": {
                    "value": "audio_channels",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sources": {
                    "value": "sources",
                    "possible_values": []
                },
                "self.kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.context": {
                    "value": "context",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "width // 2",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.depth": {
                    "value": "depth",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.resample": {
                    "value": "resample",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.normalize": {
                    "value": "normalize",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.samplerate": {
                    "value": "samplerate",
                    "possible_values": [
                        [
                            "44100",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.segment": {
                    "value": "segment",
                    "possible_values": [
                        [
                            "4 * 10",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_320": {
                    "variable": {
                        "value": "self.encoder",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_321": {
                    "variable": {
                        "value": "self.decoder",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_322": {
                    "variable": {
                        "value": "self.skip_scales",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "in_channels": {
                    "value": "audio_channels",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "audio_channels",
                            "Name"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                }
            },
            "arange_197": {
                "variable": {
                    "value": "indexes",
                    "possible_values": []
                },
                "start": {
                    "value": "T",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "possible_values": []
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "dots",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhct,bhcs->bhts",
                    "possible_values": []
                },
                "*operands": {
                    "value": "keys",
                    "possible_values": [
                        [
                            "self.key(x).view(B, heads, -1, T)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_220": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "dots",
                    "possible_values": [
                        [
                            "torch.einsum('bhct,bhcs->bhts', keys, queries)",
                            "Call"
                        ],
                        [
                            "dots + torch.einsum('fts,bhfs->bhts', decay_kernel, decay_q)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "einsum_223": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhts,bhct->bhcs",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.softmax(dots, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_425": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "frames.permute(0, 2, 1, 3).reshape(-1, C, width)",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)[0]",
                            "Subscript"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "x + layer(x)",
                            "BinOp"
                        ],
                        [
                            "mix",
                            "Name"
                        ],
                        [
                            "(x - mean) / (1e-05 + std)",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (delta // 2, delta - delta // 2))",
                            "Call"
                        ],
                        [
                            "julius.resample_frac(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "encode(x)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "decode(x + skip)",
                            "Call"
                        ],
                        [
                            "julius.resample_frac(x, 2, 1)",
                            "Call"
                        ],
                        [
                            "x * std + mean",
                            "BinOp"
                        ],
                        [
                            "center_trim(x, length)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), len(self.sources), self.audio_channels, x.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(delta // 2, delta - delta // 2)",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, -1)",
                            "Call"
                        ],
                        [
                            "out[..., :T]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mods",
                    "possible_values": []
                }
            },
            "Conv1d_185": {
                "variable": {
                    "value": "self.query_freqs",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "heads * nfreqs",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv1d_187": {
                "variable": {
                    "value": "self.query_decay",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "heads * ndecay",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_207": {
                "variable": {
                    "value": "periods",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "possible_values": []
                },
                "end": {
                    "value": "self.nfreqs + 1",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "possible_values": []
                }
            },
            "cos_208": {
                "variable": {
                    "value": "freq_kernel",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * math.pi * delta / periods.view(-1, 1, 1)",
                    "possible_values": []
                }
            },
            "arange_212": {
                "variable": {
                    "value": "decays",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "possible_values": []
                },
                "end": {
                    "value": "self.ndecay + 1",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "possible_values": []
                }
            },
            "einsum_225": {
                "variable": {
                    "value": "time_sig",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhts,fts->bhfs",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.softmax(dots, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_226": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result, time_sig]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "GLU_325": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_328": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Identity_133": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "einsum_210": {
                "equation": {
                    "value": "fts,bhfs->bhts",
                    "possible_values": []
                },
                "*operands": {
                    "value": "freq_kernel",
                    "possible_values": [
                        [
                            "torch.cos(2 * math.pi * delta / periods.view(-1, 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_216": {
                "equation": {
                    "value": "fts,bhfs->bhts",
                    "possible_values": []
                },
                "*operands": {
                    "value": "decay_kernel",
                    "possible_values": [
                        [
                            "-decays.view(-1, 1, 1) * delta.abs() / self.ndecay ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_219": {
                "n": {
                    "value": "T",
                    "possible_values": []
                },
                "device": {
                    "value": "dots.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                }
            },
            "GroupNorm_135": {
                "num_groups": {
                    "value": "1",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "d",
                    "possible_values": [
                        [
                            "range(self.depth)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_150": {
                "in_channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "int(channels / compress)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "2 ** d if dilate else 1",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "dilation * (kernel // 2)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv1d_152": {
                "in_channels": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "int(channels / compress)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GLU_153": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_214": {
                "input": {
                    "value": "decay_q",
                    "possible_values": [
                        [
                            "self.query_decay(x).view(B, heads, -1, T)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(decay_q) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Identity_338": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1d_344": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "audio_channels",
                            "Name"
                        ],
                        [
                            "channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "width // 2",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_357": {
                "*args": {
                    "value": "*encode",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_371": {
                "in_channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "len(self.sources) * audio_channels",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "width // 2",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "dilation * (kernel // 2)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_375": {
                "*args": {
                    "value": "*decode",
                    "possible_values": []
                }
            },
            "GroupNorm_340": {
                "num_groups": {
                    "value": "norm_groups",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "d",
                    "possible_values": [
                        [
                            "range(self.depth)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_355": {
                "in_channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_scale * channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv1d_366": {
                "in_channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_scale * channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 * context + 1",
                    "possible_values": []
                },
                "padding": {
                    "value": "context",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "demucs/distrib.py": {
        "torch": {
            "tensor_39": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "list(metrics) + [1]",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "empty_64": {
                "variable": {
                    "value": "size",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "broadcast_68": {
                "tensor": {
                    "value": "size",
                    "possible_values": [
                        [
                            "torch.empty(1, device='cuda', dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "src",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "buffer",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.frombuffer(dump, dtype=np.uint8).copy()",
                    "possible_values": []
                }
            },
            "empty_74": {
                "variable": {
                    "value": "buffer",
                    "possible_values": []
                },
                "*size": {
                    "value": "size[0].item()",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "broadcast_75": {
                "tensor": {
                    "value": "buffer",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.frombuffer(dump, dtype=np.uint8).copy()).cuda()",
                            "Call"
                        ],
                        [
                            "torch.empty(size[0].item(), device='cuda', dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "src",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DistributedSampler_94": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "Subset(dataset, list(range(rank, len(dataset), world_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_99": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "Subset(dataset, list(range(rank, len(dataset), world_size)))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(rank, len(dataset), world_size))",
                    "possible_values": []
                }
            },
            "is_initialized_26": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_49": {
                "module": {
                    "value": "model",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[torch.cuda.current_device()]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "torch.cuda.current_device()",
                    "possible_values": []
                }
            },
            "current_device_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_device_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/ema.py": {
        "torch": {}
    },
    "demucs/evaluate.py": {
        "torch": {
            "sum_38": {
                "variable": {
                    "value": "num",
                    "possible_values": []
                },
                "input": {
                    "value": "th.square(references)",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "den",
                    "possible_values": []
                },
                "input": {
                    "value": "th.square(references - estimates)",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "square_38": {
                "input": {
                    "value": "references",
                    "possible_values": [
                        [
                            "references.transpose(1, 2).double()",
                            "Call"
                        ],
                        [
                            "references.numpy()",
                            "Call"
                        ],
                        [
                            "th.stack([th.from_numpy(track.targets[name].audio).t() for name in model.sources])",
                            "Call"
                        ],
                        [
                            "references[:, None]",
                            "Subscript"
                        ],
                        [
                            "references.to(eval_device)",
                            "Call"
                        ],
                        [
                            "convert_audio(references, src_rate, model.samplerate, model.audio_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_39": {
                "input": {
                    "value": "references - estimates",
                    "possible_values": []
                }
            },
            "log10_42": {
                "input": {
                    "value": "num / den",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "mix",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "track.audio",
                    "possible_values": []
                }
            },
            "t_103": {
                "variable": {
                    "value": "mix",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "references",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.from_numpy(track.targets[name].audio).t() for name in model.sources]",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "ndarray": {
                    "value": "track.targets[name].audio",
                    "possible_values": []
                }
            },
            "t_117": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/hdemucs.py": {
        "torch": {
            "ScaledEmbedding_22": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Embedding_30": {
                    "variable": {
                        "value": "self.embedding",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "num_embeddings",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "embedding_dim",
                        "possible_values": []
                    }
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "HEncLayer_48": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.freq": {
                    "value": "freq",
                    "possible_values": [
                        [
                            "freqs > 1",
                            "Compare"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "[kernel_size, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size, 1]",
                            "List"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "[stride, 1]",
                            "List"
                        ],
                        [
                            "[stride, 1]",
                            "List"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.empty": {
                    "value": "empty",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm": {
                    "value": "norm",
                    "possible_values": [
                        [
                            "index >= norm_starts",
                            "Compare"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.pad": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "kernel_size // 4",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "[pad, 0]",
                            "List"
                        ],
                        [
                            "layer.kernel_size // 4",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 4",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "hl // 2 * 3",
                            "BinOp"
                        ],
                        [
                            "hl // 2 * 3",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiWrap_139": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.split_ratios": {
                    "value": "split_ratios",
                    "possible_values": []
                },
                "ModuleList_156": {
                    "variable": {
                        "value": "self.layers",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "HDecLayer_235": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.pad": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "kernel_size // 4",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "[pad, 0]",
                            "List"
                        ],
                        [
                            "layer.kernel_size // 4",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 4",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "hl // 2 * 3",
                            "BinOp"
                        ],
                        [
                            "hl // 2 * 3",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.last": {
                    "value": "last",
                    "possible_values": [
                        [
                            "layer.last",
                            "Attribute"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.freq": {
                    "value": "freq",
                    "possible_values": [
                        [
                            "freqs > 1",
                            "Compare"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.chin": {
                    "value": "chin",
                    "possible_values": [
                        [
                            "audio_channels",
                            "Name"
                        ],
                        [
                            "self.audio_channels * len(self.sources)",
                            "BinOp"
                        ],
                        [
                            "chout",
                            "Name"
                        ]
                    ]
                },
                "self.empty": {
                    "value": "empty",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "[stride, 1]",
                            "List"
                        ],
                        [
                            "[stride, 1]",
                            "List"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "[kernel_size, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size, 1]",
                            "List"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm": {
                    "value": "norm",
                    "possible_values": [
                        [
                            "index >= norm_starts",
                            "Compare"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.context_freq": {
                    "value": "context_freq",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "HDemucs_317": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.cac": {
                    "value": "cac",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.wiener_residual": {
                    "value": "wiener_residual",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.audio_channels": {
                    "value": "audio_channels",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sources": {
                    "value": "sources",
                    "possible_values": []
                },
                "self.kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "[kernel_size, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size, 1]",
                            "List"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.context": {
                    "value": "context",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "[stride, 1]",
                            "List"
                        ],
                        [
                            "[stride, 1]",
                            "List"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.depth": {
                    "value": "depth",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.samplerate": {
                    "value": "samplerate",
                    "possible_values": [
                        [
                            "44100",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.segment": {
                    "value": "segment",
                    "possible_values": [
                        [
                            "4 * 10",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.nfft": {
                    "value": "nfft",
                    "possible_values": [
                        [
                            "self.nfft",
                            "Attribute"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.wiener_iters": {
                    "value": "wiener_iters",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.end_iters": {
                    "value": "end_iters",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.hybrid": {
                    "value": "hybrid",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.hybrid_old": {
                    "value": "hybrid_old",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_458": {
                    "variable": {
                        "value": "self.encoder",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_459": {
                    "variable": {
                        "value": "self.decoder",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "chin": {
                    "value": "audio_channels",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "chin_z": {
                    "value": "chin",
                    "possible_values": [
                        [
                            "audio_channels",
                            "Name"
                        ],
                        [
                            "self.audio_channels * len(self.sources)",
                            "BinOp"
                        ],
                        [
                            "chout",
                            "Name"
                        ]
                    ]
                },
                "chout_z": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gelu_123": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(y)",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pad_595": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "self.norm2(self.rewrite(y))",
                            "Call"
                        ],
                        [
                            "F.glu(z, dim=1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "self.norm2(self.conv_tr(y))",
                            "Call"
                        ],
                        [
                            "z[..., self.pad:self.pad + length]",
                            "Subscript"
                        ],
                        [
                            "z[..., self.pad:-self.pad, :]",
                            "Subscript"
                        ],
                        [
                            "F.gelu(z)",
                            "Call"
                        ],
                        [
                            "spectro(x, nfft, hl)[..., :-1, :]",
                            "Subscript"
                        ],
                        [
                            "z[..., 2:2 + le]",
                            "Subscript"
                        ],
                        [
                            "F.pad(z, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "F.pad(z, (2, 2))",
                            "Call"
                        ],
                        [
                            "z[:, None]",
                            "Subscript"
                        ],
                        [
                            "self._spec(mix)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "possible_values": []
                }
            },
            "view_as_real_648": {
                "variable": {
                    "value": "mix_stft",
                    "possible_values": []
                },
                "input": {
                    "value": "mix_stft.permute(0, 3, 2, 1)",
                    "possible_values": []
                }
            },
            "view_as_complex_661": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(outs, 0)",
                    "possible_values": []
                }
            },
            "zeros_like_721": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(B, -1, T)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, self.stride - le % self.stride))",
                            "Call"
                        ],
                        [
                            "x.view(B, self.chin, -1, T)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]))",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length)",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length=le)",
                            "Call"
                        ],
                        [
                            "x[..., pad:pad + length]",
                            "Subscript"
                        ],
                        [
                            "x[..., :length]",
                            "Subscript"
                        ],
                        [
                            "mix",
                            "Name"
                        ],
                        [
                            "mag",
                            "Name"
                        ],
                        [
                            "(x - mean) / (1e-05 + std)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "encode(x, inject)",
                            "Call"
                        ],
                        [
                            "x + self.freq_emb_scale * emb",
                            "BinOp"
                        ],
                        [
                            "x.view(B, S, -1, Fq, T)",
                            "Call"
                        ],
                        [
                            "x * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "self._ispec(zout, length)",
                            "Call"
                        ],
                        [
                            "xt + x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cumsum_32": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding.weight.data",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "glu_133": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "self.norm2(self.rewrite(y))",
                            "Call"
                        ],
                        [
                            "F.glu(z, dim=1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "self.norm2(self.conv_tr(y))",
                            "Call"
                        ],
                        [
                            "z[..., self.pad:self.pad + length]",
                            "Subscript"
                        ],
                        [
                            "z[..., self.pad:-self.pad, :]",
                            "Subscript"
                        ],
                        [
                            "F.gelu(z)",
                            "Call"
                        ],
                        [
                            "spectro(x, nfft, hl)[..., :-1, :]",
                            "Subscript"
                        ],
                        [
                            "z[..., 2:2 + le]",
                            "Subscript"
                        ],
                        [
                            "F.pad(z, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "F.pad(z, (2, 2))",
                            "Call"
                        ],
                        [
                            "z[:, None]",
                            "Subscript"
                        ],
                        [
                            "self._spec(mix)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gelu_228": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.embedding(x) * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "F.gelu(out)",
                            "Call"
                        ],
                        [
                            "out[:, :, layer.stride:]",
                            "Subscript"
                        ],
                        [
                            "out[:, :, :-layer.stride // 2, :]",
                            "Subscript"
                        ],
                        [
                            "out[:, :, layer.stride // 2:, :]",
                            "Subscript"
                        ],
                        [
                            "m.view(B, S, -1, 2, Fr, T).permute(0, 1, 2, 4, 5, 3)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(out.contiguous())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.view_as_complex(torch.stack(outs, 0))",
                            "Call"
                        ],
                        [
                            "out.permute(0, 4, 3, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "out[:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gelu_313": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "self.norm2(self.rewrite(y))",
                            "Call"
                        ],
                        [
                            "F.glu(z, dim=1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "self.norm2(self.conv_tr(y))",
                            "Call"
                        ],
                        [
                            "z[..., self.pad:self.pad + length]",
                            "Subscript"
                        ],
                        [
                            "z[..., self.pad:-self.pad, :]",
                            "Subscript"
                        ],
                        [
                            "F.gelu(z)",
                            "Call"
                        ],
                        [
                            "spectro(x, nfft, hl)[..., :-1, :]",
                            "Subscript"
                        ],
                        [
                            "z[..., 2:2 + le]",
                            "Subscript"
                        ],
                        [
                            "F.pad(z, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "F.pad(z, (2, 2))",
                            "Call"
                        ],
                        [
                            "z[:, None]",
                            "Subscript"
                        ],
                        [
                            "self._spec(mix)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_462": {
                "variable": {
                    "value": "self.tencoder",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_463": {
                "variable": {
                    "value": "self.tdecoder",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "pad_597": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "self.norm2(self.rewrite(y))",
                            "Call"
                        ],
                        [
                            "F.glu(z, dim=1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "self.norm2(self.conv_tr(y))",
                            "Call"
                        ],
                        [
                            "z[..., self.pad:self.pad + length]",
                            "Subscript"
                        ],
                        [
                            "z[..., self.pad:-self.pad, :]",
                            "Subscript"
                        ],
                        [
                            "F.gelu(z)",
                            "Call"
                        ],
                        [
                            "spectro(x, nfft, hl)[..., :-1, :]",
                            "Subscript"
                        ],
                        [
                            "z[..., 2:2 + le]",
                            "Subscript"
                        ],
                        [
                            "F.pad(z, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "F.pad(z, (2, 2))",
                            "Call"
                        ],
                        [
                            "z[:, None]",
                            "Subscript"
                        ],
                        [
                            "self._spec(mix)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "view_as_real_617": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "self.norm2(self.rewrite(y))",
                            "Call"
                        ],
                        [
                            "F.glu(z, dim=1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "self.norm2(self.conv_tr(y))",
                            "Call"
                        ],
                        [
                            "z[..., self.pad:self.pad + length]",
                            "Subscript"
                        ],
                        [
                            "z[..., self.pad:-self.pad, :]",
                            "Subscript"
                        ],
                        [
                            "F.gelu(z)",
                            "Call"
                        ],
                        [
                            "spectro(x, nfft, hl)[..., :-1, :]",
                            "Subscript"
                        ],
                        [
                            "z[..., 2:2 + le]",
                            "Subscript"
                        ],
                        [
                            "F.pad(z, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "F.pad(z, (2, 2))",
                            "Call"
                        ],
                        [
                            "z[:, None]",
                            "Subscript"
                        ],
                        [
                            "self._spec(mix)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_617": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "view_as_complex_630": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out.contiguous()",
                    "possible_values": []
                }
            },
            "zeros_like_723": {
                "variable": {
                    "value": "xt",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(B, -1, T)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, self.stride - le % self.stride))",
                            "Call"
                        ],
                        [
                            "x.view(B, self.chin, -1, T)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]))",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length)",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length=le)",
                            "Call"
                        ],
                        [
                            "x[..., pad:pad + length]",
                            "Subscript"
                        ],
                        [
                            "x[..., :length]",
                            "Subscript"
                        ],
                        [
                            "mix",
                            "Name"
                        ],
                        [
                            "mag",
                            "Name"
                        ],
                        [
                            "(x - mean) / (1e-05 + std)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "encode(x, inject)",
                            "Call"
                        ],
                        [
                            "x + self.freq_emb_scale * emb",
                            "BinOp"
                        ],
                        [
                            "x.view(B, S, -1, Fq, T)",
                            "Call"
                        ],
                        [
                            "x * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "self._ispec(zout, length)",
                            "Call"
                        ],
                        [
                            "xt + x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Identity_70": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "pad_114": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(B, -1, T)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, self.stride - le % self.stride))",
                            "Call"
                        ],
                        [
                            "x.view(B, self.chin, -1, T)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]))",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length)",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length=le)",
                            "Call"
                        ],
                        [
                            "x[..., pad:pad + length]",
                            "Subscript"
                        ],
                        [
                            "x[..., :length]",
                            "Subscript"
                        ],
                        [
                            "mix",
                            "Name"
                        ],
                        [
                            "mag",
                            "Name"
                        ],
                        [
                            "(x - mean) / (1e-05 + std)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "encode(x, inject)",
                            "Call"
                        ],
                        [
                            "x + self.freq_emb_scale * emb",
                            "BinOp"
                        ],
                        [
                            "x.view(B, S, -1, Fq, T)",
                            "Call"
                        ],
                        [
                            "x * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "self._ispec(zout, length)",
                            "Call"
                        ],
                        [
                            "xt + x",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.stride - le % self.stride)",
                    "possible_values": []
                }
            },
            "Identity_243": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "glu_292": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(self.rewrite(x))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "pad_583": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(B, -1, T)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, self.stride - le % self.stride))",
                            "Call"
                        ],
                        [
                            "x.view(B, self.chin, -1, T)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]))",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length)",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length=le)",
                            "Call"
                        ],
                        [
                            "x[..., pad:pad + length]",
                            "Subscript"
                        ],
                        [
                            "x[..., :length]",
                            "Subscript"
                        ],
                        [
                            "mix",
                            "Name"
                        ],
                        [
                            "mag",
                            "Name"
                        ],
                        [
                            "(x - mean) / (1e-05 + std)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "encode(x, inject)",
                            "Call"
                        ],
                        [
                            "x + self.freq_emb_scale * emb",
                            "BinOp"
                        ],
                        [
                            "x.view(B, S, -1, Fq, T)",
                            "Call"
                        ],
                        [
                            "x * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "self._ispec(zout, length)",
                            "Call"
                        ],
                        [
                            "xt + x",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad, pad + le * hl - x.shape[-1])",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "possible_values": []
                }
            },
            "pad_585": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(B, -1, T)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, self.stride - le % self.stride))",
                            "Call"
                        ],
                        [
                            "x.view(B, self.chin, -1, T)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad, pad + le * hl - x.shape[-1]))",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length)",
                            "Call"
                        ],
                        [
                            "ispectro(z, hl, length=le)",
                            "Call"
                        ],
                        [
                            "x[..., pad:pad + length]",
                            "Subscript"
                        ],
                        [
                            "x[..., :length]",
                            "Subscript"
                        ],
                        [
                            "mix",
                            "Name"
                        ],
                        [
                            "mag",
                            "Name"
                        ],
                        [
                            "(x - mean) / (1e-05 + std)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "encode(x, inject)",
                            "Call"
                        ],
                        [
                            "x + self.freq_emb_scale * emb",
                            "BinOp"
                        ],
                        [
                            "x.view(B, S, -1, Fq, T)",
                            "Call"
                        ],
                        [
                            "x * std[:, None] + mean[:, None]",
                            "BinOp"
                        ],
                        [
                            "self._ispec(zout, length)",
                            "Call"
                        ],
                        [
                            "xt + x",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad, pad + le * hl - x.shape[-1])",
                    "possible_values": []
                }
            },
            "stack_661": {
                "tensors": {
                    "value": "outs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "arange_715": {
                "variable": {
                    "value": "frs",
                    "possible_values": []
                },
                "start": {
                    "value": "x.shape[-2]",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            },
            "GroupNorm_72": {
                "num_groups": {
                    "value": "norm_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "d",
                    "possible_values": []
                }
            },
            "pad_199": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.gelu(self.norm1(y))",
                            "Call"
                        ],
                        [
                            "y + inject",
                            "BinOp"
                        ],
                        [
                            "y.permute(0, 2, 1, 3).reshape(-1, C, T)",
                            "Call"
                        ],
                        [
                            "self.dconv(y)",
                            "Call"
                        ],
                        [
                            "y.view(B, Fr, C, T).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x[:, :, start:limit]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, start:limit, :]",
                            "Subscript"
                        ],
                        [
                            "F.pad(y, (0, 0, pad, 0))",
                            "Call"
                        ],
                        [
                            "F.pad(y, (0, 0, 0, pad))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.glu(self.norm1(self.rewrite(x)), dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "y.permute(0, 2, 1, 3).reshape(-1, C, T)",
                            "Call"
                        ],
                        [
                            "self.dconv(y)",
                            "Call"
                        ],
                        [
                            "y.view(B, Fr, C, T).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, pad, 0)",
                    "possible_values": []
                }
            },
            "pad_201": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.gelu(self.norm1(y))",
                            "Call"
                        ],
                        [
                            "y + inject",
                            "BinOp"
                        ],
                        [
                            "y.permute(0, 2, 1, 3).reshape(-1, C, T)",
                            "Call"
                        ],
                        [
                            "self.dconv(y)",
                            "Call"
                        ],
                        [
                            "y.view(B, Fr, C, T).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x[:, :, start:limit]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, start:limit, :]",
                            "Subscript"
                        ],
                        [
                            "F.pad(y, (0, 0, pad, 0))",
                            "Call"
                        ],
                        [
                            "F.pad(y, (0, 0, 0, pad))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.glu(self.norm1(self.rewrite(x)), dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "y.permute(0, 2, 1, 3).reshape(-1, C, T)",
                            "Call"
                        ],
                        [
                            "self.dconv(y)",
                            "Call"
                        ],
                        [
                            "y.view(B, Fr, C, T).permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, pad)",
                    "possible_values": []
                }
            },
            "GroupNorm_245": {
                "num_groups": {
                    "value": "norm_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "d",
                    "possible_values": []
                }
            },
            "cat_660": {
                "tensors": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.embedding(x) * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "F.gelu(out)",
                            "Call"
                        ],
                        [
                            "out[:, :, layer.stride:]",
                            "Subscript"
                        ],
                        [
                            "out[:, :, :-layer.stride // 2, :]",
                            "Subscript"
                        ],
                        [
                            "out[:, :, layer.stride // 2:, :]",
                            "Subscript"
                        ],
                        [
                            "m.view(B, S, -1, 2, Fr, T).permute(0, 1, 2, 4, 5, 3)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(out.contiguous())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.view_as_complex(torch.stack(outs, 0))",
                            "Call"
                        ],
                        [
                            "out.permute(0, 4, 3, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "out[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "arange_34": {
                "start": {
                    "value": "1",
                    "possible_values": []
                },
                "end": {
                    "value": "num_embeddings + 1",
                    "possible_values": []
                }
            },
            "sqrt_34": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/repo.py": {
        "torch": {}
    },
    "demucs/separate.py": {
        "torch": {
            "zeros_like_178": {
                "variable": {
                    "value": "other_stem",
                    "possible_values": []
                },
                "input": {
                    "value": "sources[0]",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/solver.py": {
        "torch": {
            "Sequential_61": {
                "variable": {
                    "value": "self.augment",
                    "possible_values": []
                },
                "*args": {
                    "value": "*augments",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "package",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint_file",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "data": {
                    "value": "args.weights",
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "package",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "states.serialize_model(self.model, self.args)",
                            "Call"
                        ],
                        [
                            "torch.load(self.checkpoint_file, 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.load(cf, 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp",
                    "possible_values": []
                }
            },
            "l1_loss_324": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "estimate",
                    "possible_values": [
                        [
                            "apply_model(self.model, mix, split=self.args.test.split, overlap=0)",
                            "Call"
                        ],
                        [
                            "self.dmodel(mix)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sources",
                    "possible_values": [
                        [
                            "sources.to(self.device)",
                            "Call"
                        ],
                        [
                            "self.augment(sources)",
                            "Call"
                        ],
                        [
                            "sources[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "self.model.transform_target(mix, sources)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "save_93": {
                "obj": {
                    "value": "package",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "states.serialize_model(self.model, self.args)",
                            "Call"
                        ],
                        [
                            "torch.load(self.checkpoint_file, 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.load(cf, 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "package",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "states.serialize_model(self.model, self.args)",
                            "Call"
                        ],
                        [
                            "torch.load(self.checkpoint_file, 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.load(cf, 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp",
                    "possible_values": []
                }
            },
            "load_125": {
                "variable": {
                    "value": "package",
                    "possible_values": []
                },
                "f": {
                    "value": "cf",
                    "possible_values": [
                        [
                            "root / str(self.args.continue_from) / name",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mse_loss_328": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "estimate",
                    "possible_values": [
                        [
                            "apply_model(self.model, mix, split=self.args.test.split, overlap=0)",
                            "Call"
                        ],
                        [
                            "self.dmodel(mix)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sources",
                    "possible_values": [
                        [
                            "sources.to(self.device)",
                            "Call"
                        ],
                        [
                            "self.augment(sources)",
                            "Call"
                        ],
                        [
                            "sources[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "self.model.transform_target(mix, sources)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__378": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.optim.clip_grad",
                    "possible_values": []
                }
            },
            "no_grad_277": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/spec.py": {
        "torch": {
            "stft_14": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.reshape(-1, length)",
                            "Call"
                        ],
                        [
                            "th.istft(z, n_fft, hop_length, window=th.hann_window(win_length).to(z.real), win_length=win_length, normalized=True, length=length, center=True)",
                            "Call"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "n_fft * (1 + pad)",
                    "possible_values": []
                },
                "hop_length": {
                    "value": "hop_length or n_fft // 4",
                    "possible_values": []
                },
                "window": {
                    "value": "th.hann_window(n_fft).to(x)",
                    "possible_values": []
                },
                "win_length": {
                    "value": "n_fft",
                    "possible_values": [
                        [
                            "2 * freqs - 2",
                            "BinOp"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "normalized": {
                    "value": "True",
                    "possible_values": []
                },
                "center": {
                    "value": "True",
                    "possible_values": []
                },
                "return_complex": {
                    "value": "True",
                    "possible_values": []
                },
                "pad_mode": {
                    "value": "reflect",
                    "possible_values": []
                }
            },
            "istft_32": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "th.stft(x, n_fft * (1 + pad), hop_length or n_fft // 4, window=th.hann_window(n_fft).to(x), win_length=n_fft, normalized=True, center=True, return_complex=True, pad_mode='reflect')",
                            "Call"
                        ],
                        [
                            "z.view(-1, freqs, frames)",
                            "Call"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "n_fft",
                    "possible_values": [
                        [
                            "2 * freqs - 2",
                            "BinOp"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "hop_length": {
                    "value": "hop_length",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "window": {
                    "value": "th.hann_window(win_length).to(z.real)",
                    "possible_values": []
                },
                "win_length": {
                    "value": "win_length",
                    "possible_values": [
                        [
                            "n_fft // (1 + pad)",
                            "BinOp"
                        ]
                    ]
                },
                "normalized": {
                    "value": "True",
                    "possible_values": []
                },
                "length": {
                    "value": "length",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "center": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "hann_window_17": {
                "window_length": {
                    "value": "n_fft",
                    "possible_values": [
                        [
                            "2 * freqs - 2",
                            "BinOp"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "hann_window_35": {
                "window_length": {
                    "value": "win_length",
                    "possible_values": [
                        [
                            "n_fft // (1 + pad)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "demucs/states.py": {
        "torch": {
            "save_99": {
                "obj": {
                    "value": "content",
                    "possible_values": []
                },
                "f": {
                    "value": "buf",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_46": {
                "variable": {
                    "value": "package",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": [
                        [
                            "path_or_package",
                            "Name"
                        ],
                        [
                            "path.parent / (path.stem + '-' + sig + path.suffix)",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/svd.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "m.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "bs",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "m.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "m.dtype",
                    "possible_values": []
                }
            },
            "pow_72": {
                "variable": {
                    "value": "estimate",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "max_72": {
                "variable": {
                    "value": "estimate",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "pow_81": {
                "variable": {
                    "value": "estimate",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "svd_72": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "p.view(len(p), -1)",
                            "Call"
                        ],
                        [
                            "p.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "p.view(len(p), -1)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "svd_lowrank_81": {
                "A": {
                    "value": "p",
                    "possible_values": [
                        [
                            "p.view(len(p), -1)",
                            "Call"
                        ],
                        [
                            "p.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "p.view(len(p), -1)",
                            "Call"
                        ]
                    ]
                },
                "q": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "m.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "niter": {
                    "value": "niters",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "demucs/utils.py": {
        "torch": {
            "pad_29": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "possible_values": [
                        [
                            "F.pad(a, (0, tgt_length - length))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, tgt_length - length)",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/wav.py": {
        "torch": {
            "stack_165": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "tensors": {
                    "value": "wavs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_172": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "input": {
                    "value": "example",
                    "possible_values": [
                        [
                            "th.stack(wavs)",
                            "Call"
                        ],
                        [
                            "julius.resample_frac(example, meta['samplerate'], self.samplerate)",
                            "Call"
                        ],
                        [
                            "(example - meta['mean']) / meta['std']",
                            "BinOp"
                        ],
                        [
                            "example[..., :length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(example, (0, length - example.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, length - example.shape[-1])",
                    "possible_values": []
                }
            }
        }
    },
    "diffq/base.py": {
        "torch": {
            "tensor_287": {
                "variable": {
                    "value": "total",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "save_320": {
                "obj": {
                    "value": "self.get_quantized_state(packed=False)",
                    "possible_values": []
                },
                "f": {
                    "value": "out",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "diffq/diffq.py": {
        "torch": {
            "logit_126": {
                "variable": {
                    "value": "logit",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(float(t))",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "logit",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((nparam,), logit, device=param.device)",
                    "possible_values": []
                }
            },
            "empty_301": {
                "variable": {
                    "value": "levels",
                    "possible_values": []
                },
                "*size": {
                    "value": "qparam.logit.numel()",
                    "possible_values": []
                },
                "out": {
                    "value": "self.group_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.short",
                    "possible_values": []
                },
                "device": {
                    "value": "qparam.param.device",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "possible_values": [
                        [
                            "torch.logit(torch.tensor(float(t)))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(torch.full((nparam,), logit, device=param.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_108": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "possible_values": [
                        [
                            "torch.logit(torch.tensor(float(t)))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(torch.full((nparam,), logit, device=param.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "log2_101": {
                "input": {
                    "value": "1 + 1 / self._get_noise_scale(logit)",
                    "possible_values": []
                }
            },
            "exp_109": {
                "input": {
                    "value": "t * math.log(self._min_noise) + (1 - t) * math.log(self._max_noise)",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "float(t)",
                    "possible_values": []
                }
            },
            "full_133": {
                "size": {
                    "value": "(nparam,)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "logit",
                    "possible_values": [
                        [
                            "torch.logit(torch.tensor(float(t)))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(torch.full((nparam,), logit, device=param.device))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "param.device",
                    "possible_values": []
                }
            },
            "rand_like_253": {
                "input": {
                    "value": "p_flat",
                    "possible_values": [
                        [
                            "qparam.param.view(-1)",
                            "Call"
                        ],
                        [
                            "qparam.param.view(-1, self.group_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_255": {
                "input": {
                    "value": "p_flat",
                    "possible_values": [
                        [
                            "qparam.param.view(-1)",
                            "Call"
                        ],
                        [
                            "qparam.param.view(-1, self.group_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "diffq/lsq.py": {
        "torch": {
            "Parameter_48": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "data": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "gradscale(scale, 1 / (tensor.numel() * high) ** 0.5)",
                            "Call"
                        ],
                        [
                            "2 * param.data.abs().mean() / (2 ** (self.bits - 1)) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Parameter(scale)",
                            "Call"
                        ],
                        [
                            "qparam.scale",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "diffq/torch_pack.py": {
        "torch": {
            "pad_20": {
                "variable": {
                    "value": "p_flat_pad",
                    "possible_values": []
                },
                "input": {
                    "value": "p_flat",
                    "possible_values": [
                        [
                            "p.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, ideal_length - len(p_flat))",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "nbits",
                    "possible_values": [
                        [
                            "int(math.ceil(math.log2(1 + indexes.max())))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "rect.shape[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "storage_dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "indexes.device",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "storage_size",
                    "possible_values": [
                        [
                            "_storage_size(storage_dtype)",
                            "Call"
                        ],
                        [
                            "_storage_size(packed.dtype)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "groups",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int16",
                    "possible_values": []
                },
                "device": {
                    "value": "packed.device",
                    "possible_values": []
                }
            }
        }
    },
    "diffq/ts_export.py": {
        "torch": {
            "empty_128": {
                "variable": {
                    "value": "levels",
                    "possible_values": []
                },
                "*size": {
                    "value": "bits.numel()",
                    "possible_values": []
                },
                "out": {
                    "value": "group_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.short",
                    "possible_values": []
                }
            },
            "script_109": {
                "variable": {
                    "value": "ts_model",
                    "possible_values": []
                },
                "obj": {
                    "value": "ts_premodel",
                    "possible_values": [
                        [
                            "ts_klass(quantizer.model, quantizer.group_size, quantizer.min_bits, packed)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_111": {
                "obj": {
                    "value": "ts_model",
                    "possible_values": [
                        [
                            "jit.script(ts_premodel)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                }
            }
        }
    },
    "diffq/uniform.py": {
        "torch": {
            "tensor_17": {
                "data": {
                    "value": "8.0",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "8.0",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "self.bits",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "self.bits",
                    "possible_values": []
                }
            }
        }
    },
    "inference_MDX.py": {
        "torch": {
            "device_770": {
                "variable": {
                    "value": "cpu",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_710": {
                "variable": {
                    "value": "mix",
                    "possible_values": []
                },
                "data": {
                    "value": "mix",
                    "possible_values": [
                        [
                            "np.asfortranarray([mix, mix])",
                            "Call"
                        ],
                        [
                            "mix.T",
                            "Attribute"
                        ],
                        [
                            "mixes",
                            "Name"
                        ],
                        [
                            "torch.tensor(mix, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "(mix - ref.mean()) / ref.std()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "empty_cache_1401": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_55": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_682": {
                "variable": {
                    "value": "cmix",
                    "possible_values": []
                },
                "data": {
                    "value": "cmix",
                    "possible_values": [
                        [
                            "mixes[mix]",
                            "Subscript"
                        ],
                        [
                            "mix[nmix]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(cmix, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "(cmix - ref.mean()) / ref.std()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_646": {
                "variable": {
                    "value": "mix_waves",
                    "possible_values": []
                },
                "data": {
                    "value": "mix_waves",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(mix_waves, dtype=torch.float32).to(cpu)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "no_grad_714": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_685": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1113": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1138": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1163": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1177": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1203": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1239": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1263": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1287": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1312": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1338": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1360": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1390": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_647": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_651": {
                "data": {
                    "value": "_ort.run(None, {'input': spek.cpu().numpy()})[0]",
                    "possible_values": []
                }
            },
            "get_device_properties_520": {
                "device": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "inference_demucs.py": {
        "torch": {
            "device_697": {
                "variable": {
                    "value": "cpu",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "empty_cache_1218": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_640": {
                "variable": {
                    "value": "cmix",
                    "possible_values": []
                },
                "data": {
                    "value": "cmix",
                    "possible_values": [
                        [
                            "mix[nmix]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(cmix, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "(cmix - ref.mean()) / ref.std()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "no_grad_643": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_930": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_955": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_980": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_994": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1020": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1056": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1080": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1104": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1129": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1155": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1177": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1207": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_device_properties_554": {
                "device": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "inference_v5.py": {
        "torch": {
            "empty_cache_1080": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_632": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "empty_cache_1068": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_637": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(data['gpu'])",
                    "possible_values": []
                }
            },
            "empty_cache_887": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_912": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_937": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_951": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_977": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1014": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_1040": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_622": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_634": {
                "f": {
                    "value": "data['instrumentalModel']",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "vocal_remover.devices[data['useModel']]",
                            "Subscript"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(data['gpu']))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_636": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_697": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_711": {
                "variable": {
                    "value": "X_mag_window",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_mag_window",
                    "possible_values": [
                        [
                            "X_mag_pad[None, :, :, start:start + data['window_size']]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(X_mag_window).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inference_v5_ensemble.py": {
        "torch": {
            "device_546": {
                "variable": {
                    "value": "cpu",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_547": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "tensor_518": {
                "variable": {
                    "value": "mix",
                    "possible_values": []
                },
                "data": {
                    "value": "mix",
                    "possible_values": [
                        [
                            "np.asfortranarray([mix, mix])",
                            "Call"
                        ],
                        [
                            "mix.T",
                            "Attribute"
                        ],
                        [
                            "mixes",
                            "Name"
                        ],
                        [
                            "torch.tensor(mix, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "(mix - ref.mean()) / ref.std()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "empty_cache_3030": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_491": {
                "variable": {
                    "value": "cmix",
                    "possible_values": []
                },
                "data": {
                    "value": "cmix",
                    "possible_values": [
                        [
                            "mixes[mix]",
                            "Subscript"
                        ],
                        [
                            "mix[nmix]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(cmix, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "(cmix - ref.mean()) / ref.std()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "is_available_547": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_451": {
                "variable": {
                    "value": "mix_waves",
                    "possible_values": []
                },
                "data": {
                    "value": "mix_waves",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(mix_waves, dtype=torch.float32).to(cpu)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "no_grad_522": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_3008": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_494": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2731": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2756": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2781": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2795": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2821": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2857": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2881": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2905": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2930": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2956": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_2980": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_456": {
                "data": {
                    "value": "_ort.run(None, {'input': spek.cpu().numpy()})[0]",
                    "possible_values": []
                }
            },
            "empty_cache_1647": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_1827": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "empty_cache_1655": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_1832": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(data['gpu'])",
                    "possible_values": []
                }
            },
            "get_device_properties_328": {
                "device": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "empty_cache_1704": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_1829": {
                "f": {
                    "value": "c['model_location']",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(data['gpu']))",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_1831": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_1884": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_1898": {
                "variable": {
                    "value": "X_mag_window",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_mag_window",
                    "possible_values": [
                        [
                            "X_mag_pad[None, :, :, start:start + data['window_size']]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(X_mag_window).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib_v5/dataset.py": {
        "torch": {
            "VocalRemoverValidationSet_12": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.patch_list": {
                    "value": "patch_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "lib_v5/layers.py": {
        "torch": {
            "Conv2DBNActiv_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_12": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nout, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "SeperableConv2DBNActiv_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_32": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nin, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, groups=nin, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "Encoder_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Decoder_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ASPPModule_87": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_91": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.AdaptiveAvgPool2d((1, None))",
                        "possible_values": []
                    }
                },
                "Sequential_102": {
                    "variable": {
                        "value": "self.bottleneck",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2DBNActiv(nin * 5, nout, 1, 1, 0, activ=activ)",
                        "possible_values": []
                    }
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "feat1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "nin",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Dropout2d_72": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_92": {
                "output_size": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Dropout2d_104": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/layers_123812KB .py": {
        "torch": {
            "Conv2DBNActiv_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_12": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nout, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "SeperableConv2DBNActiv_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_32": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nin, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, groups=nin, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "Encoder_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Decoder_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ASPPModule_87": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_91": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.AdaptiveAvgPool2d((1, None))",
                        "possible_values": []
                    }
                },
                "Sequential_102": {
                    "variable": {
                        "value": "self.bottleneck",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2DBNActiv(nin * 5, nout, 1, 1, 0, activ=activ)",
                        "possible_values": []
                    }
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "feat1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "nin",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Dropout2d_72": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_92": {
                "output_size": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Dropout2d_104": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/layers_123821KB.py": {
        "torch": {
            "Conv2DBNActiv_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_12": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nout, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "SeperableConv2DBNActiv_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_32": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nin, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, groups=nin, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "Encoder_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Decoder_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ASPPModule_87": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_91": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.AdaptiveAvgPool2d((1, None))",
                        "possible_values": []
                    }
                },
                "Sequential_102": {
                    "variable": {
                        "value": "self.bottleneck",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2DBNActiv(nin * 5, nout, 1, 1, 0, activ=activ)",
                        "possible_values": []
                    }
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "feat1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "nin",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Dropout2d_72": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_92": {
                "output_size": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Dropout2d_104": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/layers_33966KB.py": {
        "torch": {
            "Conv2DBNActiv_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_12": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nout, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "SeperableConv2DBNActiv_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_32": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nin, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, groups=nin, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "Encoder_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Decoder_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ASPPModule_87": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_91": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.AdaptiveAvgPool2d((1, None))",
                        "possible_values": []
                    }
                },
                "Sequential_106": {
                    "variable": {
                        "value": "self.bottleneck",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2DBNActiv(nin * 7, nout, 1, 1, 0, activ=activ)",
                        "possible_values": []
                    }
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "variable": {
                    "value": "feat1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5, feat6, feat7)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "nin",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Dropout2d_72": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_92": {
                "output_size": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Dropout2d_108": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/layers_537227KB.py": {
        "torch": {
            "Conv2DBNActiv_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_12": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nout, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "SeperableConv2DBNActiv_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_32": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nin, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, groups=nin, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "Encoder_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Decoder_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ASPPModule_87": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_91": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.AdaptiveAvgPool2d((1, None))",
                        "possible_values": []
                    }
                },
                "Sequential_106": {
                    "variable": {
                        "value": "self.bottleneck",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2DBNActiv(nin * 7, nout, 1, 1, 0, activ=activ)",
                        "possible_values": []
                    }
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "variable": {
                    "value": "feat1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5, feat6, feat7)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "nin",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Dropout2d_72": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_92": {
                "output_size": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Dropout2d_108": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/layers_537238KB.py": {
        "torch": {
            "Conv2DBNActiv_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_12": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nout, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "SeperableConv2DBNActiv_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_32": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(nin, nin, kernel_size=ksize, stride=stride, padding=pad, dilation=dilation, groups=nin, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "Encoder_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Decoder_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ASPPModule_87": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_91": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.AdaptiveAvgPool2d((1, None))",
                        "possible_values": []
                    }
                },
                "Sequential_106": {
                    "variable": {
                        "value": "self.bottleneck",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2DBNActiv(nin * 7, nout, 1, 1, 0, activ=activ)",
                        "possible_values": []
                    }
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, skip], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "variable": {
                    "value": "feat1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5, feat6, feat7)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "nin",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "nout",
                    "possible_values": []
                }
            },
            "Dropout2d_72": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_92": {
                "output_size": {
                    "value": "(1, None)",
                    "possible_values": []
                }
            },
            "Dropout2d_108": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/nets.py": {
        "torch": {
            "BaseASPPNet_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CascadedASPPNet_41": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_54": {
                    "variable": {
                        "value": "self.out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_55": {
                    "variable": {
                        "value": "self.aux1_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_56": {
                    "variable": {
                        "value": "self.aux2_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "cat_70": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1, aux2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(h)",
                    "possible_values": []
                }
            },
            "pad_82": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.out(h))",
                            "Call"
                        ],
                        [
                            "F.pad(input=mask, pad=(0, 0, 0, self.output_bin - mask.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - mask.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux1_out(aux1)",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "aux1",
                    "possible_values": [
                        [
                            "torch.cat([self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux1_out(aux1))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux1, pad=(0, 0, 0, self.output_bin - aux1.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux1.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux2_out(aux2)",
                    "possible_values": []
                }
            },
            "pad_94": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "aux2",
                    "possible_values": [
                        [
                            "self.stg2_full_band_net(self.stg2_bridge(h))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux2_out(aux2))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux2, pad=(0, 0, 0, self.output_bin - aux2.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux2.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "pow_101": {
                "variable": {
                    "value": "mask[:, :, :aggressiveness[split_bin]]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, :aggressiveness['split_bin']]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value'] / 3",
                    "possible_values": []
                }
            },
            "pow_102": {
                "variable": {
                    "value": "mask[:, :, aggressiveness[split_bin]:]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, aggressiveness['split_bin']:]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value']",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/nets_123812KB.py": {
        "torch": {
            "BaseASPPNet_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CascadedASPPNet_40": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_53": {
                    "variable": {
                        "value": "self.out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_54": {
                    "variable": {
                        "value": "self.aux1_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_55": {
                    "variable": {
                        "value": "self.aux2_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "cat_69": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1, aux2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(h)",
                    "possible_values": []
                }
            },
            "pad_81": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.out(h))",
                            "Call"
                        ],
                        [
                            "F.pad(input=mask, pad=(0, 0, 0, self.output_bin - mask.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - mask.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux1_out(aux1)",
                    "possible_values": []
                }
            },
            "pad_88": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "aux1",
                    "possible_values": [
                        [
                            "torch.cat([self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux1_out(aux1))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux1, pad=(0, 0, 0, self.output_bin - aux1.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux1.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux2_out(aux2)",
                    "possible_values": []
                }
            },
            "pad_93": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "aux2",
                    "possible_values": [
                        [
                            "self.stg2_full_band_net(self.stg2_bridge(h))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux2_out(aux2))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux2, pad=(0, 0, 0, self.output_bin - aux2.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux2.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "pow_100": {
                "variable": {
                    "value": "mask[:, :, :aggressiveness[split_bin]]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, :aggressiveness['split_bin']]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value'] / 3",
                    "possible_values": []
                }
            },
            "pow_101": {
                "variable": {
                    "value": "mask[:, :, aggressiveness[split_bin]:]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, aggressiveness['split_bin']:]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value']",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/nets_123821KB.py": {
        "torch": {
            "BaseASPPNet_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CascadedASPPNet_40": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_53": {
                    "variable": {
                        "value": "self.out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_54": {
                    "variable": {
                        "value": "self.aux1_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_55": {
                    "variable": {
                        "value": "self.aux2_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "cat_69": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1, aux2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(h)",
                    "possible_values": []
                }
            },
            "pad_81": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.out(h))",
                            "Call"
                        ],
                        [
                            "F.pad(input=mask, pad=(0, 0, 0, self.output_bin - mask.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - mask.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux1_out(aux1)",
                    "possible_values": []
                }
            },
            "pad_88": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "aux1",
                    "possible_values": [
                        [
                            "torch.cat([self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux1_out(aux1))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux1, pad=(0, 0, 0, self.output_bin - aux1.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux1.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux2_out(aux2)",
                    "possible_values": []
                }
            },
            "pad_93": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "aux2",
                    "possible_values": [
                        [
                            "self.stg2_full_band_net(self.stg2_bridge(h))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux2_out(aux2))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux2, pad=(0, 0, 0, self.output_bin - aux2.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux2.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "pow_100": {
                "variable": {
                    "value": "mask[:, :, :aggressiveness[split_bin]]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, :aggressiveness['split_bin']]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value'] / 3",
                    "possible_values": []
                }
            },
            "pow_101": {
                "variable": {
                    "value": "mask[:, :, aggressiveness[split_bin]:]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, aggressiveness['split_bin']:]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value']",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/nets_33966KB.py": {
        "torch": {
            "BaseASPPNet_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CascadedASPPNet_40": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_53": {
                    "variable": {
                        "value": "self.out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_54": {
                    "variable": {
                        "value": "self.aux1_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_55": {
                    "variable": {
                        "value": "self.aux2_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "cat_69": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1, aux2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(h)",
                    "possible_values": []
                }
            },
            "pad_81": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.out(h))",
                            "Call"
                        ],
                        [
                            "F.pad(input=mask, pad=(0, 0, 0, self.output_bin - mask.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - mask.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux1_out(aux1)",
                    "possible_values": []
                }
            },
            "pad_88": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "aux1",
                    "possible_values": [
                        [
                            "torch.cat([self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux1_out(aux1))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux1, pad=(0, 0, 0, self.output_bin - aux1.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux1.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux2_out(aux2)",
                    "possible_values": []
                }
            },
            "pad_93": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "aux2",
                    "possible_values": [
                        [
                            "self.stg2_full_band_net(self.stg2_bridge(h))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux2_out(aux2))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux2, pad=(0, 0, 0, self.output_bin - aux2.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux2.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "pow_100": {
                "variable": {
                    "value": "mask[:, :, :aggressiveness[split_bin]]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, :aggressiveness['split_bin']]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value'] / 3",
                    "possible_values": []
                }
            },
            "pow_101": {
                "variable": {
                    "value": "mask[:, :, aggressiveness[split_bin]:]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, aggressiveness['split_bin']:]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value']",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/nets_537227KB.py": {
        "torch": {
            "BaseASPPNet_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CascadedASPPNet_41": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_54": {
                    "variable": {
                        "value": "self.out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_55": {
                    "variable": {
                        "value": "self.aux1_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_56": {
                    "variable": {
                        "value": "self.aux2_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "cat_70": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1, aux2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(h)",
                    "possible_values": []
                }
            },
            "pad_82": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.out(h))",
                            "Call"
                        ],
                        [
                            "F.pad(input=mask, pad=(0, 0, 0, self.output_bin - mask.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - mask.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux1_out(aux1)",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "aux1",
                    "possible_values": [
                        [
                            "torch.cat([self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux1_out(aux1))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux1, pad=(0, 0, 0, self.output_bin - aux1.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux1.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux2_out(aux2)",
                    "possible_values": []
                }
            },
            "pad_94": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "aux2",
                    "possible_values": [
                        [
                            "self.stg2_full_band_net(self.stg2_bridge(h))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux2_out(aux2))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux2, pad=(0, 0, 0, self.output_bin - aux2.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux2.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "pow_101": {
                "variable": {
                    "value": "mask[:, :, :aggressiveness[split_bin]]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, :aggressiveness['split_bin']]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value'] / 3",
                    "possible_values": []
                }
            },
            "pow_102": {
                "variable": {
                    "value": "mask[:, :, aggressiveness[split_bin]:]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, aggressiveness['split_bin']:]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value']",
                    "possible_values": []
                }
            }
        }
    },
    "lib_v5/nets_537238KB.py": {
        "torch": {
            "BaseASPPNet_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CascadedASPPNet_41": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_54": {
                    "variable": {
                        "value": "self.out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_55": {
                    "variable": {
                        "value": "self.aux1_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_56": {
                    "variable": {
                        "value": "self.aux2_out",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "cat_70": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux1, aux2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(h)",
                    "possible_values": []
                }
            },
            "pad_82": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.out(h))",
                            "Call"
                        ],
                        [
                            "F.pad(input=mask, pad=(0, 0, 0, self.output_bin - mask.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - mask.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux1_out(aux1)",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "aux1",
                    "possible_values": []
                },
                "input": {
                    "value": "aux1",
                    "possible_values": [
                        [
                            "torch.cat([self.stg1_low_band_net(x[:, :, :bandw]), self.stg1_high_band_net(x[:, :, bandw:])], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux1_out(aux1))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux1, pad=(0, 0, 0, self.output_bin - aux1.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux1.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux2_out(aux2)",
                    "possible_values": []
                }
            },
            "pad_94": {
                "variable": {
                    "value": "aux2",
                    "possible_values": []
                },
                "input": {
                    "value": "aux2",
                    "possible_values": [
                        [
                            "self.stg2_full_band_net(self.stg2_bridge(h))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.aux2_out(aux2))",
                            "Call"
                        ],
                        [
                            "F.pad(input=aux2, pad=(0, 0, 0, self.output_bin - aux2.size()[2]), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, self.output_bin - aux2.size()[2])",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "possible_values": []
                }
            },
            "pow_101": {
                "variable": {
                    "value": "mask[:, :, :aggressiveness[split_bin]]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, :aggressiveness['split_bin']]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value'] / 3",
                    "possible_values": []
                }
            },
            "pow_102": {
                "variable": {
                    "value": "mask[:, :, aggressiveness[split_bin]:]",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, aggressiveness['split_bin']:]",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 + aggressiveness['value']",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Conv_TDF_net_trim_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.n_fft": {
                    "value": "n_fft_scale",
                    "possible_values": []
                },
                "self.hop": {
                    "value": "hop",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "hann_window_23": {
                    "variable": {
                        "value": "self.window",
                        "possible_values": []
                    },
                    "window_length": {
                        "value": "self.n_fft",
                        "possible_values": []
                    },
                    "periodic": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.target_name": {
                    "value": "target_name",
                    "possible_values": []
                },
                "zeros_27": {
                    "variable": {
                        "value": "self.freq_pad",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "[1, out_c, self.n_bins - self.dim_f, self.dim_t]",
                        "possible_values": []
                    }
                }
            },
            "stft_31": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.reshape([-1, self.chunk_size])",
                            "Call"
                        ],
                        [
                            "torch.stft(x, n_fft=self.n_fft, hop_length=self.hop, window=self.window, center=True)",
                            "Call"
                        ],
                        [
                            "x.permute([0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x.reshape([-1, 2, 2, self.n_bins, self.dim_t]).reshape([-1, dim_c, self.n_bins, self.dim_t])",
                            "Call"
                        ],
                        [
                            "torch.cat([x, freq_pad], -2)",
                            "Call"
                        ],
                        [
                            "x.reshape([-1, c, 2, self.n_bins, self.dim_t]).reshape([-1, 2, self.n_bins, self.dim_t])",
                            "Call"
                        ],
                        [
                            "x.permute([0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "torch.istft(x, n_fft=self.n_fft, hop_length=self.hop, window=self.window, center=True)",
                            "Call"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "self.n_fft",
                    "possible_values": []
                },
                "hop_length": {
                    "value": "self.hop",
                    "possible_values": []
                },
                "window": {
                    "value": "self.window",
                    "possible_values": []
                },
                "center": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, freq_pad]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "istft_42": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.reshape([-1, self.chunk_size])",
                            "Call"
                        ],
                        [
                            "torch.stft(x, n_fft=self.n_fft, hop_length=self.hop, window=self.window, center=True)",
                            "Call"
                        ],
                        [
                            "x.permute([0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x.reshape([-1, 2, 2, self.n_bins, self.dim_t]).reshape([-1, dim_c, self.n_bins, self.dim_t])",
                            "Call"
                        ],
                        [
                            "torch.cat([x, freq_pad], -2)",
                            "Call"
                        ],
                        [
                            "x.reshape([-1, c, 2, self.n_bins, self.dim_t]).reshape([-1, 2, self.n_bins, self.dim_t])",
                            "Call"
                        ],
                        [
                            "x.permute([0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "torch.istft(x, n_fft=self.n_fft, hop_length=self.hop, window=self.window, center=True)",
                            "Call"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "self.n_fft",
                    "possible_values": []
                },
                "hop_length": {
                    "value": "self.hop",
                    "possible_values": []
                },
                "window": {
                    "value": "self.window",
                    "possible_values": []
                },
                "center": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    }
}