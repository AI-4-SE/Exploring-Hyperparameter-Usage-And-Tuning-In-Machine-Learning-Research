{
    "datasets/casia.py": {
        "torch": {
            "empty_71": {
                "variable": {
                    "value": "landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/ffhq.py": {
        "torch": {
            "zeros_27": {
                "variable": {
                    "value": "landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/lfw.py": {
        "torch": {
            "empty_40": {
                "variable": {
                    "value": "landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/lfw_crop.py": {
        "torch": {
            "empty_80": {
                "variable": {
                    "value": "landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main_test_diff_passwds.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.__dict__[args.dataset](train=False, transform=transforms.Compose([transforms.Resize(args.imageSize, Image.BICUBIC), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]), args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda x: np.random.seed(torch.initial_seed() % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_train.py": {
        "torch": {
            "device_73": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.__dict__[args.dataset](train=True, transform=transforms.Compose([transforms.Resize((args.imageSize, args.imageSize), Image.BICUBIC), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5), inplace=True)]), args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda x: np.random.seed(torch.initial_seed() % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.__dict__[args.dataset](train=False, transform=transforms.Compose([transforms.Resize((args.imageSize, args.imageSize), Image.BICUBIC), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]), args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda x: np.random.seed(torch.initial_seed() % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_208": {
                "variable": {
                    "value": "netFR",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netFR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.sphere20a(feature=args.feature_layer)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netFR).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_248": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model_dict['G'].parameters(), 'lr': args.G_lr}, {'params': model_dict['Q'].parameters(), 'lr': args.Q_lr}]",
                            "List"
                        ]
                    ]
                },
                "betas": {
                    "value": "(args.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_254": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model_dict['D'].parameters(), 'lr': args.D_lr}, {'params': netFR.parameters(), 'lr': args.FR_lr}]",
                            "List"
                        ]
                    ]
                },
                "betas": {
                    "value": "(args.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "affine_grid_368": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alignment(landmarks)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((args.batch_size, 3, 112, 96))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "all_M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake.detach().cpu(), rand_fake.detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "all_WR",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rand_recon.detach().cpu(), rand_recon_2nd.detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_52": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(theta, torch.Size((args.batch_size, 3, 112, 96)))",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_54": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(theta, torch.Size((args.batch_size, 3, 112, 96)))",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_209": {
                "f": {
                    "value": "./pretrained_models/sphere20a_20171020.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "L1Loss_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_266": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_603": {
                "variable": {
                    "value": "FR_cos_sim_target",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_699": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineEmbeddingLoss_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_540": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_dis_logits[dis_idx].max(dim=1)[1]",
                            "Subscript"
                        ],
                        [
                            "recon_dis_logits[dis_idx].max(dim=1)[1]",
                            "Subscript"
                        ],
                        [
                            "rand_recon_dis_logits[dis_idx].max(dim=1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dis_target[:, dis_idx]",
                            "Subscript"
                        ],
                        [
                            "inv_dis_target[:, dis_idx]",
                            "Subscript"
                        ],
                        [
                            "rand_inv_dis_target[:, dis_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_540": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_551": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_dis_logits[dis_idx].max(dim=1)[1]",
                            "Subscript"
                        ],
                        [
                            "recon_dis_logits[dis_idx].max(dim=1)[1]",
                            "Subscript"
                        ],
                        [
                            "rand_recon_dis_logits[dis_idx].max(dim=1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dis_target[:, dis_idx]",
                            "Subscript"
                        ],
                        [
                            "inv_dis_target[:, dis_idx]",
                            "Subscript"
                        ],
                        [
                            "rand_inv_dis_target[:, dis_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_551": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_562": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_dis_logits[dis_idx].max(dim=1)[1]",
                            "Subscript"
                        ],
                        [
                            "recon_dis_logits[dis_idx].max(dim=1)[1]",
                            "Subscript"
                        ],
                        [
                            "rand_recon_dis_logits[dis_idx].max(dim=1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dis_target[:, dis_idx]",
                            "Subscript"
                        ],
                        [
                            "inv_dis_target[:, dis_idx]",
                            "Subscript"
                        ],
                        [
                            "rand_inv_dis_target[:, dis_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_562": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/net_sphere.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.mm(ww)",
                            "Call"
                        ],
                        [
                            "cos_theta / xlen.view(-1, 1) / wlen.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "cos_theta * xlen.view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_90": {
                "variable": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(cos_theta, phi_theta)",
                            "Tuple"
                        ],
                        [
                            "cos_theta * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_114": {
                "variable": {
                    "value": "self.relu1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_116": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_118": {
                "variable": {
                    "value": "self.relu1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_121": {
                "variable": {
                    "value": "self.relu2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_123": {
                "variable": {
                    "value": "self.relu2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_125": {
                "variable": {
                    "value": "self.relu2_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.conv2_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_128": {
                "variable": {
                    "value": "self.relu2_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv2_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_130": {
                "variable": {
                    "value": "self.relu2_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_133": {
                "variable": {
                    "value": "self.relu3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_135": {
                "variable": {
                    "value": "self.relu3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_137": {
                "variable": {
                    "value": "self.relu3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_140": {
                "variable": {
                    "value": "self.relu3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "self.conv3_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_142": {
                "variable": {
                    "value": "self.relu3_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv3_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_145": {
                "variable": {
                    "value": "self.relu3_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.conv3_7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_147": {
                "variable": {
                    "value": "self.relu3_7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv3_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_150": {
                "variable": {
                    "value": "self.relu3_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "variable": {
                    "value": "self.conv3_9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_152": {
                "variable": {
                    "value": "self.relu3_9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_155": {
                "variable": {
                    "value": "self.relu4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_157": {
                "variable": {
                    "value": "self.relu4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_159": {
                "variable": {
                    "value": "self.relu4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 7 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "DataParallel_49": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_374": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "passwd_length",
                            "variable"
                        ],
                        [
                            "output_nc",
                            "variable"
                        ],
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_376": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_378": {
                "variable": {
                    "value": "uprelu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_408": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_460": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleDict_462": {
                "variable": {
                    "value": "self.fc_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_501": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_522": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_554": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_618": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_640": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MSELoss_151": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, z.view(z.size(0), -1, 1, 1).repeat(1, 1, input.size(2), input.size(3)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, z.view(z.size(0), -1, 1, 1).repeat(1, 1, input.size(2), input.size(3)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_383": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_464": {
                "variable": {
                    "value": "self.fc_list[fc_ + str(dis_idx)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_dis_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_148": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_153": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_231": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_231": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_233": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "passwd_length",
                            "variable"
                        ],
                        [
                            "output_nc",
                            "variable"
                        ],
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_271": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ncs",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_288": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_288": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_303": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_318": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Sequential_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_390": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_397": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_414": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_448": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_451": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_454": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_458": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_459": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_486": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "passwd_length",
                            "variable"
                        ],
                        [
                            "output_nc",
                            "variable"
                        ],
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_487": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_585": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "passwd_length",
                            "variable"
                        ],
                        [
                            "output_nc",
                            "variable"
                        ],
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_586": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_605": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf",
                            "variable"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_608": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_614": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf",
                            "variable"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_633": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "passwd_length",
                            "variable"
                        ],
                        [
                            "output_nc",
                            "variable"
                        ],
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_634": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_635": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_637": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_638": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "passwd_length",
                            "variable"
                        ],
                        [
                            "output_nc",
                            "variable"
                        ],
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ncs",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_200": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_242": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_243": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_295": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_307": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_311": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_495": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_498": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_594": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf",
                            "variable"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_597": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_607": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_258": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_259": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_265": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReplicationPad2d_297": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_313": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_596": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_404": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "save_visual.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.__dict__[args.dataset](train=False, transform=transforms.Compose([transforms.Resize((args.imageSize, args.imageSize), Image.BICUBIC), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]), args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda x: np.random.seed(torch.initial_seed() % 2 ** 32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(img[save_idx:save_idx + 1, ...].cpu(), fake[save_idx:save_idx + 1, ...].cpu(), rand_fake[save_idx:save_idx + 1, ...].cpu(), wrong_recon[save_idx:save_idx + 1, ...].cpu(), recon[save_idx:save_idx + 1, ...].cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/image_pool.py": {
        "torch": {
            "cat_42": {
                "variable": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[item for (idx, item) in enumerate(return_images) if idx in indices]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(return_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_21": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/util.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "binary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((batch_size, passwd_length), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "dis_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dis_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((batch_size, target_size), dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(dis_target).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "rand_z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_binary",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "rand_dis_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_dis_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(rand_dis_target).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "all_tfms",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_tfms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((s.shape[0], 2, 3), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(all_tfms).to(torch.device('cuda:0'))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_12": {
                "tensors": {
                    "value": "(img1, img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "inv_z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inv_binary",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "inv_dis_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inv_dis_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inv_dis_target).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "rand_inv_z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_inv_binary",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "rand_inv_dis_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_inv_dis_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(rand_inv_dis_target).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_162": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(ckpt_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "rand_inv_2nd_z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_inv_2nd_binary",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "rand_inv_2nd_dis_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_inv_2nd_dis_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(rand_inv_2nd_dis_target).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_139": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}