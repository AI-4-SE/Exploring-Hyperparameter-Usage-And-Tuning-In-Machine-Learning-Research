{
    "deployment/convert_model.py": {
        "tensorflow": {
            "load_model_159": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "self.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Interpreter_177": {
                "variable": {
                    "value": "interpreter",
                    "type": "variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "model_content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f.read()",
                            "Call"
                        ],
                        [
                            "f.read()",
                            "Call"
                        ],
                        [
                            "f.read()",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_235": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_data",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Interpreter_252": {
                "variable": {
                    "value": "interpreter",
                    "type": "variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "model_content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f.read()",
                            "Call"
                        ],
                        [
                            "f.read()",
                            "Call"
                        ],
                        [
                            "f.read()",
                            "Call"
                        ]
                    ]
                }
            },
            "Interpreter_271": {
                "variable": {
                    "value": "interpreter",
                    "type": "variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "model_content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f.read()",
                            "Call"
                        ],
                        [
                            "f.read()",
                            "Call"
                        ],
                        [
                            "f.read()",
                            "Call"
                        ]
                    ]
                }
            },
            "Interpreter_340": {
                "variable": {
                    "value": "interpreter",
                    "type": "variable",
                    "possible_values": []
                },
                "model_content": {
                    "value": "tflite_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_converter.convert()",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_284": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_input, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GFile_174": {
                "name": {
                    "value": "self.tflite_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_249": {
                "name": {
                    "value": "self.tflite_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_268": {
                "name": {
                    "value": "self.tflite_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "deployment/lib/constants.py": {
        "tensorflow": {}
    },
    "deployment/lib/quantize.py": {
        "tensorflow": {}
    },
    "tf/resources/models.py": {
        "tensorflow": {
            "Dense_39": {
                "variable": {
                    "value": "self.fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_43": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.input_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_86": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L.Input(shape=(1, self.input_length, 1))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L.Softmax()(tfeb)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_92": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'valid'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_48": {
                "pool_size": {
                    "value": "(1, self.sfeb_pool_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Permute_52": {
                "dims": {
                    "value": "(3, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling2D_57": {
                "pool_size": {
                    "value": "self.tfeb_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPooling2D_61": {
                "pool_size": {
                    "value": "self.tfeb_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPooling2D_65": {
                "pool_size": {
                    "value": "self.tfeb_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPooling2D_69": {
                "pool_size": {
                    "value": "self.tfeb_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPooling2D_73": {
                "pool_size": {
                    "value": "self.tfeb_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AveragePooling2D_78": {
                "pool_size": {
                    "value": "self.avg_pool_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Flatten_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tf/resources/train_generator.py": {
        "tensorflow": {}
    },
    "tf/tester.py": {
        "tensorflow": {
            "mean_50": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_model_61": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "self.opt.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf/trainer.py": {
        "tensorflow": {
            "SGD_31": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.opt.weightDecay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_36": {
                "variable": {
                    "value": "lrate",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "self.GetLR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_37": {
                "variable": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "'tf/trained_models/{}.h5'.format(self.opt.model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_acc",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_113": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_128": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_134": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch/kd/kd_trainer.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_258": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "no_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Identity()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_92": {
                "variable": {
                    "value": "lossFunc",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "student.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opt.weightDecay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "self.testX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(data['x'], 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "self.testY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "student.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Softmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "tpaths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "spaths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(x, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(y).to(self.opt.device)",
                            "Call"
                        ],
                        [
                            "self.trainY[index * self.opt.batchSize:(index + 1) * self.opt.batchSize]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "{'weight': net.state_dict(), 'config': net.ch_config}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fname.format(dir, self.opt.model_name.lower(), self.bestAcc, self.bestAccEpoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_134": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_164": {
                "input": {
                    "value": "student_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "student(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.max(targets, 1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_206": {
                "tensors": {
                    "value": "(y_pred, scores.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cross_entropy_174": {
                "input": {
                    "value": "student_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "student(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.max(targets, 1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_163": {
                "input": {
                    "value": "student_output / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.max(F.softmax(teacher_output / T, dim=1), 1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_164": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "KLDivLoss_169": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_169": {
                "input": {
                    "value": "student_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "student(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_174": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_163": {
                "input": {
                    "value": "F.softmax(teacher_output / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_168": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_168": {
                "input": {
                    "value": "student_output / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "input": {
                    "value": "teacher_output / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_173": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_173": {
                "input": {
                    "value": "student_output / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "input": {
                    "value": "teacher_output / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "input": {
                    "value": "teacher_output / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torch/old_to_new_model_converter.py": {
        "torch": {
            "load_18": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "{'weight': net.state_dict(), 'config': config}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/torch/resources/pretrained_models/new_{}.pt'.format(dir, name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torch/pruning.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "torch/pruning/filter_pruning.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_41": {
                "variable": {
                    "value": "self.opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "KLDivLoss_48": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.opt.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.cur_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "self.testX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(data['x'], 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "self.testY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(x, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(y).to(self.opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_196": {
                "obj": {
                    "value": "{'weight': net.state_dict(), 'config': net.ch_config}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fname.format(dir, self.opt.model_name.lower())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "(y_pred, scores.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch/pruning/weight_pruning.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_49": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "KLDivLoss_55": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opt.weightDecay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "self.testX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(data['x'], 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "self.testY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(x, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(y).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "{'weight': net.state_dict(), 'config': net.ch_config}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fname.format(dir, self.opt.model_name.lower())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "file_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "(y_pred, scores.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch/quantization.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "self.opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "self.trainX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(x, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "self.trainY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.opt.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "self.testX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(data['x'], 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "self.testY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "temp.p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "torch.jit.script(net)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/torch/quantized_models/{}.pt'.format(os.getcwd(), self.opt.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_143": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.opt.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_167": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_139": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.GetACDNetQuantModel(input_len=self.opt.inputLength, nclass=50, sr=self.opt.sr, channel_config=state['config']).to(self.opt.device)",
                            "Call"
                        ],
                        [
                            "models.GetACDNetModel(input_len=self.opt.inputLength, nclass=50, sr=self.opt.sr, channel_config=state['config']).to(self.opt.device)",
                            "Call"
                        ],
                        [
                            "self.__load_model(True)",
                            "Call"
                        ],
                        [
                            "torch.jit.load(self.opt.model_path)",
                            "Call"
                        ],
                        [
                            "self.__load_model()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "(y_pred, scores.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "(x_pred, scores.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch/resources/calculator.py": {
        "torch": {
            "prod_94": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_96": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torch/resources/models.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "fcn",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fcn_no_of_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ch_config[-1]",
                            "Subscript"
                        ],
                        [
                            "self.ch_config[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.sfeb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.tfeb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tfeb_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Softmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "fcn",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fcn_no_of_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ch_config[-1]",
                            "Subscript"
                        ],
                        [
                            "self.ch_config[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.sfeb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.tfeb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tfeb_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Softmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_217": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "kernel_size": {
                    "value": "(1, sfeb_pool_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Softmax_82": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_169": {
                "kernel_size": {
                    "value": "(1, sfeb_pool_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_187": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Softmax_197": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_76": {
                "kernel_size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_191": {
                "kernel_size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_69": {
                "kernel_size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_184": {
                "kernel_size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch/resources/pruning_tools/filter_pruner.py": {
        "torch": {
            "Sequential_56": {
                "variable": {
                    "value": "net.tfeb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[module for (idx, module) in all_features[tfeb_starts_at:]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chnls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.in_channels if next_conv is False else conv.in_channels - 1",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chnls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.out_channels - 1 if next_conv is False else conv.out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "new_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(bn.num_features - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn.track_running_stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "new_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(linear.in_features - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "linear.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "index_select_116": {
                "variable": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if next_conv is False else 1",
                            "IfExp"
                        ]
                    ]
                },
                "index": {
                    "value": "torch.tensor(indexes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "net.sfeb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[module for (idx, module) in all_features[0:tfeb_starts_at]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "data": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(set(range(weight.size(dim))) - set({channel_index}))",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_30": {
                "kernel_size": {
                    "value": "(1, kw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch/resources/pruning_tools/filter_pruning.py": {
        "torch": {
            "abs_40": {
                "variable": {
                    "value": "f_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.weight.detach().clone()",
                            "Call"
                        ],
                        [
                            "module.weight.detach().clone()",
                            "Call"
                        ],
                        [
                            "torch.abs(f_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_41": {
                "variable": {
                    "value": "f_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_data.sum(dim=(1, 2, 3)).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_127": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.filter_ranks[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "input": {
                    "value": "torch.sum(data * data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "data * data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_128": {
                "input": {
                    "value": "torch.sum(v * v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "v * v",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "torch/resources/pruning_tools/weight_pruning.py": {
        "torch": {
            "cat_52": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_62": {
                "variable": {
                    "value": "(_, z_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(res)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(res.shape[0] - nnz)",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_27": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "torch/tester.py": {
        "torch": {
            "device_85": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "self.testX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(data['x'], 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "self.testY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "KLDivLoss_62": {
                "variable": {
                    "value": "lossFunc",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_paths",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_91": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "(y_pred, scores.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch/tester_original.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_35": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "self.testX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(data['x'], 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "self.testY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "KLDivLoss_79": {
                "variable": {
                    "value": "lossFunc",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_paths",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "(y_pred, scores.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch/trainer.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_191": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "KLDivLoss_65": {
                "variable": {
                    "value": "lossFunc",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opt.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opt.weightDecay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "self.testX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(data['x'], 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "self.testY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.moveaxis(x, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(y).to(self.opt.device)",
                            "Call"
                        ],
                        [
                            "self.trainY[index * self.opt.batchSize:(index + 1) * self.opt.batchSize]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_181": {
                "obj": {
                    "value": "{'weight': net.state_dict(), 'config': net.ch_config}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fname.format(dir, self.opt.model_name.lower(), self.opt.split)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_211": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_140": {
                "tensors": {
                    "value": "(y_pred, scores.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}