{
    "benchmark/benchmark_lstm.py": {
        "tensorflow": {
            "disable_eager_execution_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_v2_behavior_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "uniform_293": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, seq_size]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "30000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "variable": {
                    "value": "loop_index",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "variable": {
                    "value": "initial_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_314": {
                "variable": {
                    "value": "benchmark_op",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "loop_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[loop_index, initial_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_320": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=False, per_process_gpu_memory_fraction=0.95)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RunMetadata_321": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_100": {
                "variable": {
                    "value": "self.g_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([hz, self.n_blocks], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gate_weight",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "self._rows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "hz * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "dsg_rows",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "self._columns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "hz * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "dsg_columns",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "self._row_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "row_indices_",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "row_indices",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "self._row_offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "row_offsets_",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "row_offsets",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "self._column_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "column_indices_",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "column_indices",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_134": {
                "variable": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.compress((matrix != 0).flatten())",
                            "Call"
                        ],
                        [
                            "values.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(weight, mask)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "values",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "variable": {
                    "value": "gval",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embed_weight, inps)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.g_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_144": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(gval >= topval, tf.float32) * gval",
                            "BinOp"
                        ],
                        [
                            "tf.repeat(gate, self.block_size ** 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gate, (self.hz * 4, self.hz * 2))",
                            "Call"
                        ],
                        [
                            "gate / (tf.math.reduce_sum(gate) / tf.cast(tf.size(gate), tf.float32))",
                            "BinOp"
                        ]
                    ]
                },
                "repeats": {
                    "value": "self.block_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(gval >= topval, tf.float32) * gval",
                            "BinOp"
                        ],
                        [
                            "tf.repeat(gate, self.block_size ** 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gate, (self.hz * 4, self.hz * 2))",
                            "Call"
                        ],
                        [
                            "gate / (tf.math.reduce_sum(gate) / tf.cast(tf.size(gate), tf.float32))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.hz * 4, self.hz * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_157": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_158": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(matrix != 0).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(matrix, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_161": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(matrix != 0).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(matrix, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "row_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], tf.cumsum(tf.reduce_sum(mask, axis=1))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_165": {
                "variable": {
                    "value": "row_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "-(row_offsets[1:] - row_offsets[:-1])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "boolean_mask_169": {
                "variable": {
                    "value": "column_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * (np.arange(matrix.shape[1]) + 1)",
                            "BinOp"
                        ],
                        [
                            "mask * (tf.range(matrix.shape[1]) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.math.not_equal(matrix, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_172": {
                "variable": {
                    "value": "row_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "row_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(-1 * np.diff(row_offsets))",
                            "Call"
                        ],
                        [
                            "tf.argsort(-(row_offsets[1:] - row_offsets[:-1]))",
                            "Call"
                        ],
                        [
                            "tf.cast(row_indices, tf.uint32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_173": {
                "variable": {
                    "value": "row_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "row_offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(([0], np.cumsum(np.add.reduce(mask, axis=1))), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[0], tf.cumsum(tf.reduce_sum(mask, axis=1))], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(row_offsets, tf.uint32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_174": {
                "variable": {
                    "value": "column_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "column_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.compress((x != 0).flatten())",
                            "Call"
                        ],
                        [
                            "column_indices - 1",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(x, tf.math.not_equal(matrix, 0))",
                            "Call"
                        ],
                        [
                            "column_indices - 1",
                            "BinOp"
                        ],
                        [
                            "tf.cast(column_indices, tf.uint32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_184": {
                "variable": {
                    "value": "self.embed_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, hz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_187": {
                "variable": {
                    "value": "self.recurrent_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([hz * 4, hz * 2], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "recurrent_weight",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_191": {
                "variable": {
                    "value": "self.recurrent_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([hz * 4], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "recurrent_bias",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_196": {
                "variable": {
                    "value": "self.pred_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([hz, vocab_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_weight",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_199": {
                "variable": {
                    "value": "self.pred_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bo",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "states_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embed_weight, inps)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_218": {
                "variable": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embed_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embed_weight, inps)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_228": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, inps.shape[0], self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scan_242": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.transpose(inps, [1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[2, inps.shape[0], self.hidden_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape=[2, inps.shape[0], self.hidden_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_258": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, inps.shape[0], self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scan_281": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.transpose(inps, [1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[2, inps.shape[0], self.hidden_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape=[2, inps.shape[0], self.hidden_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_experimental_options_290": {
                "options": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'disable_meta_optimizer': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_212": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "tf.matmul(states_reshaped, self.pred_weight) + self.pred_bias",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, seq, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_215": {
                "input_tensor": {
                    "value": "self.loss_fn(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_231": {
                "variable": {
                    "value": "(st_1, ct_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hprev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_233": {
                "variable": {
                    "value": "fc_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.concat([x, st_1], -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_235": {
                "variable": {
                    "value": "(i, f, g, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "fc_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, tf.transpose(tf.concat([x, st_1], -1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fc_gate) + bias",
                            "BinOp"
                        ],
                        [
                            "kernels.spmm(rows, columns, values, row_indices, row_offsets, column_indices, tf.transpose(tf.concat([x, st_1], -1)), False, False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fc_gate) + bias",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_261": {
                "variable": {
                    "value": "(st_1, ct_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hprev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_274": {
                "variable": {
                    "value": "(i, f, g, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "fc_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, tf.transpose(tf.concat([x, st_1], -1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fc_gate) + bias",
                            "BinOp"
                        ],
                        [
                            "kernels.spmm(rows, columns, values, row_indices, row_offsets, column_indices, tf.transpose(tf.concat([x, st_1], -1)), False, False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fc_gate) + bias",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_309": {
                "x": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(FLAGS.outer_steps)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(FLAGS.inner_steps, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_324": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=False, per_process_gpu_memory_fraction=0.95))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_143": {
                "x": {
                    "value": "gval >= topval",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_169": {
                "x": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_211": {
                "a": {
                    "value": "states_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inps, [-1, hz])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.pred_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_240": {
                "values": {
                    "value": "[st, ct]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_242": {
                "a": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embed_weight, inps)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_244": {
                "a": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(step, tf.transpose(inps, [1, 0, 2]), initializer=init_state)",
                            "Call"
                        ],
                        [
                            "tf.scan(step, tf.transpose(inps, [1, 0, 2]), initializer=init_state)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_279": {
                "values": {
                    "value": "[st, ct]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_281": {
                "a": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embed_weight, inps)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_283": {
                "a": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(step, tf.transpose(inps, [1, 0, 2]), initializer=init_state)",
                            "Call"
                        ],
                        [
                            "tf.scan(step, tf.transpose(inps, [1, 0, 2]), initializer=init_state)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_309": {
                "value": {
                    "value": "FLAGS.inner_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_320": {
                "allow_growth": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reset_default_graph_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_100": {
                "shape": {
                    "value": "[hz, self.n_blocks]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "top_k_142": {
                "input": {
                    "value": "gval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inps, self.g_weight)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.top_blocks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_146": {
                "input_tensor": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(gval >= topval, tf.float32) * gval",
                            "BinOp"
                        ],
                        [
                            "tf.repeat(gate, self.block_size ** 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gate, (self.hz * 4, self.hz * 2))",
                            "Call"
                        ],
                        [
                            "gate / (tf.math.reduce_sum(gate) / tf.cast(tf.size(gate), tf.float32))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_146": {
                "x": {
                    "value": "tf.size(gate)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "input_tensor": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(gval >= topval, tf.float32) * gval",
                            "BinOp"
                        ],
                        [
                            "tf.repeat(gate, self.block_size ** 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gate, (self.hz * 4, self.hz * 2))",
                            "Call"
                        ],
                        [
                            "gate / (tf.math.reduce_sum(gate) / tf.cast(tf.size(gate), tf.float32))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cumsum_162": {
                "x": {
                    "value": "tf.reduce_sum(mask, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_187": {
                "shape": {
                    "value": "[hz * 4, hz * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_191": {
                "shape": {
                    "value": "[hz * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_196": {
                "shape": {
                    "value": "[hz, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_199": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "a": {
                    "value": "tf.concat([x, st_1], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_234": {
                "a": {
                    "value": "fc_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, tf.transpose(tf.concat([x, st_1], -1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fc_gate) + bias",
                            "BinOp"
                        ],
                        [
                            "kernels.spmm(rows, columns, values, row_indices, row_offsets, column_indices, tf.transpose(tf.concat([x, st_1], -1)), False, False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fc_gate) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_236": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_236": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_238": {
                "x": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ct_1 * f + g * i",
                            "BinOp"
                        ],
                        [
                            "ct_1 * f + g * i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_270": {
                "a": {
                    "value": "tf.concat([x, st_1], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_272": {
                "a": {
                    "value": "fc_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weight, tf.transpose(tf.concat([x, st_1], -1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fc_gate) + bias",
                            "BinOp"
                        ],
                        [
                            "kernels.spmm(rows, columns, values, row_indices, row_offsets, column_indices, tf.transpose(tf.concat([x, st_1], -1)), False, False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fc_gate) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_275": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_275": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_277": {
                "x": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ct_1 * f + g * i",
                            "BinOp"
                        ],
                        [
                            "ct_1 * f + g * i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "size_146": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(gval >= topval, tf.float32) * gval",
                            "BinOp"
                        ],
                        [
                            "tf.repeat(gate, self.block_size ** 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gate, (self.hz * 4, self.hz * 2))",
                            "Call"
                        ],
                        [
                            "gate / (tf.math.reduce_sum(gate) / tf.cast(tf.size(gate), tf.float32))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_162": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(matrix != 0).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "tf.math.not_equal(matrix, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_233": {
                "values": {
                    "value": "[x, st_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_270": {
                "values": {
                    "value": "[x, st_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "gmul/grad_check.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_17": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_18": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradcheck_21": {
                "func": {
                    "value": "MyLinearFunc.apply",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[X, W]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "gmul/opt-gmm.py": {
        "torch": {
            "manual_seed_6": {
                "seed": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LBFGS_34": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.DoubleTensor(batch, rows, width).cuda().normal_()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_21": {
                "data": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.DoubleTensor(width, cols).cuda().normal_()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_22": {
                "data": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.DoubleTensor(batch, int(width / blocksize), int(cols / blocksize)).cuda().normal_()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gmul/opt-gmv.py": {
        "torch": {
            "manual_seed_6": {
                "seed": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LBFGS_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_15": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_16": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_17": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(batch, dim_input).cuda().normal_()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_20": {
                "data": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(dim_input, dim_output).cuda().normal_()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_21": {
                "data": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(batch, int(dim_input / blocksize), int(dim_output / blocksize)).cuda().normal_()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gmul/opt-mm.py": {
        "torch": {
            "manual_seed_6": {
                "seed": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_13": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(batch, dim_input).cuda().normal_()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_17": {
                "data": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(dim_input, dim_output).cuda().normal_()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gmul/setup.py": {
        "torch": {}
    },
    "gmul/tcop/gmm.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_28": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "grad_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "variable": {
                    "value": "grad_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gmul/tcop/gmul.py": {
        "torch": {
            "zeros_9": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "A.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "B.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b * rows",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "B.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gmul/tcop/gmv.py": {
        "torch": {
            "zeros_8": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "variable": {
                    "value": "dweight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "doutput.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "dgate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "int(input.size(1) / block_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "grad_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "grad_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gmul/tcop/mm.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "A.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "B.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "A.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "B.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "A.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "B.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_11": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_21": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "input": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/main.py": {
        "torch": {
            "device_227": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_231": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_251": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_input, n_blocks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_input, dim_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x.view(b, 784))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gb1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gb2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gb3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gb4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gb5(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_135": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_224": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.gb1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.gb2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.gb3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.gb4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.gb5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_124": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.linear1(x.view(b, 784)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.gb1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.gb2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.gb3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.gb4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.gb5(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(hidden_size / block_size) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nll_loss_158": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comp * x",
                            "BinOp"
                        ],
                        [
                            "res / (torch.sum(res, dim=-1, keepdim=True) / x.shape[-1])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "word_language_model/data.py": {
        "torch": {}
    },
    "word_language_model/main.py": {
        "torch": {
            "device_85": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_170": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_326": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_329": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_377": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__255": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_311": {
                "variable": {
                    "value": "(bottomk, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param.abs().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(percentile * param.numel())",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_359": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.RNNModel(args.model, ntokens, args.emsize, args.nhid, args.nlayers, args.dropout, args.tied, args.sparsity, args.blocksize, args.mode).to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_364": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.RNNModel(args.model, ntokens, args.emsize, args.nhid, args.nlayers, args.dropout, args.tied, args.sparsity, args.blocksize, args.mode).to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "word_language_model/model.py": {
        "torch": {
            "Parameter_38": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size, num_chunks * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, num_chunks * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_156": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "gih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_ih(inp).view(bsize, self.ih_nblock, 4 * self.hh_nblock)",
                            "Call"
                        ],
                        [
                            "self.g_ih * weight_ih",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(zeros, zeros)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "ghh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_hh(hx).view(bsize, self.hh_nblock, 4 * self.hh_nblock)",
                            "Call"
                        ],
                        [
                            "self.g_hh * weight_hh",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_174": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_175": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_176": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_193": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_194": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_208": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnn_modulelist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "new_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_251": {
                "variable": {
                    "value": "new_hidden[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_hidden[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_chunks * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_chunks * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.g_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, self.ih_nblock)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.g_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, self.hh_nblock)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_143": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comp * x",
                            "BinOp"
                        ],
                        [
                            "res / (torch.sum(res, dim=-1, keepdim=True) / x.shape[-1])",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "res + [i0 @ (g1.unsqueeze(-1).unsqueeze(-1) * new_weight_ih).view(wshape) + i1 @ (g2.unsqueeze(-1).unsqueeze(-1) * new_weight_hh).view(wshape)]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_244": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.drop(output)",
                            "Call"
                        ],
                        [
                            "torch.stack(output)",
                            "Call"
                        ],
                        [
                            "self.rnn[idx_layer + 1](output)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_181": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comp * x",
                            "BinOp"
                        ],
                        [
                            "res / (torch.sum(res, dim=-1, keepdim=True) / x.shape[-1])",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "res + [i0 @ (g1.unsqueeze(-1).unsqueeze(-1) * new_weight_ih).view(wshape) + i1 @ (g2.unsqueeze(-1).unsqueeze(-1) * new_weight_hh).view(wshape)]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.ih_nblock",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hh_nblock",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_99": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(int(hidden_size / blocksize / 2 * blocksize), int(hidden_size * 4 / blocksize / 2 * blocksize))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "block_diag_102": {
                "variable": {
                    "value": "self.g_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*[block] * 2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "block_diag_103": {
                "variable": {
                    "value": "self.g_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*[block] * 2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.g_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, self.ih_nblock * self.hh_nblock * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.g_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, self.hh_nblock * self.hh_nblock * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_105": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(int(hidden_size / blocksize / 4 * blocksize), int(hidden_size * 4 / blocksize / 4 * blocksize))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "block_diag_108": {
                "variable": {
                    "value": "self.g_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*[block] * 4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "block_diag_109": {
                "variable": {
                    "value": "self.g_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*[block] * 4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_206": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_111": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(int(hidden_size / blocksize / 12 * blocksize), int(hidden_size * 4 / blocksize / 12 * blocksize))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "block_diag_114": {
                "variable": {
                    "value": "self.g_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*[block] * 12",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "block_diag_115": {
                "variable": {
                    "value": "self.g_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*[block] * 12",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.ih_nblock * self.hh_nblock * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hh_nblock * self.hh_nblock * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}