{
    "ECLARE/libs/dataset.py": {
        "sklearn": {}
    },
    "ECLARE/libs/features.py": {
        "sklearn": {
            "scale_137": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "copy": {
                    "value": "copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "norm": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'l2'",
                            "Method Argument"
                        ],
                        [
                            "'l2'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scale_163": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "copy": {
                    "value": "copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "norm": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'l2'",
                            "Method Argument"
                        ],
                        [
                            "'l2'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ECLARE/libs/labels.py": {
        "sklearn": {
            "scale_60": {
                "X": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "copy": {
                    "value": "copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "norm": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'max'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ECLARE/libs/model.py": {
        "sklearn": {
            "normalize_26": {
                "variable": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self._doc_embed(dataset, 0, encoder, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_68": {
                "variable": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self._doc_embed(dataset, 0, encoder, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_71": {
                "variable": {
                    "value": "lbl_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "y.transpose().dot(docs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_40": {
                "seed": {
                    "value": "self.tree_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_41": {
                "seed": {
                    "value": "self.tree_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ECLARE/libs/tree.py": {
        "sklearn": {
            "scale_16": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(X, norm='l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "ECLARE/models/extreme_classifier.py": {
        "sklearn": {
            "normalize_45": {
                "variable": {
                    "value": "label_word",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "label_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(params.data_dir, params.dataset, params.label_words)",
                            "Call"
                        ],
                        [
                            "du.read_sparse_file(label_word)[v_lbl]",
                            "Subscript"
                        ],
                        [
                            "label_word.tocsc()[:, label_features]",
                            "Subscript"
                        ],
                        [
                            "sp.hstack([label_word, padd]).tocsr()",
                            "Call"
                        ],
                        [
                            "normalize(label_word, norm='l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_76": {
                "variable": {
                    "value": "yf",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.lblft_npz.dot(emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_278": {
                "variable": {
                    "value": "lbl_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "n_gph.dot(lbl_cnt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_97": {
                "X": {
                    "value": "lbl_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_gph.dot(normalize(lbl_cnt))",
                            "Call"
                        ],
                        [
                            "n_gph.dot(lbl_cnt).tocsr()",
                            "Call"
                        ],
                        [
                            "retain_topk(lbl_cnt.tocsr(), k=1000).tocsr()",
                            "Call"
                        ],
                        [
                            "normalize(n_gph.dot(lbl_cnt))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.depth_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsigmoid_158": {
                "input": {
                    "value": "self.depth_node._predict(batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "params.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ECLARE/models/network.py": {
        "sklearn": {
            "normalize_133": {
                "variable": {
                    "value": "label_word",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "label_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.lblft",
                            "Attribute"
                        ],
                        [
                            "self.to_clusters.dot(label_word)",
                            "Call"
                        ],
                        [
                            "normalize(label_word, norm='l2')",
                            "Call"
                        ],
                        [
                            "self._padded(label_word, (row + 1, col))",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "sparse_coo_tensor_177": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.vstack([mat.row, mat.col]))",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(mat.data)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size(mat.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_322": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lbl_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['lf'].cuda()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_312": {
                "input": {
                    "value": "shorty",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.lbs_params[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ECLARE/libs/collate_fn.py": {
        "torch": {
            "pad_sequence_31": {
                "sequences": {
                    "value": "list(map(lambda x: torch.from_numpy(x).type(dtype), Var))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "padding_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "b_data[X]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: torch.from_numpy(x[0]), batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "b_data[X_ptr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s_docs.indptr[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "b_data[X_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s_docs.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "b_data[X_wts]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s_docs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "f_shoty",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(s_nbr.getnnz(axis=0) > 0)[0]",
                            "Subscript"
                        ],
                        [
                            "f_shoty.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "Y_r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_lbs + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_126": {
                "variable": {
                    "value": "Y_r[f_shoty]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "lbl_pred.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_149": {
                "variable": {
                    "value": "f_shoty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.vstack(list(map(lambda x: x[2], batch))).tocsr()",
                            "Call"
                        ],
                        [
                            "sp.vstack(list(map(lambda x: x[2], batch))).tocsr()",
                            "Call"
                        ],
                        [
                            "_paddedbatch(map(lambda x: indices[x[0]:x[1]], zip(indptr[:-1], indptr[1:])), self.n_lbs, dtype=torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "sp.vstack(list(map(lambda x: x[2], batch))).tocsr()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "Y_r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_lbs + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_164": {
                "variable": {
                    "value": "Y_r[f_shoty]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "lbl_pred.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "b_data[lf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(shoty_lf.getnnz(axis=0) > 0)[0]",
                            "Subscript"
                        ],
                        [
                            "np.where(shoty_lf.getnnz(axis=0) > 0)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "b_data[Y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.vstack(list(map(lambda x: x[1], batch))).tocsc()",
                            "Call"
                        ],
                        [
                            "np.take_along_axis(Y, _Y_s.numpy(), axis=1).todense()",
                            "Call"
                        ],
                        [
                            "sp.vstack(list(map(lambda x: x[1], batch))).tocsc()",
                            "Call"
                        ],
                        [
                            "np.take_along_axis(Y, Y_s.numpy(), axis=1).todense()",
                            "Call"
                        ],
                        [
                            "sp.vstack(list(map(lambda x: x[0][1], batch))).tocsc()",
                            "Call"
                        ],
                        [
                            "np.take_along_axis(Y, b_data['Y_s'].numpy(), axis=1).todense()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "b_data[lf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(shoty_lf.getnnz(axis=0) > 0)[0]",
                            "Subscript"
                        ],
                        [
                            "np.where(shoty_lf.getnnz(axis=0) > 0)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "variable": {
                    "value": "b_data[Y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.vstack(list(map(lambda x: x[1], batch))).tocsc()",
                            "Call"
                        ],
                        [
                            "np.take_along_axis(Y, _Y_s.numpy(), axis=1).todense()",
                            "Call"
                        ],
                        [
                            "sp.vstack(list(map(lambda x: x[1], batch))).tocsc()",
                            "Call"
                        ],
                        [
                            "np.take_along_axis(Y, Y_s.numpy(), axis=1).todense()",
                            "Call"
                        ],
                        [
                            "sp.vstack(list(map(lambda x: x[0][1], batch))).tocsc()",
                            "Call"
                        ],
                        [
                            "np.take_along_axis(Y, b_data['Y_s'].numpy(), axis=1).todense()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "b_data[Y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.vstack(list(map(lambda x: x[1], batch))).tocsc()",
                            "Call"
                        ],
                        [
                            "np.take_along_axis(Y, _Y_s.numpy(), axis=1).todense()",
                            "Call"
                        ],
                        [
                            "sp.vstack(list(map(lambda x: x[1], batch))).tocsc()",
                            "Call"
                        ],
                        [
                            "np.take_along_axis(Y, Y_s.numpy(), axis=1).todense()",
                            "Call"
                        ],
                        [
                            "sp.vstack(list(map(lambda x: x[0][1], batch))).tocsc()",
                            "Call"
                        ],
                        [
                            "np.take_along_axis(Y, b_data['Y_s'].numpy(), axis=1).todense()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "b_data[Y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sp.vstack(list(map(lambda x: x[1], batch))).todense()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ECLARE/libs/dataset_base.py": {
        "torch": {}
    },
    "ECLARE/libs/model_base.py": {
        "torch": {
            "DataLoader_166": {
                "variable": {
                    "value": "dt_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._create_dataset(os.path.join(data_dir, dataset), fname_features=ts_feat_fname, fname_labels=ts_label_fname, data=data, keep_invalid=keep_invalid, normalize_features=normalize_features, normalize_labels=normalize_labels, mode='test', feature_indices=feature_indices, label_indices=label_indices)",
                            "Call"
                        ],
                        [
                            "self._create_dataset(os.path.join(data_dir, dataset), fname_features=ts_feat_fname, fname_labels=ts_feat_fname, data=data, keep_invalid=keep_invalid, normalize_features=normalize_features, normalize_labels=normalize_labels, mode='test', feature_indices=feature_indices, label_indices=label_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['batch_size']",
                            "Subscript"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "construct_collate_fn(dataset.feature_type, use_shortlist, sparse_label_fts=sparse_label_fts, sparse_graph=sparse_graph_fts, padding_idx=dataset.features.num_features, num_labels=dataset.num_labels, traverse=traverse, freeze_params=self.freeze_embeddings, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_113": {
                "seed": {
                    "value": "self.tree_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_114": {
                "seed": {
                    "value": "self.tree_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_191": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_234": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_405": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_431": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_462": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, fname + '_params.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, fname + '_params.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_248": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data['Y_d'].cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net._predict(batch_data)",
                            "Call"
                        ],
                        [
                            "torch.add(_val, score)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_250": {
                "variable": {
                    "value": "(score, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net._predict(batch_data)",
                            "Call"
                        ],
                        [
                            "torch.add(_val, score)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_307": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_468": {
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, fname + '_params.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, fname + '_params.pkl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ECLARE/libs/optimizer_utils.py": {
        "torch": {
            "SGD_43": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.embed.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseAdam_51": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.embed.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_53": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.embed.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ECLARE/main.py": {
        "torch": {
            "from_numpy_51": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((indices.size + 1, params.embedding_dims), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "{'weight': weight}",
                            "Dict"
                        ],
                        [
                            "torch.load(fname)",
                            "Call"
                        ],
                        [
                            "np.load(fname)",
                            "Call"
                        ],
                        [
                            "embeddings[indices]",
                            "Subscript"
                        ],
                        [
                            "utils.append_padding_embedding(embeddings)",
                            "Call"
                        ],
                        [
                            "{'weight': torch.from_numpy(embeddings)}",
                            "Dict"
                        ],
                        [
                            "model.extract(params.model_dir)",
                            "Call"
                        ],
                        [
                            "load_embeddings(params)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_98": {
                "obj": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((indices.size + 1, params.embedding_dims), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "{'weight': weight}",
                            "Dict"
                        ],
                        [
                            "torch.load(fname)",
                            "Call"
                        ],
                        [
                            "np.load(fname)",
                            "Call"
                        ],
                        [
                            "embeddings[indices]",
                            "Subscript"
                        ],
                        [
                            "utils.append_padding_embedding(embeddings)",
                            "Call"
                        ],
                        [
                            "{'weight': torch.from_numpy(embeddings)}",
                            "Dict"
                        ],
                        [
                            "model.extract(params.model_dir)",
                            "Call"
                        ],
                        [
                            "load_embeddings(params)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "emb_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(params.model_dir, 'embeddings.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_177": {
                "seed": {
                    "value": "params.tree_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_178": {
                "seed": {
                    "value": "params.tree_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_187": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.embeddings",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((indices.size + 1, params.embedding_dims), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "{'weight': weight}",
                            "Dict"
                        ],
                        [
                            "torch.load(fname)",
                            "Call"
                        ],
                        [
                            "np.load(fname)",
                            "Call"
                        ],
                        [
                            "embeddings[indices]",
                            "Subscript"
                        ],
                        [
                            "utils.append_padding_embedding(embeddings)",
                            "Call"
                        ],
                        [
                            "{'weight': torch.from_numpy(embeddings)}",
                            "Dict"
                        ],
                        [
                            "model.extract(params.model_dir)",
                            "Call"
                        ],
                        [
                            "load_embeddings(params)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((indices.size + 1, params.embedding_dims), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "{'weight': weight}",
                            "Dict"
                        ],
                        [
                            "torch.load(fname)",
                            "Call"
                        ],
                        [
                            "np.load(fname)",
                            "Call"
                        ],
                        [
                            "embeddings[indices]",
                            "Subscript"
                        ],
                        [
                            "utils.append_padding_embedding(embeddings)",
                            "Call"
                        ],
                        [
                            "{'weight': torch.from_numpy(embeddings)}",
                            "Dict"
                        ],
                        [
                            "model.extract(params.model_dir)",
                            "Call"
                        ],
                        [
                            "load_embeddings(params)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ECLARE/models/custom_embeddings.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_embeddings + _offset, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "embedding_bag_64": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.to(X['X_ind'])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "offsets": {
                    "value": "self.to(X['X_ptr'])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_sample_weights": {
                    "value": "self.to(X['X_wts'])",
                    "type": "Call",
                    "possible_values": []
                },
                "include_last_offset": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ECLARE/models/linear_layer.py": {
        "torch": {
            "Parameter_111": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.output_size, self.input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "lclf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lclf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(lclf, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention(lclf, self.print)",
                            "Call"
                        ],
                        [
                            "self._get_clf(lclf, shorty, sparse=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_124": {
                "input": {
                    "value": "shorty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "wts",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_152": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "lclf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(lclf, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention(lclf, self.print)",
                            "Call"
                        ],
                        [
                            "self._get_clf(lclf, shorty, sparse=False)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_clf(self.bias, shorty, True, self.padding_idx)",
                            "Call"
                        ],
                        [
                            "self._get_clf(bias, shorty, sparse=False).squeeze()",
                            "Call"
                        ],
                        [
                            "bias + 0",
                            "BinOp"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.output_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ECLARE/models/transform_layer.py": {
        "torch": {
            "spectral_norm_12": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(hidd_dims, hidd_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "spectral_norm_36": {
                "variable": {
                    "value": "self.trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(input_dims, input_dims, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_37": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(input_dims * degree, degree, False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "self.nl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_39": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, input_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_73": {
                "variable": {
                    "value": "self.nl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.nonLin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*elements",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sigmoid_75": {
                "variable": {
                    "value": "self.nl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "hidd_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidd_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "input_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "input_dims * degree",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_77": {
                "variable": {
                    "value": "self.nl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_107": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}