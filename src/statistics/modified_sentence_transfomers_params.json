{
    "examples/application_clustering.py": {
        "sklearn": {
            "KMeans_28": {
                "variable": {
                    "value": "clustering_model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/application_clustering_wikipedia_sections.py": {
        "sklearn": {
            "AgglomerativeClustering_45": {
                "variable": {
                    "value": "km",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(set([row[1] for row in corpus]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sentence_transformers/evaluation/BinaryEmbeddingSimilarityEvaluator.py": {
        "sklearn": {
            "paired_cosine_distances_72": {
                "X": {
                    "value": "embeddings1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "Y": {
                    "value": "embeddings2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "paired_manhattan_distances_73": {
                "X": {
                    "value": "embeddings1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "Y": {
                    "value": "embeddings2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "paired_euclidean_distances_74": {
                "X": {
                    "value": "embeddings1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "Y": {
                    "value": "embeddings2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_40": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/evaluation/EmbeddingSimilarityEvaluator.py": {
        "sklearn": {
            "paired_manhattan_distances_88": {
                "X": {
                    "value": "embeddings1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "Y": {
                    "value": "embeddings2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "paired_euclidean_distances_89": {
                "X": {
                    "value": "embeddings1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "Y": {
                    "value": "embeddings2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "paired_cosine_distances_82": {
                "X": {
                    "value": "embeddings1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "Y": {
                    "value": "embeddings2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_46": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/evaluation/TripletEvaluator.py": {
        "sklearn": {
            "paired_cosine_distances_60": {
                "variable": {
                    "value": "pos_cos_distance",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": []
                },
                "Y": {
                    "value": "emb2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "paired_cosine_distances_61": {
                "variable": {
                    "value": "neg_cos_distances",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": []
                },
                "Y": {
                    "value": "emb3",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "paired_manhattan_distances_64": {
                "variable": {
                    "value": "pos_manhatten_distance",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": []
                },
                "Y": {
                    "value": "emb2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "paired_manhattan_distances_65": {
                "variable": {
                    "value": "neg_manhatten_distances",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": []
                },
                "Y": {
                    "value": "emb3",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "paired_euclidean_distances_68": {
                "variable": {
                    "value": "pos_euclidean_distance",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": []
                },
                "Y": {
                    "value": "emb2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "paired_euclidean_distances_69": {
                "variable": {
                    "value": "neg_euclidean_distances",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": []
                },
                "Y": {
                    "value": "emb3",
                    "type": "Name",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_29": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/evaluation_stsbenchmark.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/training_multi-task.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "train_dataloader_nli",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data_nli",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(nli_reader.get_examples('train.gz'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "train_dataloader_sts",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data_sts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_multilingual.py": {
        "torch": {
            "DataLoader_65": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ParallelSentencesDataset(student_model=model, teacher_model=teacher_model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('STS2017.en-de.txt.gz'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "xnli_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "xnli_reader",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ParallelSentencesDataset(student_model=model, teacher_model=teacher_model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_nli_T5.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(nli_reader.get_examples('train.gz'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_nli_albert.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(nli_reader.get_examples('train.gz'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_nli_bert.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(nli_reader.get_examples('train.gz'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_nli_distilbert.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(nli_reader.get_examples('train.gz'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_nli_roberta.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(nli_reader.get_examples('train.gz'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_nli_xlm-roberta.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(nli_reader.get_examples('train.gz'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_albert.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_avg_word_embeddings.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_bert.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_bilstm.py": {
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_bow.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_cnn.py": {
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_continue_training.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_40": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_distilbert.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_roberta.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_tf-idf_word_embeddings.py": {
        "torch": {
            "DataLoader_73": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_stsbenchmark_xlnet.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(sts_reader.get_examples('sts-train.csv'), model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-dev.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=sts_reader.get_examples('sts-test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/training_wikipedia_sections.py": {
        "torch": {
            "DataLoader_51": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=triplet_reader.get_examples('train.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=triplet_reader.get_examples('validation.csv', 1000), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SentencesDataset(examples=triplet_reader.get_examples('test.csv'), model=model)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "sentence_transformers/SentenceTransformer.py": {
        "torch": {
            "device_90": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "features[feature_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.asarray(features[feature_name])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "feature_lists[feature_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.asarray(feature_lists[feature_name])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_251": {
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__388": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_norm",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clip_grad_norm__391": {
                "parameters": {
                    "value": "loss_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_norm",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/data_samplers.py": {
        "torch": {}
    },
    "sentence_transformers/datasets/ParallelSentencesDataset.py": {
        "torch": {
            "tensor_68": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "self.teacher_model.encode(eng_sentences, batch_size=32, show_progress_bar=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/datasets/SentenceLabelDataset.py": {
        "torch": {
            "tensor_98": {
                "variable": {
                    "value": "tensor_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "label_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.long",
                            "Attribute"
                        ],
                        [
                            "torch.float",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "sentence_transformers/datasets/SentencesDataset.py": {
        "torch": {
            "tensor_68": {
                "variable": {
                    "value": "tensor_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "label_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.long",
                            "Attribute"
                        ],
                        [
                            "torch.float",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "sentence_transformers/evaluation/LabelAccuracyEvaluator.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "input": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_59": {
                "input": {
                    "value": "label_ids",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/evaluation/MSEEvaluator.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/losses/BatchHardTripletLoss.py": {
        "torch": {
            "matmul_119": {
                "variable": {
                    "value": "dot_product",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "embeddings.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_124": {
                "variable": {
                    "value": "square_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(embeddings, embeddings.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_154": {
                "variable": {
                    "value": "indices_equal",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "labels.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_181": {
                "variable": {
                    "value": "indices_equal",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "labels.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_140": {
                "input": {
                    "value": "distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "square_norm.unsqueeze(0) - 2.0 * dot_product + square_norm.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "distances + mask * 1e-16",
                            "BinOp"
                        ],
                        [
                            "(1.0 - mask) * torch.sqrt(distances)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "sentence_transformers/losses/CosineSimilarityLoss.py": {
        "torch": {
            "cosine_similarity_16": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "x1": {
                    "value": "rep_a",
                    "type": "Name",
                    "possible_values": []
                },
                "x2": {
                    "value": "rep_b",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MSELoss_17": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/losses/MSELoss.py": {
        "torch": {
            "MSELoss_16": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/losses/MultipleNegativesRankingLoss.py": {
        "torch": {
            "matmul_39": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings_a",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "embeddings_b.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_40": {
                "variable": {
                    "value": "diagonal_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "mean_log_row_sum_exp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logsumexp(scores, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_40": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(embeddings_a, embeddings_b.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_41": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(embeddings_a, embeddings_b.t())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/losses/SoftmaxLoss.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_vectors_concatenated * sentence_embedding_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_42": {
                "input": {
                    "value": "rep_a - rep_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/losses/TripletLoss.py": {
        "torch": {
            "relu_31": {
                "variable": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_pos - distance_neg + self.triplet_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pairwise_distance_13": {
                "x1": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x2": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pairwise_distance_14": {
                "x1": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x2": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_12": {
                "x1": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x2": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/losses/test_batch_hard_triplet_loss.py": {
        "torch": {
            "from_numpy_76": {
                "ndarray": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(min_class, min_class + num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "ndarray": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(min_class, min_class + num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "ndarray": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.randint(min_class, min_class + num_classes, size=num_data).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "1.0 + 2e-07 * np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "BinOp"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "1.0 + 2e-07 * np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "BinOp"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "1.0 + 2e-07 * np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "BinOp"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_174": {
                "ndarray": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "1.0 + 2e-07 * np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "BinOp"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_207": {
                "ndarray": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "1.0 + 2e-07 * np.random.randn(num_data, feat_dim).astype(np.float32)",
                            "BinOp"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(num_data, feat_dim).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sentence_transformers/models/ALBERT.py": {
        "torch": {}
    },
    "sentence_transformers/models/BERT.py": {
        "torch": {}
    },
    "sentence_transformers/models/BoW.py": {
        "torch": {}
    },
    "sentence_transformers/models/CNN.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv(token_embeddings) for conv in self.convs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(input_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_30": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_word_embedding_dimension",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel_sizes",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_54": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/models/CamemBERT.py": {
        "torch": {}
    },
    "sentence_transformers/models/Dense.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_35": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_44": {
                "f": {
                    "value": "os.path.join(input_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_44": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/models/DistilBERT.py": {
        "torch": {}
    },
    "sentence_transformers/models/LSTM.py": {
        "torch": {
            "LSTM_26": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "word_embedding_dimension",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Name",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_30": {
                "variable": {
                    "value": "sentence_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features['sentence_lengths']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_32": {
                "variable": {
                    "value": "packed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "token_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['token_embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sentence_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(features['sentence_lengths'], min=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_58": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(input_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_34": {
                "sequence": {
                    "value": "packed[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/models/Pooling.py": {
        "torch": {
            "cat_66": {
                "variable": {
                    "value": "output_vector",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "sum_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "token_embeddings * input_mask_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_59": {
                "variable": {
                    "value": "sum_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['token_weights_sum'].unsqueeze(-1).expand(sum_embeddings.size())",
                            "Call"
                        ],
                        [
                            "input_mask_expanded.sum(1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(sum_mask, min=1e-09)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_47": {
                "input": {
                    "value": "token_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['token_embeddings']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_64": {
                "input": {
                    "value": "sum_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['token_weights_sum'].unsqueeze(-1).expand(sum_embeddings.size())",
                            "Call"
                        ],
                        [
                            "input_mask_expanded.sum(1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(sum_mask, min=1e-09)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sentence_transformers/models/RoBERTa.py": {
        "torch": {}
    },
    "sentence_transformers/models/T5.py": {
        "torch": {}
    },
    "sentence_transformers/models/WordEmbeddings.py": {
        "torch": {
            "Embedding_25": {
                "variable": {
                    "value": "self.emb_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddings_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "len(split) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_82": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(input_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "embedding_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embedding_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray(embedding_weights)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(embedding_weights)",
                            "Call"
                        ],
                        [
                            "weights['emb_layer.weight']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_69": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_path, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/models/WordWeights.py": {
        "torch": {
            "Embedding_42": {
                "variable": {
                    "value": "self.emb_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_53": {
                "variable": {
                    "value": "token_weights_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "token_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "token_weights_raw * input_mask.float()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "sentence_transformers/models/XLMRoBERTa.py": {
        "torch": {}
    },
    "sentence_transformers/models/XLNet.py": {
        "torch": {}
    },
    "sentence_transformers/util.py": {
        "torch": {}
    }
}