{
    "allennlp/allennlp/tests/training/metrics/auc_test.py": {
        "sklearn": {
            "roc_curve_28": {
                "variable": {
                    "value": "(false_positive_rates, true_positive_rates, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "torch.cat(all_labels, dim=0).numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "torch.cat(all_predictions, dim=0).numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_30": {
                "variable": {
                    "value": "real_auc_value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "false_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(torch.cat(all_labels, dim=0).numpy(), torch.cat(all_predictions, dim=0).numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy(), pos_label=4)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels[:4].numpy(), predictions[:4].numpy())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(torch.cat(all_labels, dim=0).numpy(), torch.cat(all_predictions, dim=0).numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy(), pos_label=4)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels[:4].numpy(), predictions[:4].numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_40": {
                "variable": {
                    "value": "(false_positive_rates, true_positive_rates, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predictions.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_42": {
                "variable": {
                    "value": "real_auc_value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "false_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(torch.cat(all_labels, dim=0).numpy(), torch.cat(all_predictions, dim=0).numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy(), pos_label=4)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels[:4].numpy(), predictions[:4].numpy())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(torch.cat(all_labels, dim=0).numpy(), torch.cat(all_predictions, dim=0).numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy(), pos_label=4)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels[:4].numpy(), predictions[:4].numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_55": {
                "variable": {
                    "value": "(false_positive_rates, true_positive_rates, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predictions.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "auc_58": {
                "variable": {
                    "value": "real_auc_value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "false_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(torch.cat(all_labels, dim=0).numpy(), torch.cat(all_predictions, dim=0).numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy(), pos_label=4)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels[:4].numpy(), predictions[:4].numpy())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(torch.cat(all_labels, dim=0).numpy(), torch.cat(all_predictions, dim=0).numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy(), pos_label=4)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels[:4].numpy(), predictions[:4].numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_76": {
                "variable": {
                    "value": "(false_positive_rates, true_positive_rates, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[:4].numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predictions[:4].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_78": {
                "variable": {
                    "value": "real_auc_value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "false_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(torch.cat(all_labels, dim=0).numpy(), torch.cat(all_predictions, dim=0).numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy(), pos_label=4)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels[:4].numpy(), predictions[:4].numpy())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(torch.cat(all_labels, dim=0).numpy(), torch.cat(all_predictions, dim=0).numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy())",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels.numpy(), predictions.numpy(), pos_label=4)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(labels[:4].numpy(), predictions[:4].numpy())",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "randn_34": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_35": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(8,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_50": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(8,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_69": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_70": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(8,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_18": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_19": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(8,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "tensors": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/auc.py": {
        "sklearn": {
            "roc_curve_73": {
                "variable": {
                    "value": "(false_positive_rates, true_positive_rates, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self._all_gold_labels.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "self._all_predictions.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "self._positive_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "auc_76": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "false_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(self._all_gold_labels.numpy(), self._all_predictions.numpy(), pos_label=self._positive_label)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_positive_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.roc_curve(self._all_gold_labels.numpy(), self._all_predictions.numpy(), pos_label=self._positive_label)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "unique_50": {
                "variable": {
                    "value": "unique_gold_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "self._all_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._all_predictions, torch.masked_select(predictions, mask).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "self._all_gold_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._all_gold_labels, torch.masked_select(gold_labels, mask).long()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_62": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gold_labels.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "masked_select_66": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(batch_size)",
                            "Call"
                        ],
                        [
                            "mask.to(dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_68": {
                "input": {
                    "value": "gold_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(batch_size)",
                            "Call"
                        ],
                        [
                            "mask.to(dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/carb.py": {
        "sklearn": {
            "auc_278": {
                "x": {
                    "value": "temp_rec_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rec_scores.copy()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp_prec_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prec_scores.copy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/oie16.py": {
        "sklearn": {
            "precision_recall_curve_233": {
                "variable": {
                    "value": "(precision_ls, recall_ls, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_true",
                            "variable"
                        ],
                        [
                            "y_true + sentence_y_true",
                            "BinOp"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "y_true[:-1]",
                            "Subscript"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_scores",
                            "variable"
                        ],
                        [
                            "y_scores + sentence_y_scores",
                            "BinOp"
                        ],
                        [
                            "np.array(y_scores)",
                            "Call"
                        ],
                        [
                            "[score if not (np.isnan(score) or not np.isfinite(score)) else 0 for score in y_scores]",
                            "ListComp"
                        ],
                        [
                            "y_scores[:-1]",
                            "Subscript"
                        ],
                        [
                            "y_scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "auc_198": {
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/oie_readers/extraction.py": {
        "sklearn": {}
    },
    "imojie/carb_metric.py": {
        "sklearn": {},
        "torch": {}
    },
    "pytorch_transformers/pytorch_transformers/convert_pytorch_checkpoint_to_tf.py": {
        "tensorflow": {
            "as_dtype_73": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "tf_var",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.as_dtype(tensor.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name.replace(patt, repl)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_91": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_75": {
                "var_list": {
                    "value": "[tf_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_118": {
                "f": {
                    "value": "args.pytorch_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/modeling_bert.py": {
        "tensorflow": {
            "list_variables_83": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_88": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_132": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_247": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_248": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_249": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_254": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_287": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_291": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_308": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_324": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_337": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_339": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_357": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_398": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_428": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_458": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_459": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_494": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_498": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_519": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_530": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_962": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_963": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1066": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1067": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1134": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1135": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1209": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_259": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_262": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_680": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_682": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_792": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_859": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_916": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1090": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1150": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1236": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_142": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_232": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_233": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_314": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_498": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_981": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_984": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_232": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_233": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_239": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_361": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_59": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_64": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_95": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_232": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_233": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_238": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "index_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_252": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_294": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_314": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_448": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_449": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_450": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_451": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_579": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_697": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_474": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_ids.size(-1) + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_604": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_720": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_727": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_100": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_225": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_259": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_266": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_242": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_225": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_100": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/modeling_transfo_xl.py": {
        "tensorflow": {
            "list_variables_136": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_variable_140": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "tf_to_pt_map.items()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ger_325": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.q_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_384": {
                "variable": {
                    "value": "self.kv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_386": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_387": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_388": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_417": {
                "variable": {
                    "value": "(head_k, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kv_net(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_424": {
                "variable": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(head_q, head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_433": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_441": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_475": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_476": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_477": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_493": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_495": {
                "variable": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_496": {
                "variable": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_523": {
                "variable": {
                    "value": "zero_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "zero_pad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.size(0), 1) + x.size()[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_544": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_578": {
                "variable": {
                    "value": "AC",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_581": {
                "variable": {
                    "value": "BD",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_598": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_606": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_673": {
                "variable": {
                    "value": "AC",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_674": {
                "variable": {
                    "value": "B_",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w_head_q, r_emb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_690": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_697": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_799": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_800": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_993": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_1008": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_397": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_398": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_486": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_487": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_505": {
                "variable": {
                    "value": "zero_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), qlen - 1, x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_508": {
                "variable": {
                    "value": "zero_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_514": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_532": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_550": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_557": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_566": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_640": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_645": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_653": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_663": {
                "variable": {
                    "value": "r_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_emb_pad, r_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_665": {
                "variable": {
                    "value": "r_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_bias_pad, r_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_822": {
                "variable": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_1005": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1006": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1149": {
                "variable": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1299": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_344": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_344": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_345": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_346": {
                "in_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_347": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_818": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(embed_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_835": {
                "variable": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_1048": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1050": {
                "variable": {
                    "value": "self.r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_layer, self.max_klen, self.n_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1080": {
                "variable": {
                    "value": "empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mem_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "data.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1106": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_803": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_token",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_1143": {
                "input": {
                    "value": "word_emb.new_ones(qlen, klen)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1184": {
                "variable": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_321": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demb",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tril_533": {
                "input": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((x.size(0), x.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "x.size(1) - x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_806": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_811": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_812": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1055": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_1353": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_logits(self.transformer.word_emb, self.out_layer.bias, labels, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_1326": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[0].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_1140": {
                "input": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_1141": {
                "input": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_1331": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[i].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1213": {
                "variable": {
                    "value": "cur_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_emb_pad, cur_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/modeling_xlnet.py": {
        "tensorflow": {
            "list_variables_130": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_variable_134": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "tf_to_pt_map.items()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Parameter_370": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_371": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_372": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_373": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_374": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_376": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_377": {
                "variable": {
                    "value": "self.r_s_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_378": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_379": {
                "variable": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_382": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_396": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_404": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_407": {
                "variable": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_424": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_432": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_442": {
                "variable": {
                    "value": "attn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijbn,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "attn_vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_548": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_549": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_550": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_572": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_736": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_737": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, config.d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_738": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[XLNetLayer(config) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_739": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_769": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_770": {
                "variable": {
                    "value": "mask_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_771": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_772": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask_pad, mask_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_797": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_798": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_808": {
                "variable": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1039": {
                "variable": {
                    "value": "self.lm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1115": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_189": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_414": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_415": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_464": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_467": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_470": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_474": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_488": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_521": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_522": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_523": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_526": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tril_774": {
                "variable": {
                    "value": "mask_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_775": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[:, :qlen] + mask_lo, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_821": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klen",
                            "variable"
                        ],
                        [
                            "klen",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-qlen",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_822": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-beg",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-end",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_835": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_837": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klen",
                            "variable"
                        ],
                        [
                            "klen",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-qlen",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_890": {
                "variable": {
                    "value": "mems_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data_mask.shape[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_891": {
                "variable": {
                    "value": "data_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_902": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([qlen, mlen]).to(attn_mask), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_922": {
                "variable": {
                    "value": "mem_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_923": {
                "variable": {
                    "value": "cat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_927": {
                "variable": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1063": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1242": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1261": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1263": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1265": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1271": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1273": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1277": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_184": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_345": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_346": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_396": {
                "start": {
                    "value": "klen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "klen",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_492": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_499": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "torch.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_516": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_809": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "freq_seq / self.d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_1136": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1139": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1250": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sin_798": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_798": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_901": {
                "n": {
                    "value": "qlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[0]",
                            "Subscript"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_345": {
                "*size": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_346": {
                "*size": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_352": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_791": {
                "tensors": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_902": {
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_184": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/modeling_bert.py": {
        "tensorflow": {
            "list_variables_89": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_94": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_138": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_253": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_254": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_255": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_260": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_297": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_314": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_330": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_351": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_353": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_371": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_395": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_412": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_442": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_472": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_473": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_487": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_508": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_512": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_533": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_544": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_974": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_975": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1078": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1079": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1146": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1147": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1221": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_152": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_265": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_692": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_694": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_804": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_871": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_928": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1102": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1162": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1248": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_148": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_238": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_239": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_320": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_512": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_993": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_996": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_238": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_245": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_375": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_63": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_68": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_99": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_237": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_242": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "index_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_256": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_298": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_328": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_463": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_464": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_465": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_466": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_712": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_489": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_ids.size(-1) + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_619": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_735": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_742": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_104": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_229": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_263": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_270": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_246": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_229": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_104": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/modeling_transfo_xl.py": {
        "tensorflow": {
            "list_variables_136": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_variable_140": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "tf_to_pt_map.items()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ger_325": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.q_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_384": {
                "variable": {
                    "value": "self.kv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_386": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_387": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_388": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_417": {
                "variable": {
                    "value": "(head_k, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kv_net(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_424": {
                "variable": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(head_q, head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_433": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_441": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_475": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_476": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_477": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_493": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_495": {
                "variable": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_496": {
                "variable": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_523": {
                "variable": {
                    "value": "zero_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "zero_pad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.size(0), 1) + x.size()[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_544": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_578": {
                "variable": {
                    "value": "AC",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_581": {
                "variable": {
                    "value": "BD",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_598": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_606": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_673": {
                "variable": {
                    "value": "AC",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_674": {
                "variable": {
                    "value": "B_",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w_head_q, r_emb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_690": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_697": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_799": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_800": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_994": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_1009": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_397": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_398": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_486": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_487": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_505": {
                "variable": {
                    "value": "zero_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), qlen - 1, x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_508": {
                "variable": {
                    "value": "zero_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_514": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_532": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_550": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_557": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_566": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_640": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_645": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_653": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_663": {
                "variable": {
                    "value": "r_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_emb_pad, r_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_665": {
                "variable": {
                    "value": "r_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_bias_pad, r_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_822": {
                "variable": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_1006": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1007": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1150": {
                "variable": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1300": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_344": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_344": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_345": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_346": {
                "in_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_347": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_818": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(embed_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_835": {
                "variable": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_1049": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1051": {
                "variable": {
                    "value": "self.r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_layer, self.max_klen, self.n_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1081": {
                "variable": {
                    "value": "empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mem_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "data.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1107": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_803": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_token",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_1144": {
                "input": {
                    "value": "word_emb.new_ones(qlen, klen)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1185": {
                "variable": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_321": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demb",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tril_533": {
                "input": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((x.size(0), x.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "x.size(1) - x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_806": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_811": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_812": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1056": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_1354": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_logits(self.transformer.word_emb, self.out_layer.bias, labels, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_1327": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[0].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_1141": {
                "input": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_1142": {
                "input": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_1332": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[i].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1214": {
                "variable": {
                    "value": "cur_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_emb_pad, cur_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/modeling_xlnet.py": {
        "tensorflow": {
            "list_variables_134": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_variable_138": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "tf_to_pt_map.items()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Parameter_374": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_375": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_376": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_377": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_378": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_380": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_381": {
                "variable": {
                    "value": "self.r_s_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_382": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_383": {
                "variable": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_386": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_400": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_408": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_411": {
                "variable": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_428": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_436": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_446": {
                "variable": {
                    "value": "attn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijbn,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "attn_vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_556": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_557": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_558": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_580": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_745": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_746": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, config.d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_747": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[XLNetLayer(config) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_748": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_778": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_779": {
                "variable": {
                    "value": "mask_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_780": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_781": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask_pad, mask_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_806": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_807": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_817": {
                "variable": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1048": {
                "variable": {
                    "value": "self.lm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1124": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_193": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_418": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_419": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_468": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_471": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_474": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_478": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_492": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_525": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_526": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_527": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_530": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tril_783": {
                "variable": {
                    "value": "mask_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_784": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[:, :qlen] + mask_lo, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_830": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klen",
                            "variable"
                        ],
                        [
                            "klen",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-qlen",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_831": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-beg",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-end",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_844": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_846": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klen",
                            "variable"
                        ],
                        [
                            "klen",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-qlen",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_899": {
                "variable": {
                    "value": "mems_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data_mask.shape[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_900": {
                "variable": {
                    "value": "data_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_911": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([qlen, mlen]).to(attn_mask), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_931": {
                "variable": {
                    "value": "mem_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_932": {
                "variable": {
                    "value": "cat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_936": {
                "variable": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1072": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1251": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1270": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1272": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1274": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1280": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1282": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1286": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_188": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_349": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_350": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_400": {
                "start": {
                    "value": "klen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "klen",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_463": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_496": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_503": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "torch.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_520": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_818": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "freq_seq / self.d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_1145": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1148": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1259": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sin_807": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_807": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_910": {
                "n": {
                    "value": "qlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[0]",
                            "Subscript"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_349": {
                "*size": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_350": {
                "*size": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_356": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_800": {
                "tensors": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_911": {
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_188": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/__init__.py": {
        "torch": {}
    },
    "allennlp/allennlp/commands/elmo.py": {
        "torch": {
            "cat_207": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ele[0].unsqueeze(1) for ele in without_bos_eos]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/common/checks.py": {
        "torch": {
            "device_count_79": {
                "variable": {
                    "value": "num_devices_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/common/configuration.py": {
        "torch": {}
    },
    "allennlp/allennlp/common/testing/model_test_case.py": {
        "torch": {
            "zeros_192": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "parameter.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/common/util.py": {
        "torch": {
            "manual_seed_201": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_int('pytorch_seed', 133)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_204": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_int('pytorch_seed', 133)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/data/dataset.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/dataset_readers/multiprocess_dataset_reader.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/adjacency_field.py": {
        "torch": {
            "ones_104": {
                "*size": {
                    "value": "desired_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_lengths['num_tokens']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "desired_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_lengths['num_tokens']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/array_field.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "return_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.asarray(numpy.ones(max_shape, dtype=self.dtype) * self.padding_value, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/field.py": {
        "torch": {
            "stack_111": {
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/index_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/knowledge_graph_field.py": {
        "torch": {
            "stack_268": {
                "variable": {
                    "value": "batched_linking",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor['linking'] for tensor in tensor_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/label_field.py": {
        "torch": {
            "tensor_93": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._label_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/multilabel_field.py": {
        "torch": {
            "zeros_112": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/data/fields/namespace_swapping_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/production_rule_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/sequence_label_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/span_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/fields/text_field.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/iterators/data_iterator.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/iterators/multiprocess_iterator.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/dep_label_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/elmo_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/ner_tag_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/openai_transformer_byte_pair_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/pos_tag_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/pretrained_transformer_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/single_id_token_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/spacy_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/token_characters_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/token_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/data/token_indexers/wordpiece_indexer.py": {
        "torch": {}
    },
    "allennlp/allennlp/interpret/attackers/hotflip.py": {
        "torch": {
            "from_numpy_273": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads[grad_input_field]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(grad)",
                            "Call"
                        ],
                        [
                            "grad.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_275": {
                "variable": {
                    "value": "word_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.LongTensor([token_idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_layer.weight",
                            "Attribute"
                        ],
                        [
                            "embedding_layer(all_inputs).squeeze()",
                            "Call"
                        ],
                        [
                            "embedding_matrix.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_280": {
                "variable": {
                    "value": "new_embed_dot_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,kj->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad, embedding_matrix)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_281": {
                "variable": {
                    "value": "prev_embed_dot_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bij->bi",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad, word_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_281": {
                "variable": {
                    "value": "prev_embed_dot_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "all_inputs[token_characters]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "all_inputs[elmo]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/interpret/attackers/input_reduction.py": {
        "torch": {}
    },
    "allennlp/allennlp/interpret/saliency_interpreters/smooth_gradient.py": {
        "torch": {
            "randn_55": {
                "*size": {
                    "value": "output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/archival.py": {
        "torch": {}
    },
    "allennlp/allennlp/models/basic_classifier.py": {
        "torch": {
            "Linear_80": {
                "variable": {
                    "value": "self._classification_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._classifier_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classification_layer(embedded_text)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/bert_for_classification.py": {
        "torch": {
            "Dropout_78": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self._classification_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_model.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_labels",
                            "variable"
                        ],
                        [
                            "vocab.get_vocab_size(namespace=self._label_namespace)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classification_layer(pooled)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/biaffine_dependency_parser.py": {
        "torch": {
            "Bilinear_115": {
                "variable": {
                    "value": "self.tag_bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "tag_representation_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_tag_representation.size()",
                            "Call"
                        ]
                    ]
                },
                "in2_features": {
                    "value": "tag_representation_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_tag_representation.size()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab.get_vocab_size('head_tags')",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_121": {
                "variable": {
                    "value": "self._input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self._head_sentinel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1, 1, encoder.get_output_dim()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "encoded_text",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_sentinel, encoded_text]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask.new_ones(batch_size, 1), mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_505": {
                "variable": {
                    "value": "normalized_pairwise_head_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_head_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tag_bilinear(head_tag_representation, child_tag_representation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_505": {
                "variable": {
                    "value": "normalized_pairwise_head_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_513": {
                "variable": {
                    "value": "normalized_arc_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attended_arcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.arc_attention(head_arc_representation, child_arc_representation)",
                            "Call"
                        ],
                        [
                            "attended_arcs + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "attended_arcs + torch.diag(attended_arcs.new(mask.size(1)).fill_(-numpy.inf))",
                            "BinOp"
                        ],
                        [
                            "attended_arcs + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_513": {
                "variable": {
                    "value": "normalized_arc_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_519": {
                "variable": {
                    "value": "batch_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_arc_logits.unsqueeze(1) + normalized_pairwise_head_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "embedded_text_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_pos_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "head_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_indices.new_zeros(batch_size, 1), head_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "head_tags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_tags.new_zeros(batch_size, 1), head_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_122": {
                "*size": {
                    "value": "[1, 1, encoder.get_output_dim()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_436": {
                "input": {
                    "value": "attended_arcs.new(mask.size(1)).fill_(-numpy.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_548": {
                "ndarray": {
                    "value": "numpy.stack(head_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/biaffine_dependency_parser_multilang.py": {
        "torch": {
            "cat_131": {
                "variable": {
                    "value": "embedded_text_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_pos_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/biattentive_classification_network.py": {
        "torch": {
            "Dropout_95": {
                "variable": {
                    "value": "self._embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop('embedding_dropout')",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self._integrator_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "integrator_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop('integrator_dropout')",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self._self_attentive_pooling_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._combined_integrator_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_180": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "integrator_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_tokens, encoded_tokens - encoded_text, encoded_tokens * encoded_text]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "pooled_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[max_pool, min_pool, mean_pool, self_attentive_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_279": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_layer(pooled_representations_dropped)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "integrated_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[integrated_encodings, integrator_output_elmo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "embedded_text",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text, input_elmo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_261": {
                "input": {
                    "value": "max_masked_integrated_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.replace_masked_values(integrated_encodings, text_mask.unsqueeze(2), -10000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_264": {
                "input": {
                    "value": "min_masked_integrated_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.replace_masked_values(integrated_encodings, text_mask.unsqueeze(2), +10000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_265": {
                "input": {
                    "value": "text_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.get_text_field_mask(tokens).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/bimpm.py": {
        "torch": {
            "Dropout_100": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_104": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_189": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier_feedforward(torch.cat([aggregated_premise, aggregated_hypothesis], dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "matching_vector_premise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "matching_vector_hypothesis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "tensors": {
                    "value": "[aggregated_premise, aggregated_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/constituency_parser.py": {
        "torch": {
            "cat_188": {
                "variable": {
                    "value": "embedded_text_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_pos_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feedforward.get_output_dim()",
                            "Call"
                        ],
                        [
                            "span_extractor.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_314": {
                "variable": {
                    "value": "(label_prob, label_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(scored_spans[:num_spans[batch_index]], spans[:num_spans[batch_index]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/coreference_resolution/coref.py": {
        "torch": {
            "Sequential_81": {
                "variable": {
                    "value": "feedforward_scorer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "TimeDistributed(mention_feedforward)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "spans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spans.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "span_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[endpoint_span_embeddings, attended_span_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_445": {
                "variable": {
                    "value": "valid_antecedent_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_antecedent_indices.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_496": {
                "variable": {
                    "value": "span_pair_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_embeddings, antecedent_embeddings, antecedent_embeddings * target_embeddings, antecedent_distance_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_539": {
                "variable": {
                    "value": "pairwise_labels_with_dummy_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dummy_labels, pairwise_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_588": {
                "variable": {
                    "value": "coreference_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dummy_scores, antecedent_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self._lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lexical_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "antecedent_feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "mention_feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/crf_tagger.py": {
        "torch": {
            "Dropout_87": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feedforward.get_output_dim()",
                            "Call"
                        ],
                        [
                            "self.encoder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/decomposable_attention.py": {
        "torch": {
            "CrossEntropyLoss_91": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "premise_compare_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_premise, attended_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "hypothesis_compare_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_hypothesis, attended_premise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "aggregate_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[compared_premise, compared_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "label_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._aggregate_feedforward(aggregate_input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/encoder_decoders/copynet_seq2seq.py": {
        "torch": {
            "Linear_129": {
                "variable": {
                    "value": "self._input_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "target_embedding_dim + self.encoder_output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_135": {
                "variable": {
                    "value": "self._decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self._output_generation_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "target_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab.get_vocab_size(self._target_namespace)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self._output_copying_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded_input, attentive_read, selective_read)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_343": {
                "variable": {
                    "value": "copy_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "copy_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_copying_layer(trimmed_encoder_outputs)",
                            "Call"
                        ],
                        [
                            "torch.tanh(copy_projection)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_385": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores_mask, copy_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "combined_gen_and_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_log_probs, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "log_likelihoods",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_log_likelihoods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_684": {
                "variable": {
                    "value": "modified_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "modified_log_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_757": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_761": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores.new_full(generation_scores.size(), 1.0), copy_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_665": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(copy_log_probs_slice.unsqueeze(-1), future_copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_650": {
                "tensors": {
                    "value": "(selected_generation_log_probs, copy_log_probs_to_add)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/encoder_decoders/simple_seq2seq.py": {
        "torch": {
            "LSTMCell_144": {
                "variable": {
                    "value": "self._decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self._decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self._decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self._output_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab.get_vocab_size(self._target_namespace)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_187": {
                "variable": {
                    "value": "class_log_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prepare_output_projections(last_predictions, state)",
                            "Call"
                        ],
                        [
                            "self._prepare_output_projections(input_choices, state)",
                            "Call"
                        ],
                        [
                            "self._output_projection_layer(decoder_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_346": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prepare_output_projections(last_predictions, state)",
                            "Call"
                        ],
                        [
                            "self._prepare_output_projections(input_choices, state)",
                            "Call"
                        ],
                        [
                            "self._output_projection_layer(decoder_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_349": {
                "variable": {
                    "value": "(_, predicted_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(output_projections, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_363": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_418": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attended_input, embedded_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_327": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/ensemble.py": {
        "torch": {
            "ModuleList_31": {
                "variable": {
                    "value": "self.submodels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "submodels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/esim.py": {
        "torch": {
            "CrossEntropyLoss_90": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "premise_enhanced",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_premise, attended_hypothesis, encoded_premise - attended_hypothesis, encoded_premise * attended_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "hypothesis_enhanced",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_hypothesis, attended_premise, encoded_hypothesis - attended_premise, encoded_hypothesis * attended_premise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "v_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_a_avg, v_a_max, v_b_avg, v_b_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_206": {
                "variable": {
                    "value": "label_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_logit(output_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "premise_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_text_field_mask(premise).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_192": {
                "input": {
                    "value": "hypothesis_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_text_field_mask(hypothesis).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/event2mind.py": {
        "torch": {
            "Dropout_80": {
                "variable": {
                    "value": "self._embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleDict_100": {
                "variable": {
                    "value": "self._states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ps.unsqueeze(1) for ps in predictions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_374": {
                "variable": {
                    "value": "self.decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_375": {
                "variable": {
                    "value": "self.output_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab.get_vocab_size(self._target_namespace)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_386": {
                "variable": {
                    "value": "class_log_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_projection_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "output_projection_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "self.output_projection_layer(decoder_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_284": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_projections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_projection_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "output_projection_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "self.output_projection_layer(decoder_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_285": {
                "variable": {
                    "value": "(_, predicted_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(output_projections, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/graph_parser.py": {
        "torch": {
            "Dropout_110": {
                "variable": {
                    "value": "self._input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_124": {
                "variable": {
                    "value": "self._arc_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_125": {
                "variable": {
                    "value": "self._tag_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diag_329": {
                "variable": {
                    "value": "inf_diagonal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "arc_scores.new(mask.size(1)).fill_(-numpy.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_340": {
                "variable": {
                    "value": "arc_tag_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "arc_tag_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tag_bilinear(head_tag_representation, child_tag_representation)",
                            "Call"
                        ],
                        [
                            "arc_tag_logits.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "arc_tag_logits + inf_diagonal_mask.unsqueeze(0).unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "embedded_text_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_pos_tags]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_217": {
                "tensors": {
                    "value": "[one_minus_arc_probs, arc_probs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/language_model.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(embedding_dim, num_words) / np.sqrt(embedding_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_words)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_41": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(embeddings, self.softmax_w) + self.softmax_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_46": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(torch.matmul(embeddings, self.softmax_w) + self.softmax_b, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "shifted_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_col, mask[:, 0:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "shifted_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask[:, 1:], zero_col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_283": {
                "variable": {
                    "value": "forward_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.get('tokens')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_301": {
                "variable": {
                    "value": "num_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(forward_targets > 0).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_287": {
                "variable": {
                    "value": "backward_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.get('tokens')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "average_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_32": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._text_field_embedder(source)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/masked_language_model.py": {
        "torch": {
            "Dropout_61": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_111": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_positions.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_111": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._language_model_head(self._dropout(mask_embeddings))",
                            "Call"
                        ],
                        [
                            "target_logits.view(batch_size * num_masks, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_129": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._language_model_head(self._dropout(mask_embeddings))",
                            "Call"
                        ],
                        [
                            "target_logits.view(batch_size * num_masks, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "target_ids['bert']",
                            "Subscript"
                        ],
                        [
                            "list(target_ids.values())[0]",
                            "Subscript"
                        ],
                        [
                            "targets.view(batch_size * num_masks)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/model.py": {
        "torch": {
            "load_277": {
                "variable": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_file or os.path.join(serialization_dir, _DEFAULT_WEIGHTS)",
                            "BoolOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "util.device_mapping(cuda_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/next_token_lm.py": {
        "torch": {
            "Dropout_62": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._language_model_head(self._dropout(final_embeddings))",
                            "Call"
                        ],
                        [
                            "target_logits.view(batch_size, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_101": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._language_model_head(self._dropout(final_embeddings))",
                            "Call"
                        ],
                        [
                            "target_logits.view(batch_size, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(target_ids.values())[0].view(batch_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/reading_comprehension/bidaf.py": {
        "torch": {
            "cat_210": {
                "variable": {
                    "value": "final_merged_passage",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_passage, passage_question_vectors, encoded_passage * passage_question_vectors, encoded_passage * tiled_question_passage_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "span_end_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_merged_passage, modeled_passage, tiled_start_representation, modeled_passage * tiled_start_representation]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_313": {
                "variable": {
                    "value": "span_log_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((passage_length, passage_length), device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_313": {
                "variable": {
                    "value": "span_log_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_313": {
                "variable": {
                    "value": "span_log_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nll_loss_261": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "util.masked_log_softmax(span_start_logits, passage_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "span_start.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_324": {
                "tensors": {
                    "value": "[span_start_indices, span_end_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "span_start_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoding_dim * 4 + modeling_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "span_end_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoding_dim * 4 + span_end_encoding_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "[final_merged_passage, modeled_passage]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "[final_merged_passage, encoded_span_end]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_263": {
                "input": {
                    "value": "util.masked_log_softmax(span_end_logits, passage_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "span_end.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_265": {
                "tensors": {
                    "value": "[span_start, span_end]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_313": {
                "*size": {
                    "value": "(passage_length, passage_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_start_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/reading_comprehension/bidaf_ensemble.py": {
        "torch": {}
    },
    "allennlp/allennlp/models/reading_comprehension/dialog_qa.py": {
        "torch": {
            "Linear_87": {
                "variable": {
                    "value": "self._followup_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._encoding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ge_196": {
                "variable": {
                    "value": "qa_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "followup_list",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "final_merged_passage",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[repeated_encoded_passage, passage_question_vectors, repeated_encoded_passage * passage_question_vectors, repeated_encoded_passage * tiled_question_passage_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_276": {
                "variable": {
                    "value": "final_merged_passage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._merge_atten(final_merged_passage)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_284": {
                "variable": {
                    "value": "self_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "passage_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_passage.size(1)",
                            "Call"
                        ],
                        [
                            "span_start_logits.size()",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "passage_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_passage.size(1)",
                            "Call"
                        ],
                        [
                            "span_start_logits.size()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self_attention_matrix.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_291": {
                "variable": {
                    "value": "self_attention_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self_attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.masked_softmax(self_attention_matrix, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "residual_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._variational_dropout(self._residual_encoder(final_merged_passage, repeated_passage_mask))",
                            "Call"
                        ],
                        [
                            "F.relu(self._merge_self_attention(self_attention_vecs))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_292": {
                "variable": {
                    "value": "self_attention_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_attention_vecs, residual_layer, residual_layer * self_attention_vecs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_295": {
                "variable": {
                    "value": "residual_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._merge_self_attention(self_attention_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_81": {
                "variable": {
                    "value": "self._question_num_marker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_turn_length",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "marker_embedding_dim * num_context_answers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_83": {
                "variable": {
                    "value": "self._prev_ans_marker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_context_answers * 4 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "marker_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "embedded_question",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_question, question_num_marker_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "repeated_embedded_passage",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[repeated_embedded_passage, p1_answer_marker_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_322": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "util.masked_log_softmax(span_start_logits, repeated_passage_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "span_start.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "self._encoding_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._encoding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "self._encoding_dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._encoding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "self._encoding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "self._encoding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "self._encoding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "repeated_embedded_passage",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[repeated_embedded_passage, p2_answer_marker_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_303": {
                "tensors": {
                    "value": "[final_merged_passage, start_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_325": {
                "input": {
                    "value": "util.masked_log_softmax(span_end_logits, repeated_passage_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "span_end.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_349": {
                "input": {
                    "value": "F.log_softmax(_yesno, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "yesno_list.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_350": {
                "input": {
                    "value": "F.log_softmax(_followup, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "followup_list.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "repeated_embedded_passage",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[repeated_embedded_passage, p3_answer_marker_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_329": {
                "tensors": {
                    "value": "[span_start, span_end]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_349": {
                "input": {
                    "value": "_yesno",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_yesno_logits.view(-1).index_select(0, gold_span_end_loc).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "span_yesno_logits.view(-1).index_select(0, predicted_end).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_350": {
                "input": {
                    "value": "_followup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_followup_logits.view(-1).index_select(0, gold_span_end_loc).view(-1, 3)",
                            "Call"
                        ],
                        [
                            "span_followup_logits.view(-1).index_select(0, predicted_end).view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/reading_comprehension/naqanet.py": {
        "torch": {
            "Linear_61": {
                "variable": {
                    "value": "self._embedding_proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_field_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encoding_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phrase_layer.get_input_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self._encoding_proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoding_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phrase_layer.get_input_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encoding_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phrase_layer.get_input_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self._modeling_proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoding_out_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "modeling_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling_layer.get_input_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self._passage_weights_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "modeling_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling_layer.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self._question_weights_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoding_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phrase_layer.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_172": {
                "variable": {
                    "value": "passsage_attention_over_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "passage_question_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(passage_question_similarity, question_mask, memory_efficient=True)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "question_passage_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(passage_question_similarity.transpose(1, 2), passage_mask, memory_efficient=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_206": {
                "variable": {
                    "value": "answer_ability_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer_ability_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._answer_ability_predictor(torch.cat([passage_vector, question_vector], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_207": {
                "variable": {
                    "value": "best_answer_ability",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer_ability_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(answer_ability_logits, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_212": {
                "variable": {
                    "value": "count_number_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "count_number_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._count_number_predictor(passage_vector)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_215": {
                "variable": {
                    "value": "best_count_number",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "count_number_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(count_number_logits, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_217": {
                "variable": {
                    "value": "best_count_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "count_number_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(count_number_logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "best_count_number.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_217": {
                "variable": {
                    "value": "best_count_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "passage_for_span_start",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modeled_passage_list[0], modeled_passage_list[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "passage_for_span_end",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modeled_passage_list[0], modeled_passage_list[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_241": {
                "variable": {
                    "value": "best_passage_start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "passage_span_start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.masked_log_softmax(passage_span_start_logits, passage_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "best_passage_span[:, 0].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_241": {
                "variable": {
                    "value": "best_passage_start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_243": {
                "variable": {
                    "value": "best_passage_end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "passage_span_end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.masked_log_softmax(passage_span_end_logits, passage_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "best_passage_span[:, 1].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_243": {
                "variable": {
                    "value": "best_passage_end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "encoded_question_for_span_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_question, passage_vector.unsqueeze(1).repeat(1, encoded_question.size(1), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_271": {
                "variable": {
                    "value": "best_question_start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_span_start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.masked_log_softmax(question_span_start_logits, question_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "best_question_span[:, 0].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_271": {
                "variable": {
                    "value": "best_question_start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_273": {
                "variable": {
                    "value": "best_question_end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_span_end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.masked_log_softmax(question_span_end_logits, question_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "best_question_span[:, 1].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_273": {
                "variable": {
                    "value": "best_question_end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "encoded_passage_for_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modeled_passage_list[0], modeled_passage_list[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_286": {
                "variable": {
                    "value": "encoded_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded_passage_for_numbers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([modeled_passage_list[0], modeled_passage_list[3]], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_number_indices.unsqueeze(-1).expand(-1, -1, encoded_passage_for_numbers.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "encoded_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_numbers, passage_vector.unsqueeze(1).repeat(1, encoded_numbers.size(1), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_296": {
                "variable": {
                    "value": "number_sign_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "number_sign_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._number_sign_predictor(encoded_numbers)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_299": {
                "variable": {
                    "value": "best_signs_for_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "number_sign_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(number_sign_logits, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_303": {
                "variable": {
                    "value": "best_signs_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "number_sign_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(number_sign_logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "best_signs_for_numbers.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_303": {
                "variable": {
                    "value": "best_signs_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_178": {
                "tensors": {
                    "value": "[encoded_passage, passage_question_vectors, encoded_passage * passage_question_vectors, encoded_passage * passage_passage_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_420": {
                "variable": {
                    "value": "all_log_marginal_likelihoods",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_marginal_likelihood_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "[passage_vector, question_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_336": {
                "variable": {
                    "value": "log_likelihood_for_passage_span_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "passage_span_start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.masked_log_softmax(passage_span_start_logits, passage_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_gold_passage_span_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.replace_masked_values(gold_passage_span_starts, gold_passage_span_mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_338": {
                "variable": {
                    "value": "log_likelihood_for_passage_span_ends",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "passage_span_end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.masked_log_softmax(passage_span_end_logits, passage_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_gold_passage_span_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.replace_masked_values(gold_passage_span_ends, gold_passage_span_mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_362": {
                "variable": {
                    "value": "log_likelihood_for_question_span_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_span_start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.masked_log_softmax(question_span_start_logits, question_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_gold_question_span_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.replace_masked_values(gold_question_span_starts, gold_question_span_mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_364": {
                "variable": {
                    "value": "log_likelihood_for_question_span_ends",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_span_end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.masked_log_softmax(question_span_end_logits, question_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_gold_question_span_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.replace_masked_values(gold_question_span_ends, gold_question_span_mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_386": {
                "variable": {
                    "value": "log_likelihood_for_number_signs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "number_sign_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(number_sign_logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "gold_add_sub_signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "answer_as_add_sub_expressions.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_407": {
                "variable": {
                    "value": "log_likelihood_for_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "count_number_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(count_number_logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_gold_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.replace_masked_values(answer_as_counts, gold_count_mask, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/reading_comprehension/qanet.py": {
        "torch": {
            "Linear_70": {
                "variable": {
                    "value": "self._embedding_proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_field_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encoding_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phrase_layer.get_input_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self._encoding_proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoding_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phrase_layer.get_input_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encoding_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phrase_layer.get_input_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self._modeling_proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoding_out_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "modeling_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling_layer.get_input_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self._span_start_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "modeling_out_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self._span_end_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "modeling_out_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_178": {
                "variable": {
                    "value": "attention_over_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "passage_question_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(passage_question_similarity, question_mask, memory_efficient=True)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "question_passage_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(passage_question_similarity.transpose(1, 2), passage_mask, memory_efficient=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "span_start_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modeled_passage_list[-3], modeled_passage_list[-2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "span_end_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modeled_passage_list[-3], modeled_passage_list[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "span_start_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._span_start_predictor(span_start_input).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "util.replace_masked_values(span_start_logits, passage_mask, -1e+32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_209": {
                "variable": {
                    "value": "span_end_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._span_end_predictor(span_end_input).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "util.replace_masked_values(span_end_logits, passage_mask, -1e+32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_224": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "util.masked_log_softmax(span_start_logits, passage_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "span_start.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_184": {
                "tensors": {
                    "value": "[encoded_passage, passage_question_vectors, encoded_passage * passage_question_vectors, encoded_passage * passage_passage_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_226": {
                "input": {
                    "value": "util.masked_log_softmax(span_end_logits, passage_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "span_end.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_228": {
                "tensors": {
                    "value": "[span_start, span_end]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/reading_comprehension/util.py": {
        "torch": {
            "triu_22": {
                "variable": {
                    "value": "span_log_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((passage_length, passage_length), device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_22": {
                "variable": {
                    "value": "span_log_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_33": {
                "tensors": {
                    "value": "[span_start_indices, span_end_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_22": {
                "*size": {
                    "value": "(passage_length, passage_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_start_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/semantic_parsing/atis/atis_semantic_parser.py": {
        "torch": {
            "Parameter_105": {
                "variable": {
                    "value": "self._first_action_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(action_embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self._first_attended_utterance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(encoder.get_output_dim())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_470": {
                "variable": {
                    "value": "global_action_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "global_action_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*global_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/semantic_parsing/nlvr/nlvr_coverage_semantic_parser.py": {
        "torch": {
            "sum_381": {
                "variable": {
                    "value": "checklist_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "checklist_balance ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_387": {
                "variable": {
                    "value": "denotation_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state.checklist_state[0].checklist_target.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_315": {
                "variable": {
                    "value": "checklist_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_checklist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agenda.new_tensor(target_checklist_list, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/models/semantic_parsing/nlvr/nlvr_direct_semantic_parser.py": {
        "torch": {}
    },
    "allennlp/allennlp/models/semantic_parsing/nlvr/nlvr_semantic_parser.py": {
        "torch": {
            "Parameter_70": {
                "variable": {
                    "value": "self._first_action_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(action_embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "global_action_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "global_action_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*global_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/semantic_parsing/quarel/quarel_semantic_parser.py": {
        "torch": {
            "Parameter_165": {
                "variable": {
                    "value": "self._first_action_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(action_embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "self._first_attended_question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self._encoder_output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_594": {
                "variable": {
                    "value": "batch_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_probabilities, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_99": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self._linking_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_linking_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self._denotation_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._encoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_denotation_cats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_317": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_outputs, entity_bits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_326": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denotation_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._denotation_classifier(final_encoder_output)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "denotation_target.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_592": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_606": {
                "input": {
                    "value": "torch.min(targets_trimmed.eq(predicted_tensor), dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_696": {
                "variable": {
                    "value": "global_action_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "global_action_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*global_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_258": {
                "variable": {
                    "value": "question_entity_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_table.view(batch_size, num_entities * num_entity_tokens, self._embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(embedded_question, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_269": {
                "variable": {
                    "value": "(question_entity_similarity_max_score, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "question_entity_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(embedded_table.view(batch_size, num_entities * num_entity_tokens, self._embedding_dim), torch.transpose(embedded_question, 1, 2))",
                            "Call"
                        ],
                        [
                            "question_entity_similarity.view(batch_size, num_entities, num_entity_tokens, num_question_tokens)",
                            "Call"
                        ],
                        [
                            "self._entity_similarity_layer(product)",
                            "Call"
                        ],
                        [
                            "question_entity_similarity.view(batch_size, num_entities, num_entity_tokens, num_question_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_305": {
                "variable": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_question, entity_bits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_582": {
                "variable": {
                    "value": "type_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linking_scores[batch_index].index_select(1, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_700": {
                "variable": {
                    "value": "global_input_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_input_embeddings, global_action_biases]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "self._embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_278": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eqe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_question.unsqueeze(1).expand(-1, num_entities * num_entity_tokens, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ete",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_table.view(batch_size, num_entities * num_entity_tokens, self._embedding_dim)",
                            "Call"
                        ],
                        [
                            "ete.unsqueeze(2).expand(-1, -1, num_question_tokens, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_289": {
                "variable": {
                    "value": "(question_entity_similarity_max_score, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "question_entity_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(embedded_table.view(batch_size, num_entities * num_entity_tokens, self._embedding_dim), torch.transpose(embedded_question, 1, 2))",
                            "Call"
                        ],
                        [
                            "question_entity_similarity.view(batch_size, num_entities, num_entity_tokens, num_question_tokens)",
                            "Call"
                        ],
                        [
                            "self._entity_similarity_layer(product)",
                            "Call"
                        ],
                        [
                            "question_entity_similarity.view(batch_size, num_entities, num_entity_tokens, num_question_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_261": {
                "input": {
                    "value": "embedded_question",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._question_embedder(question)",
                            "Call"
                        ],
                        [
                            "embedded_question / (embedded_question.norm(dim=-1, keepdim=True) + 1e-13)",
                            "BinOp"
                        ],
                        [
                            "embedded_question / (embedded_question.norm(dim=-1, keepdim=True) + 1e-13)",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_606": {
                "input": {
                    "value": "targets_trimmed.eq(predicted_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/semantic_parsing/text2sql_parser.py": {
        "torch": {
            "Dropout_73": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self._first_action_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(action_embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self._first_attended_utterance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(encoder.get_output_dim())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "global_action_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "global_action_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*global_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/semantic_parsing/wikitables/wikitables_erm_semantic_parser.py": {
        "torch": {
            "clamp_375": {
                "variable": {
                    "value": "checklist_balance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state.checklist_state[0].get_balance()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_376": {
                "variable": {
                    "value": "checklist_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "checklist_balance ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_380": {
                "variable": {
                    "value": "denotation_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state.checklist_state[0].checklist_target.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/semantic_parsing/wikitables/wikitables_mml_semantic_parser.py": {
        "torch": {}
    },
    "allennlp/allennlp/models/semantic_parsing/wikitables/wikitables_semantic_parser.py": {
        "torch": {
            "Parameter_105": {
                "variable": {
                    "value": "self._first_action_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(action_embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self._first_attended_question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(encoder.get_output_dim())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self._neighbor_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_199": {
                "variable": {
                    "value": "question_entity_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_table.view(batch_size, num_entities * num_entity_tokens, self._embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(embedded_question, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_210": {
                "variable": {
                    "value": "(question_entity_similarity_max_score, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "question_entity_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(embedded_table.view(batch_size, num_entities * num_entity_tokens, self._embedding_dim), torch.transpose(embedded_question, 1, 2))",
                            "Call"
                        ],
                        [
                            "question_entity_similarity.view(batch_size, num_entities, num_entity_tokens, num_question_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_255": {
                "variable": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[link_embedding, embedded_question]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_478": {
                "variable": {
                    "value": "batch_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_probabilities, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_87": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self._linking_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_linking_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self._question_entity_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self._question_neighbor_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_189": {
                "variable": {
                    "value": "entity_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_type_embeddings + projected_neighbor_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_192": {
                "variable": {
                    "value": "entity_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_type_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._entity_type_encoder_embedding(entity_types)",
                            "Call"
                        ],
                        [
                            "self._entity_type_decoder_embedding(entity_type_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_237": {
                "variable": {
                    "value": "(question_neighbor_similarity_max_score, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "question_neighbor_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.batched_index_select(question_entity_similarity_max_score, torch.abs(neighbor_indices))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_476": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_490": {
                "input": {
                    "value": "torch.min(targets_trimmed.eq(predicted_tensor), dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_202": {
                "input": {
                    "value": "embedded_question",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._question_embedder(question)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_466": {
                "variable": {
                    "value": "type_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linking_scores[batch_index].index_select(1, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_585": {
                "variable": {
                    "value": "global_action_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "global_action_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*global_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_177": {
                "input": {
                    "value": "neighbor_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_neighbor_indices(world, num_entities, encoded_table)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_235": {
                "input": {
                    "value": "neighbor_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_neighbor_indices(world, num_entities, encoded_table)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_589": {
                "variable": {
                    "value": "global_input_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_input_embeddings, global_action_biases]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_490": {
                "input": {
                    "value": "targets_trimmed.eq(predicted_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/semantic_role_labeler.py": {
        "torch": {
            "Dropout_86": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "embedded_text_with_verb_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text_input, embedded_verb_indicator]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_labels, num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_266": {
                "variable": {
                    "value": "start_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_labels)",
                            "Call"
                        ],
                        [
                            "len(all_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "self.encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/simple_tagger.py": {
        "torch": {
            "softmax_141": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "self.encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/models/srl_bert.py": {
        "torch": {
            "Linear_62": {
                "variable": {
                    "value": "self.tag_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_labels, num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_254": {
                "variable": {
                    "value": "start_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_labels)",
                            "Call"
                        ],
                        [
                            "len(all_labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/attention/additive_attention.py": {
        "torch": {
            "Parameter_37": {
                "variable": {
                    "value": "self._w_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(vector_dim, vector_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self._u_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(matrix_dim, vector_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self._v_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(vector_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "variable": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector.matmul(self._w_matrix).unsqueeze(1) + matrix.matmul(self._u_matrix)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(intermediate)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/attention/attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/attention/bilinear_attention.py": {
        "torch": {
            "Parameter_39": {
                "variable": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(vector_dim, matrix_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/attention/cosine_attention.py": {
        "torch": {
            "bmm_15": {
                "input": {
                    "value": "a_norm.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "b_norm.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_15": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/attention/dot_product_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/attention/legacy_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/attention/linear_attention.py": {
        "torch": {
            "Parameter_55": {
                "variable": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(combined_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/augmented_lstm.py": {
        "torch": {
            "pad_packed_sequence_121": {
                "variable": {
                    "value": "(sequence_tensor, batch_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_204": {
                "variable": {
                    "value": "output_accumulator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_accumulator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_tensor.new_zeros(batch_size, total_timesteps, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(output_accumulator, batch_lengths, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "batch_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(inputs, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_178": {
                "variable": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.hidden_size:1 * self.hidden_size] + projected_state[:, 0 * self.hidden_size:1 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_180": {
                "variable": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.hidden_size:2 * self.hidden_size] + projected_state[:, 1 * self.hidden_size:2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_182": {
                "variable": {
                    "value": "memory_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.hidden_size:3 * self.hidden_size] + projected_state[:, 2 * self.hidden_size:3 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_184": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.hidden_size:4 * self.hidden_size] + projected_state[:, 3 * self.hidden_size:4 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_190": {
                "variable": {
                    "value": "highway_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 4 * self.hidden_size:5 * self.hidden_size] + projected_state[:, 4 * self.hidden_size:5 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_187": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/bimpm_matching.py": {
        "torch": {
            "cosine_similarity_42": {
                "variable": {
                    "value": "similarity_single",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "vector1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * vector1.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector1.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "vector2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * vector2.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector2.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "similarity_single",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_51": {
                "variable": {
                    "value": "similarity_multi",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "vector1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * vector1.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector1.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "vector2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * vector2.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector2.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "mul_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * vector1.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weight * vector1.unsqueeze(1).expand(-1, num_perspectives, -1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "vector2.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_241": {
                "variable": {
                    "value": "cosine_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "context_1.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "context_2.unsqueeze(-3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_perspectives, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "*size": {
                    "value": "num_perspectives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/conditional_random_field.py": {
        "torch": {
            "Parameter_179": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags, num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_191": {
                "variable": {
                    "value": "self._constraint_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constraint_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(num_tags + 2, num_tags + 2).fill_(1.0)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(num_tags + 2, num_tags + 2).fill_(0.0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_187": {
                "variable": {
                    "value": "constraint_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_196": {
                "variable": {
                    "value": "self.start_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_197": {
                "variable": {
                    "value": "self.end_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_317": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*tags.size()",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_322": {
                "input": {
                    "value": "log_numerator - log_denominator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_367": {
                "variable": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(logits, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_179": {},
            "Tensor_196": {},
            "Tensor_197": {}
        }
    },
    "allennlp/allennlp/modules/elmo.py": {
        "torch": {
            "Dropout_115": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_float('dropout', 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_315": {
                "variable": {
                    "value": "self._beginning_of_sentence_characters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(ELMoCharacterMapper.beginning_of_sentence_characters) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_318": {
                "variable": {
                    "value": "self._end_of_sentence_characters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(ELMoCharacterMapper.end_of_sentence_characters) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_357": {
                "variable": {
                    "value": "character_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "character_ids_with_bos_eos.view(-1, max_chars_per_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self._char_embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_372": {
                "variable": {
                    "value": "character_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "character_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.embedding(character_ids_with_bos_eos.view(-1, max_chars_per_token), self._char_embedding_weights)",
                            "Call"
                        ],
                        [
                            "torch.transpose(character_embedding, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "token_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_415": {
                "variable": {
                    "value": "self._char_embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_485": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ],
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_672": {
                "variable": {
                    "value": "full_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_378": {
                "variable": {
                    "value": "(convolved, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "convolved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(character_embedding)",
                            "Call"
                        ],
                        [
                            "torch.max(convolved, dim=-1)",
                            "Call"
                        ],
                        [
                            "activation(convolved)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_426": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_options['embedding']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_621": {
                "input": {
                    "value": "lstm_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._elmo_lstm(type_representation, mask)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "lstm_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_619": {
                "tensors": {
                    "value": "[type_representation, type_representation]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/elmo_lstm.py": {
        "torch": {
            "pad_packed_sequence_193": {
                "variable": {
                    "value": "(inputs, batch_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(inputs, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "stacked_sequence_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stacked_sequence_output, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "stacked_sequence_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stacked_sequence_output, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_233": {
                "tensors": {
                    "value": "sequence_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_239": {
                "tensors": {
                    "value": "final_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "final_memory_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*final_states)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "[forward_output_sequence, backward_output_sequence]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "[forward_state[0], backward_state[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "[forward_state[1], backward_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/encoder_base.py": {
        "torch": {
            "sum_92": {
                "variable": {
                    "value": "num_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_99": {
                "variable": {
                    "value": "packed_sequence_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_inputs[:num_valid, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sorted_sequence_lengths[:num_valid].data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/feedforward.py": {
        "torch": {
            "ModuleList_64": {
                "variable": {
                    "value": "self._linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "linear_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_66": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dropout_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.Dropout(p=value) for value in dropout]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Dropout_65": {
                "p": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "layer_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(input_dims, hidden_dims)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(input_dims, hidden_dims)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/highway.py": {
        "torch": {
            "ModuleList_38": {
                "variable": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(input_dim, input_dim * 2) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_58": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projected_input.chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/input_variational_dropout.py": {
        "torch": {
            "dropout_29": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor.data.new_ones(input_tensor.shape[0], input_tensor.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/language_model_heads/bert.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/language_model_heads/gpt2.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/language_model_heads/language_model_head.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/layer_norm.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/lstm_cell_with_projection.py": {
        "torch": {
            "Linear_76": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * cell_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * cell_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.state_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cell_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_182": {
                "variable": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.cell_size:1 * self.cell_size] + projected_state[:, 0 * self.cell_size:1 * self.cell_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_184": {
                "variable": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.cell_size:2 * self.cell_size] + projected_state[:, 1 * self.cell_size:2 * self.cell_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_186": {
                "variable": {
                    "value": "memory_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.cell_size:3 * self.cell_size] + projected_state[:, 2 * self.cell_size:3 * self.cell_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_188": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.cell_size:4 * self.cell_size] + projected_state[:, 3 * self.cell_size:4 * self.cell_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_198": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(memory, -self.memory_cell_clip_value, self.memory_cell_clip_value)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.memory_cell_clip_value",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.memory_cell_clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_207": {
                "variable": {
                    "value": "timestep_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "timestep_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state_projection(pre_projection_timestep_output)",
                            "Call"
                        ],
                        [
                            "torch.clamp(timestep_output, -self.state_projection_clip_value, self.state_projection_clip_value)",
                            "Call"
                        ],
                        [
                            "timestep_output * dropout_mask[0:current_length_index + 1]",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.state_projection_clip_value",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.state_projection_clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_201": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(memory, -self.memory_cell_clip_value, self.memory_cell_clip_value)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/masked_layer_norm.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, size) * gamma0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_22": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(masked_centered * masked_centered).sum() / num_elements + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_11": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/matrix_attention/bilinear_matrix_attention.py": {
        "torch": {
            "Parameter_54": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix_1.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_matrix",
                            "Attribute"
                        ],
                        [
                            "weight.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix_1.unsqueeze(1), weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_2.unsqueeze(1).transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(matrix_1_dim, matrix_2_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(label_dim, matrix_1_dim, matrix_2_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "matrix_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[matrix_1, bias1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "matrix_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[matrix_2, bias2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/matrix_attention/cosine_matrix_attention.py": {
        "torch": {
            "bmm_18": {
                "input": {
                    "value": "a_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix_1 / (matrix_1.norm(p=2, dim=-1, keepdim=True) + 1e-13)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_norm.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/matrix_attention/dot_product_matrix_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/matrix_attention/legacy_matrix_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/matrix_attention/linear_matrix_attention.py": {
        "torch": {
            "Parameter_56": {
                "variable": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(combined_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/matrix_attention/matrix_attention.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/maxout.py": {
        "torch": {
            "ModuleList_62": {
                "variable": {
                    "value": "self._linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "linear_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dropout_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.Dropout(p=value) for value in dropout]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Dropout_63": {
                "p": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "layer_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(input_dims, output_dims, pool_sizes)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_output_dim * pool_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_86": {
                "input": {
                    "value": "affine_output.view(*shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/openai_transformer.py": {
        "torch": {
            "Parameter_106": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_dropout_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.residual_dropout_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.residual_dropout_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_294": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size + max(n_special, 0) + n_ctx",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "int"
                        ]
                    ]
                }
            },
            "Dropout_295": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "ModuleList_298": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(block) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size + max(n_special, 0) + n_ctx",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_414": {
                "variable": {
                    "value": "self.embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_123": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * self.b + -1000000000.0 * (1 - self.b)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_165": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * self.b + -1000000000.0 * (1 - self.b)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_441": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(names[1:n_transfer], init_params[1:n_transfer])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_35": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "variable"
                        ],
                        [
                            "n_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "n_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "variable"
                        ],
                        [
                            "n_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_113": {
                "input": {
                    "value": "s + self.e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_149": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_163": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_149": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.e)",
                            "BinOp"
                        ],
                        [
                            "torch.addmm(self.b, x.view(-1, x.size(-1)), self.w)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/pruner.py": {
        "torch": {
            "where_105": {
                "variable": {
                    "value": "top_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "top_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.get_mask_from_sequence_lengths(num_items_to_keep, max_items_to_keep)",
                            "Call"
                        ],
                        [
                            "top_indices_mask.byte()",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "top_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.topk(max_items_to_keep, 1)",
                            "Call"
                        ],
                        [
                            "top_indices.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.where(top_indices_mask, top_indices, fill_value)",
                            "Call"
                        ],
                        [
                            "torch.sort(top_indices, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "fill_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_indices.max(dim=1)",
                            "Call"
                        ],
                        [
                            "fill_value.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_110": {
                "variable": {
                    "value": "(top_indices, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "top_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.topk(max_items_to_keep, 1)",
                            "Call"
                        ],
                        [
                            "top_indices.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.where(top_indices_mask, top_indices, fill_value)",
                            "Call"
                        ],
                        [
                            "torch.sort(top_indices, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/residual_with_layer_dropout.py": {
        "torch": {
            "rand_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/sampled_softmax_loss.py": {
        "torch": {
            "cat_176": {
                "variable": {
                    "value": "all_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[long_targets, sampled_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits.unsqueeze(1), masked_sampled_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_212": {
                "variable": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([true_logits.unsqueeze(1), masked_sampled_logits], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_231": {
                "variable": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(embeddings, w.t()) + b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_sampled_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_func(self._num_words, self._num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_96": {
                "variable": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax_w.weight.size(0)",
                            "Call"
                        ],
                        [
                            "self.softmax_w.size(0)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_98": {
                "variable": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax_w.weight.size(0)",
                            "Call"
                        ],
                        [
                            "self.softmax_w.size(0)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_words, embedding_dim) / np.sqrt(embedding_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_words)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_183": {
                "variable": {
                    "value": "all_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([long_targets, sampled_ids], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_186": {
                "variable": {
                    "value": "all_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([long_targets, sampled_ids], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.softmax_b.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_186": {
                "variable": {
                    "value": "all_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_236": {
                "input": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(torch.matmul(embeddings, w.t()) + b, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_196": {
                "input": {
                    "value": "target_expected_count + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_199": {
                "input": {
                    "value": "sampled_expected_count + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_261": {
                "input": {
                    "value": "(targets.float() + 2.0) / (targets.float() + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_263": {
                "input": {
                    "value": "(sampled_ids.float() + 2.0) / (sampled_ids.float() + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax_w.weight.size(0)",
                            "Call"
                        ],
                        [
                            "self.softmax_w.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_198": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "sampled_w.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_231": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "w.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_262": {
                "input": {
                    "value": "num_tries * torch.log1p(-target_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_265": {
                "input": {
                    "value": "num_tries * torch.log1p(-sampled_probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_103": {
                "*size": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax_w.weight.size(0)",
                            "Call"
                        ],
                        [
                            "self.softmax_w.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log1p_262": {
                "input": {
                    "value": "-target_probs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log1p_265": {
                "input": {
                    "value": "-sampled_probs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/scalar_mix.py": {
        "torch": {
            "ParameterList_32": {
                "variable": {
                    "value": "self.scalar_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[Parameter(torch.FloatTensor([initial_scalar_parameters[i]]), requires_grad=trainable) for i in range(mixture_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([parameter for parameter in self.scalar_parameters])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_63": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.cat([parameter for parameter in self.scalar_parameters]), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.split(normed_weights, split_size_or_sections=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[parameter for parameter in self.scalar_parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "data": {
                    "value": "torch.FloatTensor([initial_scalar_parameters[i]])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "tensor_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * broadcast_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_58": {
                "input": {
                    "value": "((tensor_masked - mean) * broadcast_mask) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_59": {
                "input": {
                    "value": "variance + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "mask_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/__init__.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2seq_encoders/bidirectional_language_model_transformer.py": {
        "torch": {
            "softmax_34": {
                "variable": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tril_42": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(size, size, device=device, dtype=torch.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "positional_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_54": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_55": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, input_dim, 2).float() * -(math.log(10000.0) / input_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_56": {
                "variable": {
                    "value": "positional_encoding[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_57": {
                "variable": {
                    "value": "positional_encoding[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ff_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ff_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_149": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "input": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_232": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_272": {
                "tensors": {
                    "value": "[forward_output, backward_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_55": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_77": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "[forward, backward]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/feedforward_encoder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2seq_encoders/gated_cnn_encoder.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self._convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self._forward_residual_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self._backward_residual_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_168": {
                "variable": {
                    "value": "transposed_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolution(out)",
                            "Call"
                        ],
                        [
                            "conv_out.narrow(2, 0, timesteps)",
                            "Call"
                        ],
                        [
                            "conv_out.narrow(2, dims_to_remove, timesteps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_27": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "layer[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "layer[1] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "layer[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "weight_norm_55": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(last_dim, layer[1] * 2, layer[0], stride=1, padding=layer[0] - 1, bias=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.Conv1d(last_dim, layer[1] * 2, layer[0], stride=1, padding=layer[2], dilation=layer[2], bias=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight', dim=0)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.dropout(out, self.dropout, self.training)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.glu(conv_out, dim=1)",
                            "Call"
                        ],
                        [
                            "transposed_embeddings",
                            "variable"
                        ],
                        [
                            "block(out.masked_fill(mask_for_fill, 0.0))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_199": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_199": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "last_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "layer[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "layer[1] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "layer[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "layer in enumerate(layers)",
                            "Call"
                        ],
                        [
                            "layers",
                            "variable"
                        ]
                    ]
                },
                "dilation": {
                    "value": "layer[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "layer in enumerate(layers)",
                            "Call"
                        ],
                        [
                            "layers",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_195": {
                "tensors": {
                    "value": "[fwd, bwd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_195": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/intra_sentence_attention.py": {
        "torch": {
            "Linear_59": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self._output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "combined_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.get_combined_dim(combination, [input_dim, projection_dim])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/multi_head_self_attention.py": {
        "torch": {
            "Linear_63": {
                "variable": {
                    "value": "self._combined_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * attention_dim + values_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self._output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "values_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self._attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attention_dropout_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(values, -1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "scaled_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries_per_head / self._scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keys_per_head.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/pass_through_encoder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2seq_encoders/pytorch_seq2seq_wrapper.py": {
        "torch": {
            "pad_packed_sequence_85": {
                "variable": {
                    "value": "(unpacked_sequence_tensor, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_sequence_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sort_and_run_forward(self._module, inputs, mask, hidden_state)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "unpacked_sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[unpacked_sequence_tensor, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "unpacked_sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[unpacked_sequence_tensor, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/qanet_encoder.py": {
        "torch": {
            "ModuleList_76": {
                "variable": {
                    "value": "self._encoder_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self._conv_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LayerNorm(hidden_dim) for _ in range(num_convs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_181": {
                "variable": {
                    "value": "self._conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_190": {
                "variable": {
                    "value": "self.attention_norm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_196": {
                "variable": {
                    "value": "self.feedforward_norm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_204": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self._input_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConstantPad1d_183": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(conv_kernel_size // 2, (conv_kernel_size - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_184": {
                "variable": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_185": {
                "variable": {
                    "value": "pointwise_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_180": {
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "*args": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2seq_encoders/stacked_self_attention.py": {
        "torch": {
            "Dropout_113": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "residual_dropout_prob",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/__init__.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/seq2vec_encoders/bert_pooler.py": {
        "torch": {
            "Dropout_49": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/boe_encoder.py": {
        "torch": {
            "max_53": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_lengths_from_binary_sequence_mask(mask)",
                            "Call"
                        ],
                        [
                            "torch.max(lengths, lengths.new_ones(1))",
                            "Call"
                        ],
                        [
                            "tokens.new_full((1,), fill_value=tokens.size(1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/cnn_encoder.py": {
        "torch": {
            "transpose_93": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens * mask.unsqueeze(-1).float()",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(tokens, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "maxpool_output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_filters * len(self._ngram_filter_sizes)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_63": {
                "in_channels": {
                    "value": "self._embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self._num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ngram_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "filter_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/cnn_highway_encoder.py": {
        "torch": {
            "Linear_88": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((num for (_, num) in filters))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "token_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convolutions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_63": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_127": {
                "variable": {
                    "value": "(convolved, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "convolved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_conv_i(inputs)",
                            "Call"
                        ],
                        [
                            "torch.max(convolved, dim=-1)",
                            "Call"
                        ],
                        [
                            "self._activation(convolved)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/seq2vec_encoders/pytorch_seq2vec_wrapper.py": {
        "torch": {
            "cat_88": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/similarity_functions/bilinear.py": {
        "torch": {
            "Parameter_35": {
                "variable": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(tensor_1_dim, tensor_2_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "variable": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/similarity_functions/cosine.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/similarity_functions/dot_product.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/similarity_functions/linear.py": {
        "torch": {
            "Parameter_53": {
                "variable": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(combined_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.combine_tensors(self._combination, [tensor_1, tensor_2])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/similarity_functions/multiheaded.py": {
        "torch": {
            "Parameter_67": {
                "variable": {
                    "value": "self._tensor_1_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(tensor_1_dim, tensor_1_projected_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self._tensor_2_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(tensor_2_dim, tensor_2_projected_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "projected_tensor_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self._tensor_1_projection",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "projected_tensor_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_2",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self._tensor_2_projection",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/similarity_functions/similarity_function.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/span_extractors/bidirectional_endpoint_span_extractor.py": {
        "torch": {
            "cat_205": {
                "variable": {
                    "value": "span_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[forward_spans, backward_spans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self._start_sentinel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1, 1, int(input_dim / 2)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self._end_sentinel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1, 1, int(input_dim / 2)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "[span_embeddings, span_width_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_97": {
                "*size": {
                    "value": "[1, 1, int(input_dim / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_98": {
                "*size": {
                    "value": "[1, 1, int(input_dim / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_149": {
                "input": {
                    "value": "sequence_tensor[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/span_extractors/endpoint_span_extractor.py": {
        "torch": {
            "Parameter_67": {
                "variable": {
                    "value": "self._start_sentinel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1, 1, int(input_dim)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "combined_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[combined_tensors, span_width_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_67": {
                "*size": {
                    "value": "[1, 1, int(input_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/span_extractors/self_attentive_span_extractor.py": {
        "torch": {
            "relu_84": {
                "variable": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_span_indices.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/span_extractors/span_extractor.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/stacked_alternating_lstm.py": {
        "torch": {
            "cat_110": {
                "tensors": {
                    "value": "state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/stacked_bidirectional_lstm.py": {
        "torch": {
            "cat_131": {
                "variable": {
                    "value": "final_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_h, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "final_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_c, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_118": {
                "variable": {
                    "value": "(forward_output, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "forward_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_layer(output_sequence, state)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(forward_output, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_119": {
                "variable": {
                    "value": "(backward_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "backward_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backward_layer(output_sequence, state)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(backward_output, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "output_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[forward_output, backward_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_126": {
                "variable": {
                    "value": "output_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "torch.cat([forward_output, backward_output], -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(output_sequence)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(output_sequence, lengths, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(forward_output, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/text_field_embedders/basic_text_field_embedder.py": {
        "torch": {
            "cat_133": {
                "tensors": {
                    "value": "embedded_representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/text_field_embedders/text_field_embedder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/time_distributed.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/token_embedders/bag_of_word_counts_token_embedder.py": {
        "torch": {
            "cat_78": {
                "variable": {
                    "value": "bag_of_words_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bag_of_words_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_int('projection_dim', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_74": {
                "variable": {
                    "value": "document",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "document",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(inputs, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(document, doc_mask.to(dtype=torch.bool))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "doc_mask.to(dtype=torch.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bincount_75": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "document",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(inputs, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(document, doc_mask.to(dtype=torch.bool))",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/bert_token_embedder.py": {
        "torch": {
            "stack_176": {
                "variable": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_model(input_ids=util.combine_initial_dims(input_ids), token_type_ids=util.combine_initial_dims(token_type_ids), attention_mask=util.combine_initial_dims(input_mask))",
                            "Call"
                        ],
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_151": {
                "variable": {
                    "value": "split_input_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "split_input_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, padding_amount]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "split_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(input_ids.split(self.max_pieces, dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_167": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(split_input_ids, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_180": {
                "variable": {
                    "value": "unpacked_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_model(input_ids=util.combine_initial_dims(input_ids), token_type_ids=util.combine_initial_dims(token_type_ids), attention_mask=util.combine_initial_dims(input_mask))",
                            "Call"
                        ],
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "unpacked_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unpacked_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(all_encoder_layers, batch_size, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(unpacked_embeddings, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_162": {
                "variable": {
                    "value": "split_token_type_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "split_token_type_ids[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, padding_amount]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "split_token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(token_type_ids.split(self.max_pieces, dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/elmo_token_embedder.py": {
        "torch": {
            "Linear_69": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._elmo.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_int('projection_dim', None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/elmo_token_embedder_multilang.py": {
        "torch": {
            "Linear_91": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "output_dim_tmp",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_int('projection_dim', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_98": {
                "variable": {
                    "value": "aligning_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "output_dim_tmp",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "aligning",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "output_dim_tmp",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "output_dim_tmp",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "aligning.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "aligning_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(output_dim)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(torch.load(aligninig_path))",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_101": {
                "f": {
                    "value": "aligninig_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(aligning_files[lang])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/embedding.py": {
        "torch": {
            "embedding_139": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.combine_initial_dims(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "extended_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.weight.data, extra_weight.to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_244": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "extended_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.weight.data, extra_weight.to(device)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "self.weight.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_embeddings, embedding_dim)",
                            "Call"
                        ],
                        [
                            "_read_pretrained_embeddings_file(pretrained_file, embedding_dim, vocab, vocab_namespace)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_bool('trainable', True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_embeddings, embedding_dim)",
                            "Call"
                        ],
                        [
                            "_read_pretrained_embeddings_file(pretrained_file, embedding_dim, vocab, vocab_namespace)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_bool('trainable', True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.data.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "params.pop_int('embedding_dim')",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_int('projection_dim', None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/language_model_token_embedder.py": {
        "torch": {
            "cat_177": {
                "variable": {
                    "value": "duplicated_character_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[noncontextual_token_embeddings] * self._character_embedding_duplication_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_108": {
                "variable": {
                    "value": "self._bos_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_109": {
                "variable": {
                    "value": "self._eos_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/openai_transformer_embedder.py": {
        "torch": {
            "stack_73": {
                "variable": {
                    "value": "batch_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, positional_encodings.expand(batch_size, num_timesteps)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/pass_through_token_embedder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/token_embedders/pretrained_transformer_embedder.py": {
        "torch": {}
    },
    "allennlp/allennlp/modules/token_embedders/token_characters_encoder.py": {
        "torch": {
            "Dropout_26": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_float('dropout', 0.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/modules/token_embedders/token_embedder.py": {
        "torch": {}
    },
    "allennlp/allennlp/nn/activations.py": {
        "torch": {}
    },
    "allennlp/allennlp/nn/beam_search.py": {
        "torch": {
            "cat_275": {
                "variable": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(reconstructed_predictions))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_180": {
                "variable": {
                    "value": "cleaned_log_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "last_predictions_expanded == self._end_index",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "log_probs_after_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_class_log_probabilities.new_full((batch_size * self.beam_size, num_classes), float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "class_log_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step(last_predictions, state)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_247": {
                "input": {
                    "value": "last_log_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_log_probabilities",
                            "variable"
                        ],
                        [
                            "restricted_beam_log_probs",
                            "variable"
                        ]
                    ]
                }
            },
            "all_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/nn/cov_beam_search.py": {
        "torch": {
            "cat_292": {
                "variable": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(reconstructed_predictions))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "all_word_log_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(reversed(reconstructed_word_log_probabilities))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_184": {
                "variable": {
                    "value": "cleaned_log_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "last_predictions_expanded == self._end_index",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "log_probs_after_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_class_log_probabilities.new_full((batch_size * self.beam_size, num_classes), float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "class_log_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step(last_predictions, state)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_259": {
                "input": {
                    "value": "last_log_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_log_probabilities",
                            "variable"
                        ],
                        [
                            "restricted_beam_log_probs",
                            "variable"
                        ]
                    ]
                }
            },
            "all_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/nn/div_beam_search.py": {
        "torch": {
            "cat_211": {
                "variable": {
                    "value": "all_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[prediction.unsqueeze(2) for prediction in predictions]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_173": {
                "variable": {
                    "value": "cleaned_log_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "last_predictions_expanded == self._end_index",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "log_probs_after_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_log_probabilities.new_full((batch_size, num_classes), float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "class_log_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step(last_predictions, beam_states[beam_indx])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_189": {
                "variable": {
                    "value": "top_log_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cleaned_log_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(last_predictions_expanded == self._end_index, log_probs_after_end, class_log_probabilities)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "predicted_classes.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "top_log_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isfinite_204": {
                "input": {
                    "value": "last_log_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "class_log_probabilities.new_zeros(batch_size, self.beam_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/nn/initializers.py": {
        "torch": {
            "load_252": {
                "f": {
                    "value": "weights_file_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/nn/regularizers/regularizer.py": {
        "torch": {}
    },
    "allennlp/allennlp/nn/regularizers/regularizer_applicator.py": {
        "torch": {}
    },
    "allennlp/allennlp/nn/regularizers/regularizers.py": {
        "torch": {
            "sum_14": {
                "input": {
                    "value": "torch.abs(parameter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "torch.pow(parameter, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_14": {
                "input": {
                    "value": "parameter",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "parameter",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/nn/util.py": {
        "torch": {
            "arange_170": {
                "variable": {
                    "value": "index_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(sequence_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "sequence_lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_371": {
                "variable": {
                    "value": "value_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "replaced_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector.masked_fill(one_minus_mask, min_val)",
                            "Call"
                        ],
                        [
                            "vector.masked_fill(one_minus_mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_372": {
                "variable": {
                    "value": "value_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flip_396": {
                "variable": {
                    "value": "flipped_padded_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_528": {
                "variable": {
                    "value": "(viterbi_score, best_path)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "path_scores[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_696": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1399": {
                "variable": {
                    "value": "sinusoids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(scaled_time), torch.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "batched_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_to_tensors.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_207": {
                "variable": {
                    "value": "final_encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_forward_output, final_backward_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_262": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_309": {
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector + (mask + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_sequence_398": {
                "sequences": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[flipped_padded_sequence[i, num_timesteps - length:] for (i, length) in enumerate(sequence_lengths)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_456": {
                "variable": {
                    "value": "new_transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ],
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ],
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_461": {
                "variable": {
                    "value": "allowed_start_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[allowed_start_transitions, torch.tensor([-math.inf, -math.inf])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "allowed_end_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[allowed_end_transitions, torch.tensor([-math.inf, -math.inf])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_487": {
                "variable": {
                    "value": "zero_sentinel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ],
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_489": {
                "variable": {
                    "value": "tag_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tag_sequence, extra_tags_sentinel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_490": {
                "variable": {
                    "value": "tag_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_sentinel, tag_sequence, zero_sentinel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_497": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ],
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_507": {
                "variable": {
                    "value": "(scores, paths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "summed_potentials",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path_scores[timestep - 1].unsqueeze(-1) + transition_matrix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_704": {
                "variable": {
                    "value": "probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs_flat.exp()",
                            "Call"
                        ],
                        [
                            "torch.gather(probs_flat, dim=1, index=targets_flat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_733": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1.0 - float(alpha), float(alpha)], dtype=weights.dtype, device=weights.device)",
                            "Call"
                        ],
                        [
                            "torch.gather(alpha_factor, dim=0, index=targets_flat.view(-1)).view(*targets.size())",
                            "Call"
                        ],
                        [
                            "torch.tensor(alpha, dtype=weights.dtype, device=weights.device)",
                            "Call"
                        ],
                        [
                            "alpha_factor.view(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - alpha_factor, alpha_factor])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_740": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_863": {
                "tensors": {
                    "value": "to_concatenate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_get_combination(piece, tensors) for piece in combination.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1404": {
                "variable": {
                    "value": "sinusoids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoids, sinusoids.new_zeros(timesteps, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_1410": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(num_copies)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_269": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_274": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector.masked_fill((1 - mask).to(dtype=torch.bool), mask_fill_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_451": {
                "variable": {
                    "value": "allowed_end_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ],
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_453": {
                "variable": {
                    "value": "allowed_start_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ],
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_520": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ],
                        [
                            "num_tags + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_716": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 - float(alpha), float(alpha)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_954": {
                "input": {
                    "value": "tensors[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_972": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.unsqueeze(-1).expand_as(matrix) * matrix",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second_tensor.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1211": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_1394": {
                "input": {
                    "value": "timescale_range * -log_timescale_increments",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_488": {
                "*size": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tag_sequence.size())",
                            "Call"
                        ],
                        [
                            "tag_sequence.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_722": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_749": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_987": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.unsqueeze(-1).expand_as(matrix) * matrix",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ],
                        [
                            "first_tensor * weight",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second_tensor.pow(-1).transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1103": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_1103": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cumsum_1209": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_1399": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "timestep_range.unsqueeze(1) * inverse_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_1399": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "timestep_range.unsqueeze(1) * inverse_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_231": {
                "*size": {
                    "value": "tensor_for_masking.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_461": {
                "data": {
                    "value": "[-math.inf, -math.inf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_462": {
                "data": {
                    "value": "[-math.inf, -math.inf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_728": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - alpha_factor, alpha_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_992": {
                "input": {
                    "value": "second_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_994": {
                "input": {
                    "value": "second_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "_get_combination(combination[2], tensors)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ],
                        [
                            "second_tensor.squeeze(expanded_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[dims_so_far:dims_so_far + combination_dim]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/predictors/predictor.py": {
        "torch": {}
    },
    "allennlp/allennlp/predictors/wikitables_parser.py": {
        "torch": {
            "tensor_49": {
                "variable": {
                    "value": "initial_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[rule_to_index[token] for token in initial_tokens]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self._model.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/state_machines/beam_search.py": {
        "torch": {}
    },
    "allennlp/allennlp/state_machines/constrained_beam_search.py": {
        "torch": {}
    },
    "allennlp/allennlp/state_machines/states/checklist_statelet.py": {
        "torch": {}
    },
    "allennlp/allennlp/state_machines/states/coverage_state.py": {
        "torch": {}
    },
    "allennlp/allennlp/state_machines/states/grammar_based_state.py": {
        "torch": {}
    },
    "allennlp/allennlp/state_machines/states/lambda_grammar_statelet.py": {
        "torch": {
            "cat_91": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_tensor] + [x[0] for x in context_actions]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[output_tensor] + [x[1] for x in context_actions]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/state_machines/states/rnn_statelet.py": {
        "torch": {}
    },
    "allennlp/allennlp/state_machines/states/state.py": {
        "torch": {}
    },
    "allennlp/allennlp/state_machines/trainers/decoder_trainer.py": {
        "torch": {}
    },
    "allennlp/allennlp/state_machines/trainers/expected_risk_minimization.py": {
        "torch": {
            "cat_63": {
                "variable": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor.view(-1) for tensor in finished_costs[batch_index]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor.view(-1) for tensor in finished_model_scores[batch_index]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state.score[0].view(-1) for state in instance_states]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/state_machines/trainers/maximum_marginal_likelihood.py": {
        "torch": {
            "cat_54": {
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[state.score[0].view(-1) for state in instance_states]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/state_machines/transition_functions/basic_transition_function.py": {
        "torch": {
            "Linear_66": {
                "variable": {
                    "value": "self._input_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim + action_embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self._output_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim + encoder_output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "attended_question",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_state.attended_input for rnn_state in state.rnn_state]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "previous_action_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_state.previous_action_embedding for rnn_state in state.rnn_state]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state.rnn_state[0].encoder_outputs[i] for i in state.batch_indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_138": {
                "variable": {
                    "value": "encoder_output_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state.rnn_state[0].encoder_output_mask[i] for i in state.batch_indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LSTM_72": {
                "variable": {
                    "value": "self._decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_76": {
                "variable": {
                    "value": "self._decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_state.hidden_state for rnn_state in state.rnn_state]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "memory_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_state.memory_cell for rnn_state in state.rnn_state]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_state.hidden_state for rnn_state in state.rnn_state]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "memory_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_state.memory_cell for rnn_state in state.rnn_state]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "action_query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_state[-1], attended_question]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "action_query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_state, attended_question]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "predicted_action_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[predicted_action_embeddings, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_195": {
                "variable": {
                    "value": "current_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_embeddings.mm(predicted_action_embedding.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "[attended_question, previous_action_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "group_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "action_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "group_action_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/state_machines/transition_functions/coverage_transition_function.py": {
        "torch": {
            "Parameter_54": {
                "variable": {
                    "value": "self._checklist_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_134": {
                "variable": {
                    "value": "actions_to_encourage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_agenda_actions * checklist_balance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_138": {
                "variable": {
                    "value": "embedding_addition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_embeddings * actions_to_encourage.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_90": {
                "variable": {
                    "value": "current_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_embeddings.mm(predicted_action_embedding.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/state_machines/transition_functions/linking_coverage_transition_function.py": {
        "torch": {
            "Parameter_55": {
                "variable": {
                    "value": "self._linked_checklist_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_192": {
                "variable": {
                    "value": "actions_to_encourage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_agenda_actions * checklist_balance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_148": {
                "variable": {
                    "value": "current_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_embeddings.mm(predicted_action_embedding.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "output_action_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_action_embeddings, type_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_131": {
                "variable": {
                    "value": "mix1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixture_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mixture_feedforward(hidden_state[group_index])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_132": {
                "variable": {
                    "value": "mix2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - mixture_weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "current_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_action_probs, entity_action_probs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_143": {
                "variable": {
                    "value": "current_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linked_action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linking_scores.mm(attention_weights[group_index].unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "linked_action_logits + addition",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "action_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_action_logits, linked_action_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_146": {
                "variable": {
                    "value": "current_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([embedded_action_logits, linked_action_logits], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_134": {
                "input": {
                    "value": "linked_action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linking_scores.mm(attention_weights[group_index].unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "linked_action_logits + addition",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_138": {
                "input": {
                    "value": "embedded_action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_embeddings.mm(predicted_action_embedding.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/state_machines/transition_functions/linking_transition_function.py": {
        "torch": {
            "log_softmax_144": {
                "variable": {
                    "value": "current_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_action_logits",
                            "variable"
                        ],
                        [
                            "torch.cat([embedded_action_logits, linked_action_logits], dim=-1)",
                            "Call"
                        ],
                        [
                            "linked_action_logits",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "output_action_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_action_embeddings, type_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_126": {
                "variable": {
                    "value": "mix1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixture_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mixture_feedforward(hidden_state[group_index])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_127": {
                "variable": {
                    "value": "mix2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - mixture_weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_141": {
                "variable": {
                    "value": "current_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_action_logits",
                            "variable"
                        ],
                        [
                            "torch.cat([embedded_action_logits, linked_action_logits], dim=-1)",
                            "Call"
                        ],
                        [
                            "linked_action_logits",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "current_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_action_probs, entity_action_probs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "action_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_action_logits, linked_action_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_129": {
                "input": {
                    "value": "linked_action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linking_scores.mm(attention_weights[group_index].unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_131": {
                "input": {
                    "value": "embedded_action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "action_embeddings.mm(predicted_action_embedding.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/state_machines/transition_functions/transition_function.py": {
        "torch": {}
    },
    "allennlp/allennlp/state_machines/util.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/commands/evaluate_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/commands/find_learning_rate_test.py": {
        "torch": {
            "device_count_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/commands/fine_tune_test.py": {
        "torch": {
            "all_59": {
                "input": {
                    "value": "original_weight == extended_weight[:24, :]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_84": {
                "input": {
                    "value": "original_weight == extended_weight[:24, :]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_86": {
                "input": {
                    "value": "extended_weight[24, :] == extra_token_vector",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_88": {
                "input": {
                    "value": "extended_weight[24, :] != extra_token_vector",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/commands/no_op_train_test.py": {
        "torch": {
            "tensor_16": {
                "data": {
                    "value": "98",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/commands/train_test.py": {
        "torch": {
            "all_341": {
                "input": {
                    "value": "original_weight == extended_weight[:24, :]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_count_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/common/from_params_test.py": {
        "torch": {
            "all_485": {
                "input": {
                    "value": "trained_parameter == transfer_parameter",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_488": {
                "input": {
                    "value": "trained_parameter == transfer_parameter",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_492": {
                "input": {
                    "value": "trained_parameter != transfer_parameter",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/common/registrable_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/common/test_util.py": {
        "torch": {
            "Sequential_74": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', torch.nn.Conv1d(5, 5, 5)), ('linear', torch.nn.Linear(5, 10))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_75": {
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/data/fields/array_field_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/data/fields/knowledge_graph_field_test.py": {
        "torch": {
            "stack_152": {
                "variable": {
                    "value": "expected_linking_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor_dict1['linking'], tensor_dict2['linking']]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/data/fields/list_field_test.py": {
        "torch": {
            "ones_25": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vocab.get_vocab_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/data/fields/text_field_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/models/archival_test.py": {
        "torch": {
            "equal_20": {
                "input": {
                    "value": "model.state_dict()[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "model2.state_dict()[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/biaffine_dependency_parser_test.py": {
        "torch": {
            "Tensor_45": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/constituency_parser_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/models/coreference_resolution/coref_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/models/encoder_decoders/copynet_seq2seq_test.py": {
        "torch": {
            "tensor_53": {
                "variable": {
                    "value": "generation_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8], [0.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "copy_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0, 1.0], [1.0, 2.0, 3.0], [2.0, 2.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "target_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vocab.get_token_index('tokens', self.model._target_namespace), vocab.get_token_index('the', self.model._target_namespace), self.model._oov_index]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "target_to_source",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0], [0, 0, 0], [1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "copy_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 1.0, 0.0], [1.0, 0.0, 0.0], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "last_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[5, 6, target_vocab_size + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "source_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[6, oov_index, oov_index], [6, oov_index, 6], [5, oov_index, oov_index]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "source_token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2], [0, 1, 0], [0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "copy_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.1, 0.1], [0.1, 0.1, 0.1], [0.1, 0.1, 0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "source_to_target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[6, oov_index, oov_index], [oov_index, 5, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "source_token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 1], [0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "generation_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1] * target_vocab_size, [0.1] * target_vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "copy_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.1, 0.1], [0.1, 0.1, 0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "target_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[oov_index, tok_index, end_index, pad_index], [tok_index, oov_index, tok_index, end_index]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_224": {
                "variable": {
                    "value": "source_token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2, 3], [0, 1, 0, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "target_token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4, 5, 6, 7], [1, 0, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/encoder_decoders/simple_seq2seq_test.py": {
        "torch": {
            "randn_55": {
                "variable": {
                    "value": "sample_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "state['source_mask'].size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_decoding_steps - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "sample_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.random.randint(0, num_classes, (batch_size, num_decoding_steps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "sample_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.random.randint(0, 2, (batch_size, num_decoding_steps))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/event2mind_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/models/model_test.py": {
        "torch": {
            "all_24": {
                "input": {
                    "value": "original_weight == extended_weight[:24, :]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/reading_comprehension/bidaf_ensemble_test.py": {
        "torch": {
            "equal_95": {
                "input": {
                    "value": "ensemble_output_dict['best_span']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "bidaf_output_dict['best_span']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/reading_comprehension/bidaf_test.py": {
        "torch": {
            "log_89": {
                "variable": {
                    "value": "span_begin_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_90": {
                "variable": {
                    "value": "span_end_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_97": {
                "variable": {
                    "value": "span_begin_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_98": {
                "variable": {
                    "value": "span_end_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_103": {
                "variable": {
                    "value": "span_begin_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_104": {
                "variable": {
                    "value": "span_end_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_108": {
                "variable": {
                    "value": "span_begin_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_109": {
                "variable": {
                    "value": "span_end_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/reading_comprehension/qanet_test.py": {
        "torch": {
            "SGD_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_count_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/reading_comprehension/util_test.py": {
        "torch": {
            "log_10": {
                "variable": {
                    "value": "span_begin_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_11": {
                "variable": {
                    "value": "span_end_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_18": {
                "variable": {
                    "value": "span_begin_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_19": {
                "variable": {
                    "value": "span_end_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_24": {
                "variable": {
                    "value": "span_begin_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_25": {
                "variable": {
                    "value": "span_end_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_29": {
                "variable": {
                    "value": "span_begin_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_30": {
                "variable": {
                    "value": "span_end_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/semantic_parsing/atis/atis_grammar_statelet_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/models/semantic_parsing/nlvr/nlvr_coverage_semantic_parser_test.py": {
        "torch": {
            "Tensor_42": {
                "variable": {
                    "value": "test_agenda",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/models/semantic_parsing/wikitables/wikitables_mml_semantic_parser_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/models/simple_tagger_test.py": {
        "torch": {
            "sum_120": {
                "input": {
                    "value": "torch.pow(parameter, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_120": {
                "input": {
                    "value": "parameter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.named_parameters()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "torch.abs(parameter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_123": {
                "input": {
                    "value": "parameter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.named_parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/attention/additive_attention_test.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "additive._w_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([[-0.2, 0.3], [-0.5, 0.5]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "additive._u_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([[0.0, 1.0], [1.0, 1.0], [1.0, -1.0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "additive._v_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([[1.0], [-1.0]])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/attention/bilinear_attention_test.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "bilinear._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([[-0.3, 0.5], [2.0, -1.0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "bilinear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/attention/cosine_attention_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/attention/dot_product_attention_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/attention/legacy_attention_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/attention/linear_attention_test.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.3, 0.5, 2.0, -1.0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.3, 0.5, 2.0, -1.0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/augmented_lstm_test.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_31": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor * 5.0, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_sequence.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_34": {
                "variable": {
                    "value": "(output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm(tensor)",
                            "Call"
                        ],
                        [
                            "lstm(tensor)",
                            "Call"
                        ],
                        [
                            "lstm(tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_43": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor * 5.0, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_sequence.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_46": {
                "variable": {
                    "value": "(output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm(tensor)",
                            "Call"
                        ],
                        [
                            "lstm(tensor)",
                            "Call"
                        ],
                        [
                            "lstm(tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_55": {
                "variable": {
                    "value": "pytorch_lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 5, 11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "initial_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 5, 11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_67": {
                "variable": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor * 5.0, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_sequence.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_71": {
                "variable": {
                    "value": "(pytorch_output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "pytorch_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_lstm(lstm_input, (initial_state, initial_memory))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_72": {
                "variable": {
                    "value": "(augmented_output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "augmented_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "augmented_lstm(lstm_input, (initial_state, initial_memory))",
                            "Call"
                        ],
                        [
                            "augmented_lstm(lstm_input, (initial_state, initial_memory))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_84": {
                "variable": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor * 5.0, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_sequence.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_105": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor * 5.0, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_sequence.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_108": {
                "variable": {
                    "value": "(output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm(tensor)",
                            "Call"
                        ],
                        [
                            "lstm(tensor)",
                            "Call"
                        ],
                        [
                            "lstm(tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_130": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 5, 11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_131": {
                "variable": {
                    "value": "initial_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 5, 11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_135": {
                "variable": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor * 5.0, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ],
                        [
                            "sort_batch_by_length(self.random_tensor, self.sequence_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_sequence.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_139": {
                "variable": {
                    "value": "(dropped_output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "dropped_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropped_augmented_lstm(lstm_input, (initial_state, initial_memory))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_140": {
                "variable": {
                    "value": "(augmented_output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "augmented_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "augmented_lstm(lstm_input, (initial_state, initial_memory))",
                            "Call"
                        ],
                        [
                            "augmented_lstm(lstm_input, (initial_state, initial_memory))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/bimpm_matching_test.py": {
        "torch": {
            "randint_13": {
                "variable": {
                    "value": "seq_len1",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len1 - 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "high": {
                    "value": "len1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_14": {
                "variable": {
                    "value": "seq_len2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len2 - 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "high": {
                    "value": "len2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "test1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "len1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "randn_28": {
                "variable": {
                    "value": "test2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "len2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "split_32": {
                "variable": {
                    "value": "(test1_fw, test1_bw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "test1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch, len1, d)",
                            "Call"
                        ],
                        [
                            "test1 * mask1.view(-1, len1, 1).expand(-1, len1, d)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_33": {
                "variable": {
                    "value": "(test2_fw, test2_bw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "test2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch, len2, d)",
                            "Call"
                        ],
                        [
                            "test2 * mask2.view(-1, len2, 1).expand(-1, len2, d)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_40": {
                "tensors": {
                    "value": "vecs_h_fw + vecs_h_bw",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/conditional_random_field_test.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_26": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "self.transitions_from_start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_35": {
                "variable": {
                    "value": "self.transitions_to_end",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.crf.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.crf.start_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transitions_from_start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.crf.end_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transitions_to_end",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "crf.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "crf.start_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transitions_from_start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_167": {
                "variable": {
                    "value": "crf.end_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transitions_to_end",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_i.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_138": {
                "variable": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mas.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/elmo_test.py": {
        "torch": {
            "cat_235": {
                "variable": {
                    "value": "character_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids.unsqueeze(1) for ids in all_character_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_278": {
                "variable": {
                    "value": "expanded_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor['tokens'] for _ in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "expanded_char_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor['character_ids'] for _ in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_292": {
                "variable": {
                    "value": "char_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.random.randint(0, 262, (batch_size, seq_len, 50))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_332": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json.load(fin)",
                            "Call"
                        ],
                        [
                            "self._load_sentences_embeddings()",
                            "Call"
                        ],
                        [
                            "[['This', 'is', 'OOV'], ['so', 'is', 'this']]",
                            "List"
                        ],
                        [
                            "[['This', 'is', 'a', 'sentence'], ['Here', \"'s\", 'one'], ['Another', 'one']]",
                            "List"
                        ],
                        [
                            "[['The', 'sentence', '.'], ['ELMo', 'helps', 'disambiguate', 'ELMo', 'from', 'Elmo', '.']]",
                            "List"
                        ],
                        [
                            "[['The', 'sentence', '.'], ['ELMo', 'helps', 'disambiguate', 'ELMo', 'from', 'Elmo', '.']]",
                            "List"
                        ],
                        [
                            "[[['The', 'sentence', '.'], ['ELMo', 'helps', 'disambiguate', 'ELMo', 'from', 'Elmo', '.']], [['1', '2'], ['1', '2', '3', '4', '5', '6', '7']], [['1', '2', '3', '4', '50', '60', '70'], ['The']]]",
                            "List"
                        ],
                        [
                            "[['The', 'sentence', '.'], ['ELMo', 'helps', 'disambiguate', 'ELMo', 'from', 'Elmo', '.']]",
                            "List"
                        ],
                        [
                            "[['This', 'is', 'a', 'sentence'], ['Here', \"'s\", 'one'], ['Another', 'one']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sentences",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(indices['correct'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_281": {
                "tensor": {
                    "value": "expanded_result['elmo_representations'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/encoder_base_test.py": {
        "torch": {
            "LSTM_16": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RNN_17": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_20": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_24": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[6, 2, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "state_with_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "[1, 3, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[state, torch.zeros([1, 2, 7])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_98": {
                "*size": {
                    "value": "[1, 10, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_122": {
                "*size": {
                    "value": "[1, 5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_134": {
                "*size": {
                    "value": "[1, 5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_159": {
                "*size": {
                    "value": "[1, 3, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_192": {
                "*size": {
                    "value": "[1, 5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_228": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_228": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_229": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_229": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_266": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_266": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_267": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_267": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "[1, 2, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_202": {
                "input": {
                    "value": "initial_states[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_204": {
                "input": {
                    "value": "initial_states[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/feedforward_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/highway_test.py": {
        "torch": {
            "ones_25": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/language_model_heads/bert_test.py": {
        "torch": {
            "rand_17": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/language_model_heads/gpt2_test.py": {
        "torch": {
            "rand_17": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/language_model_heads/linear.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/lstm_cell_with_projection_test.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_16": {
                "variable": {
                    "value": "initial_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_17": {
                "variable": {
                    "value": "initial_memory_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 4, 7]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/masked_layer_norm_test.py": {
        "torch": {
            "from_numpy_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(2, 3, 7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_14": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1, 1, 0], [1, 1, 1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/matrix_attention/bilinear_matrix_attention_test.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "bilinear._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([[-0.3, 0.5], [2.0, -1.0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "bilinear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "bilinear._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([[-0.3, 0.5, 1.0], [2.0, -1.0, -1.0], [1.0, 0.5, 1.0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "bilinear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/matrix_attention/cosine_matrix_attention_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/matrix_attention/dot_product_matrix_attention_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/matrix_attention/legacy_matrix_attention_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/matrix_attention/linear_matrix_attention_test.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.3, 0.5, 2.0, -1.0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.3, 0.5, 2.0, -1.0, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/maxout_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/pruner_test.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_16": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_21": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_45": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_45": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_56": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_92": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_92": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_101": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "num_items_to_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_132": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_132": {
                "variable": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_137": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "num_items_to_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/residual_with_layer_dropout_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/sampled_softmax_loss_test.py": {
        "torch": {
            "rand_23": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_24": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_41": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_53": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_54": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_90": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/scalar_mix_test.py": {
        "torch": {
            "from_numpy_51": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.ones((3, 4), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_15": {
                "*size": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_29": {
                "*size": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_48": {
                "*size": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2seq_encoders/bidirectional_language_model_transformer_test.py": {
        "torch": {
            "rand_13": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_14": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_27": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "concat_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer.unsqueeze(1) for layer in output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2seq_encoders/feedforward_encoder_test.py": {
        "torch": {
            "randn_27": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 3, 10]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2seq_encoders/gated_cnn_encoder_test.py": {
        "torch": {
            "rand_15": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_16": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_32": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_47": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_48": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "concat_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer.unsqueeze(1) for layer in output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2seq_encoders/intra_sentence_attention_test.py": {
        "torch": {
            "from_numpy_49": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.random.rand(4, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.random.rand(4, 6, 24)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2seq_encoders/multi_head_self_attention_test.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_35": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 12]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2seq_encoders/pass_through_encoder_test.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 3, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 3, 9]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2seq_encoders/pytorch_seq2seq_wrapper_test.py": {
        "torch": {
            "LSTM_16": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_20": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_26": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_34": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_48": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_56": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_58": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_63": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_70": {
                "variable": {
                    "value": "packed_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[[0.7, 0.8], [0.1, 1.5]]])",
                            "Call"
                        ],
                        [
                            "torch.rand([5, 7, 3])",
                            "Call"
                        ],
                        [
                            "torch.rand([5, 7, 3])",
                            "Call"
                        ],
                        [
                            "torch.rand([5, 8, 3])",
                            "Call"
                        ],
                        [
                            "torch.rand([5, 7, 3])",
                            "Call"
                        ],
                        [
                            "torch.rand([5, 7, 3])",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sequence_lengths.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_73": {
                "variable": {
                    "value": "(lstm_tensor, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm(input_tensor)",
                            "Call"
                        ],
                        [
                            "lstm(packed_sequence)",
                            "Call"
                        ],
                        [
                            "lstm(packed_sequence)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_77": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_79": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_84": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_93": {
                "variable": {
                    "value": "packed_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch_by_length(input_tensor, sequence_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_sequence_lengths.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_98": {
                "variable": {
                    "value": "(lstm_tensor, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm(input_tensor)",
                            "Call"
                        ],
                        [
                            "lstm(packed_sequence)",
                            "Call"
                        ],
                        [
                            "lstm(packed_sequence)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_104": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_106": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 8, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_108": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_121": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_124": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_136": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_138": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_139": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_150": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_174": {
                "variable": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_117": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_159": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, sequence_length, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_160": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(batch_sizes, sequence_lengths)",
                            "Call"
                        ],
                        [
                            "batch_sizes",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(batch_sizes, sequence_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_180": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 5, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_181": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(batch_sizes, sequence_lengths)",
                            "Call"
                        ],
                        [
                            "batch_sizes",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_131": {
                "*size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2seq_encoders/qanet_encoder_test.py": {
        "torch": {
            "randn_43": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2seq_encoders/stacked_self_attention_test.py": {
        "torch": {
            "randn_32": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 5, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_45": {
                "variable": {
                    "value": "parallel_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StackedSelfAttentionEncoder(input_dim=9, hidden_dim=12, projection_dim=6, feedforward_hidden_dim=5, num_layers=3, num_attention_heads=3)",
                            "Call"
                        ],
                        [
                            "StackedSelfAttentionEncoder(input_dim=9, hidden_dim=12, projection_dim=9, feedforward_hidden_dim=5, num_layers=3, num_attention_heads=3)",
                            "Call"
                        ],
                        [
                            "StackedSelfAttentionEncoder(input_dim=9, hidden_dim=12, projection_dim=9, feedforward_hidden_dim=5, num_layers=3, num_attention_heads=3).to(0)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_46": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 5, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_count_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2vec_encoders/boe_encoder_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/seq2vec_encoders/cnn_encoder_test.py": {
        "torch": {
            "rand_54": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2vec_encoders/cnn_highway_encoder_test.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(5, 6, 50, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_23": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/seq2vec_encoders/pytorch_seq2vec_wrapper_test.py": {
        "torch": {
            "LSTM_17": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_21": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_27": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_35": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_38": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_43": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_50": {
                "variable": {
                    "value": "packed_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[[0.7, 0.8], [0.1, 1.5]]])",
                            "Call"
                        ],
                        [
                            "torch.rand([5, 7, 3])",
                            "Call"
                        ],
                        [
                            "torch.rand([5, 7, 3])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sequence_lengths.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "explicitly_concatenated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[reshaped_state[:, 0, :].squeeze(1), reshaped_state[:, 1, :].squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTM_61": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_64": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_69": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_83": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_86": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_100": {
                "variable": {
                    "value": "packed_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch_by_length(input_tensor, sequence_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_sequence_lengths.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "explicitly_concatenated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[reshaped_state[:, 0, :].squeeze(1), reshaped_state[:, 1, :].squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_124": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_115": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/similarity_functions/bilinear_test.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "bilinear._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([[-0.3, 0.5], [2.0, -1.0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "bilinear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "bilinear._weight_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(weights).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "bilinear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(numpy.asarray([0])).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "a_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[1, 1], [-1, -1]])",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "b_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "b_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[1, 0], [0, 1]])",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(4, 7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "ndarray": {
                    "value": "numpy.asarray([0])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/similarity_functions/cosine_test.py": {
        "torch": {
            "from_numpy_20": {
                "ndarray": {
                    "value": "a_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(1, 2, 3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "b_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(1, 2, 3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "a_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(1, 2, 3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "b_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(1, 2, 3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 7)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/similarity_functions/dot_product_test.py": {
        "torch": {
            "from_numpy_26": {
                "ndarray": {
                    "value": "a_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([[1, 1, 1], [-1, -1, -1]])",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 7)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_27": {
                "ndarray": {
                    "value": "b_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([[1, 0, 1], [1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 7)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/similarity_functions/linear_test.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.3, 0.5, 2.0, -1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(weights).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.3, 0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.3, 0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.3, 0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "linear._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-0.3, 0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "linear._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(14)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_36": {
                "ndarray": {
                    "value": "a_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[[1, 1, 1], [-1, -1, 0]]])",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 7)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [-1, -1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [-1, -1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [-1, -1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [-1, -1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_37": {
                "ndarray": {
                    "value": "b_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[[0], [1]]])",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(5, 4, 3, 6, 7)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 0], [0, 1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 2], [2, 1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 0], [0, 1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 0], [0, 1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/similarity_functions/multiheaded_test.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "similarity._tensor_1_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "similarity._tensor_2_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_28": {
                "n": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_29": {
                "n": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/span_extractors/bidirectional_endpoint_span_extractor_test.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 5, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 5, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_195": {
                "variable": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 5, 8]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/span_extractors/endpoint_span_extractor_test.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_78": {
                "variable": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 5, 8]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/span_extractors/self_attentive_span_extractor_test.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 5, input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/stacked_alternating_lstm_test.py": {
        "torch": {
            "rand_12": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_16": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(4, 5, 3)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input_tensor, [5, 4, 2, 1], batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "[5, 4, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_19": {
                "variable": {
                    "value": "(output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/stacked_bidirectional_lstm_test.py": {
        "torch": {
            "rand_16": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_20": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(4, 5, 3)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input_tensor, [5, 4, 2, 1], batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(4, 5, 3)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "[5, 4, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_23": {
                "variable": {
                    "value": "(output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm(input_tensor)",
                            "Call"
                        ],
                        [
                            "encoder(input_tensor, mask)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_83": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 5, 11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_84": {
                "variable": {
                    "value": "initial_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 5, 11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_86": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_90": {
                "variable": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch_by_length(tensor, sequence_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_sequence.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_94": {
                "variable": {
                    "value": "(dropped_output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "dropped_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropped_stacked_lstm(lstm_input, (initial_state, initial_memory))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_95": {
                "variable": {
                    "value": "(stacked_output_sequence, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "stacked_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stacked_lstm(lstm_input, (initial_state, initial_memory))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/stacked_elmo_lstm_test.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_15": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/text_field_embedders/basic_text_field_embedder_test.py": {
        "torch": {
            "rand_91": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_92": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_111": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_137": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_138": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_161": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_193": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_194": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/time_distributed_test.py": {
        "torch": {
            "Embedding_13": {
                "variable": {
                    "value": "char_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "char_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([[0.4, 0.4], [0.5, 0.5]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "char_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "char_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([[0.4, 0.4], [0.5, 0.5]])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/token_embedders/bag_of_word_counts_token_embedder_test.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[2, 0], [3, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 5], [2, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 0], [1, 0], [4, 4]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "manual_output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[2, 0], [3, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 5], [2, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 0], [1, 0], [4, 4]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[2, 0], [3, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 5], [2, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 0], [1, 0], [4, 4]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "manual_output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[2, 0], [3, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 5], [2, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 0], [1, 0], [4, 4]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[2, 0], [3, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 5], [2, 0], [4, 4]])",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 2, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 0], [1, 0], [4, 4]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/token_embedders/bert_embedder_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/token_embedders/elmo_token_embedder_multilang_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/token_embedders/elmo_token_embedder_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/modules/token_embedders/embedding_test.py": {
        "torch": {
            "Parameter_343": {
                "variable": {
                    "value": "embedder.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "embedder.weight[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "all_245": {
                "input": {
                    "value": "extended_weight[:4, :] == original_weight[:4, :]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_265": {
                "input": {
                    "value": "extended_weight[:4, :] == original_weight[:4, :]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_287": {
                "input": {
                    "value": "extended_weight[:4, :] == original_weight[:4, :]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_307": {
                "input": {
                    "value": "embedder.weight[2:, :] == torch.Tensor([[2.0, 3.3, 0.0], [1.1, 1.4, -3.0]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_320": {
                "input": {
                    "value": "original_weight[:4, :] == extended_weight[:4, :]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_323": {
                "input": {
                    "value": "extended_weight[4, :] == torch.Tensor([0.5, 0.3, -6.0])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_332": {
                "input": {
                    "value": "embedder.weight == original_weight",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "equal_160": {
                "input": {
                    "value": "embeddings[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token2vec.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/token_embedders/openai_transformer_embedder_test.py": {
        "torch": {
            "from_numpy_135": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(batch_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "batch_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_indices, positional_encodings.expand(batch_size, num_timesteps)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/token_embedders/pass_through_embedder_test.py": {
        "torch": {
            "randn_10": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/token_embedders/pretrained_transformer_embedder_test.py": {
        "torch": {
            "randint_14": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/modules/token_embedders/token_characters_encoder_test.py": {
        "torch": {
            "from_numpy_51": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.randint(6, size=(3, 4, 7))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/tests/nn/beam_search_test.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "transition_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.4, 0.3, 0.2, 0.1, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_39": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transition_probabilities[last_token.item()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "initial_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "state[foo]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 1], [2, 0, 1], [0, 0, 1], [1, 1, 1], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_42": {
                "tensors": {
                    "value": "log_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/tests/nn/chu_liu_edmonds_test.py": {
        "torch": {
            "arange_78": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/nn/initializers_test.py": {
        "torch": {
            "zeros_61": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_58": {
                "input": {
                    "value": "parameter.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.ones(parameter.size()) * 7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.linear_1_with_funky_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_55": {
                "input": {
                    "value": "parameter.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.ones(parameter.size()) * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.linear_3_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.linear_4_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_101": {
                "variable": {
                    "value": "self.pretrained_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "parameter.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_119": {
                "input": {
                    "value": "parameter.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.ones(parameter.size()) * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "parameter.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_127": {
                "input": {
                    "value": "parameter.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.ones(parameter.size()) * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "parameter.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_127": {
                "*size": {
                    "value": "parameter.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/nn/pretrained_model_initializer_test.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_37": {
                "obj": {
                    "value": "self.net2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.temp_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "self.net2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "temp_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.TEST_DIR / 'gpu_weights.th'",
                            "BinOp"
                        ],
                        [
                            "self.TEST_DIR / 'gpu_weights.th'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_148": {
                "obj": {
                    "value": "self.net2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "temp_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.TEST_DIR / 'gpu_weights.th'",
                            "BinOp"
                        ],
                        [
                            "self.TEST_DIR / 'gpu_weights.th'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_40": {
                "input": {
                    "value": "linear1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "linear2.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_41": {
                "input": {
                    "value": "linear1.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "linear2.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/nn/regularizers_test.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(5, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/nn/util_test.py": {
        "torch": {
            "ones_43": {
                "variable": {
                    "value": "binary_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "260",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, -4, 3], [-3, 0, -30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_70": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_355": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_387": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_452": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(batch_size, sentence_length, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_3, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_2, embedding_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_471": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(batch_size, sentence_length, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_3, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_2, embedding_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_472": {
                "variable": {
                    "value": "attention_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "attention_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_487": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(batch_size, sentence_length, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_3, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_2, embedding_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_488": {
                "variable": {
                    "value": "attention_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "attention_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_505": {
                "variable": {
                    "value": "sentence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(batch_size, sentence_length, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_3, embedding_dim)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_2, embedding_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_506": {
                "variable": {
                    "value": "attention_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "attention_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2, length_3)",
                            "Call"
                        ],
                        [
                            "numpy.random.rand(batch_size, length_1, length_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_517": {
                "variable": {
                    "value": "sequence_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand([5, 9])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_518": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[9, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_520": {
                "variable": {
                    "value": "(_, argmax_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(torch.rand([5, 9]), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(torch.rand([5, 9]), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[0, 0, 0, 3, 5], [0, 0, 0, 3, 4], [0, 0, 0, 3, 4], [0, 0, 0, 3, 4], [0, 0, 0, 3, 4], [0, 0, 0, 3, 4]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[0, 0, 0, 4, 4], [0, 0, 0, 4, 4], [0, 0, 0, 4, 4], [0, 0, 0, 4, 4], [0, 0, 0, 4, 4], [0, 0, 0, 4, 4]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 0, 0, 4], [1, 0, 6, 2], [0, 3, 0, 4]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[0, 0, 0, 7, 7], [0, 0, 0, 7, 7], [0, 0, 0, 7, 7], [0, 0, 0, 7, 7], [0, 0, 0, 7, 7], [0, 0, 0, 7, 7]])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_524": {
                "variable": {
                    "value": "sequence_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand([5, 9])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_525": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[9, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_526": {
                "variable": {
                    "value": "allowed_start_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_529": {
                "variable": {
                    "value": "allowed_end_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_547": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_564": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_576": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_593": {
                "variable": {
                    "value": "transition_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_612": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_631": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_634": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_650": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_669": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_692": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, length, classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_694": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_714": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, length, classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_716": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_738": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.random.rand() if numpy.random.rand() > 0.5 else 1.0 - numpy.random.rand()",
                            "IfExp"
                        ],
                        [
                            "numpy.random.rand() if numpy.random.rand() > 0.5 else 1.0 - numpy.random.rand()",
                            "IfExp"
                        ],
                        [
                            "torch.tensor(alpha)",
                            "Call"
                        ],
                        [
                            "abs(numpy.random.randn(classes))",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_740": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, length, classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_742": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_765": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, length, classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_767": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_812": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix, allowed_end_transitions=allowed_end_transitions, allowed_start_transitions=allowed_start_transitions)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix, observations)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2, 3, 4], [5, 6, 7, 8], [9, 9, 9, 9]], [[2, 1, 0, 7], [7, 7, 2, 3], [0, 0, 4, 2]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 11], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, -1], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[1, 2], [3, 4]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([1, 2, 7, 1, 56, 900])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_828": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix, allowed_end_transitions=allowed_end_transitions, allowed_start_transitions=allowed_start_transitions)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix, observations)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2, 3, 4], [5, 6, 7, 8], [9, 9, 9, 9]], [[2, 1, 0, 7], [7, 7, 2, 3], [0, 0, 4, 2]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 11], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, -1], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[1, 2], [3, 4]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([1, 2, 7, 1, 56, 900])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_847": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix, allowed_end_transitions=allowed_end_transitions, allowed_start_transitions=allowed_start_transitions)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix, observations)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2, 3, 4], [5, 6, 7, 8], [9, 9, 9, 9]], [[2, 1, 0, 7], [7, 7, 2, 3], [0, 0, 4, 2]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 11], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, -1], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[1, 2], [3, 4]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([1, 2, 7, 1, 56, 900])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_855": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix, allowed_end_transitions=allowed_end_transitions, allowed_start_transitions=allowed_start_transitions)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix, observations)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2, 3, 4], [5, 6, 7, 8], [9, 9, 9, 9]], [[2, 1, 0, 7], [7, 7, 2, 3], [0, 0, 4, 2]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 11], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, -1], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[1, 2], [3, 4]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([1, 2, 7, 1, 56, 900])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_866": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits.data, transition_matrix, allowed_end_transitions=allowed_end_transitions, allowed_start_transitions=allowed_start_transitions)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix)",
                            "Call"
                        ],
                        [
                            "util.viterbi_decode(sequence_logits, transition_matrix, observations)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2, 3, 4], [5, 6, 7, 8], [9, 9, 9, 9]], [[2, 1, 0, 7], [7, 7, 2, 3], [0, 0, 4, 2]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, 11], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[[1, -1], [3, 4]], [[5, 6], [7, 8]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "numpy.array([[1, 2], [3, 4]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(indices, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([1, 2, 7, 1, 56, 900])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_894": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array([[1, 2, 3], [4, 5, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_905": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array([[[1, 2, 3, 4], [5, 5, 5, 5], [6, 8, 1, 2]], [[4, 3, 2, 1], [8, 7, 6, 5], [0, 0, 0, 0]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_913": {
                "variable": {
                    "value": "bos",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array([9, 9, 9, 9])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_914": {
                "variable": {
                    "value": "eos",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array([10, 10, 10, 10])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_930": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.random.rand(3, 5, 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_931": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array([[1, 1, 0, 0, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_940": {
                "variable": {
                    "value": "expected_new_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_945": {
                "variable": {
                    "value": "expected_new_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array([[0, 0, 0], [1, 1, 1], [1, 1, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_959": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_972": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 3, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_1037": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_1049": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "randn_1050": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "Tensor_1052": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_1067": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "randn_1068": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "Tensor_1070": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_1082": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_1114": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_1120": {
                "variable": {
                    "value": "embedding2d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4 * 10 * 20 * 17 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_639": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_700": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_722": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_748": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_773": {
                "variable": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ],
                        [
                            "zip(tensor.squeeze(0), targets.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_517": {
                "*size": {
                    "value": "[5, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_524": {
                "*size": {
                    "value": "[5, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_825": {
                "*size": {
                    "value": "[2, 10, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_825": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_863": {
                "*size": {
                    "value": "[2, 6, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_863": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_978": {},
            "Tensor_1028": {},
            "Tensor_1035": {},
            "Tensor_1036": {},
            "ones_885": {
                "*size": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/state_machines/beam_search_test.py": {
        "torch": {
            "Tensor_54": {}
        }
    },
    "allennlp/allennlp/tests/state_machines/constrained_beam_search_test.py": {
        "torch": {
            "Tensor_26": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_16": {}
        }
    },
    "allennlp/allennlp/tests/state_machines/simple_transition_system.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/state_machines/states/lambda_grammar_statelet_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/state_machines/trainers/expected_risk_minimization_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/state_machines/trainers/maximum_marginal_likelihood_test.py": {
        "torch": {
            "Tensor_17": {}
        }
    },
    "allennlp/allennlp/tests/state_machines/transition_functions/basic_transition_function_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/state_machines/util_test.py": {
        "torch": {
            "Tensor_10": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/callback_trainer_test.py": {
        "torch": {
            "SGD_75": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/gan_callback_trainer_test.py": {
        "torch": {
            "ones_250": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/gan_trainer_test.py": {
        "torch": {
            "mean_126": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_128": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(diffs, 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_129": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.pow(diffs, 2.0))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_131": {
                "variable": {
                    "value": "skews",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(zscores, 3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean.reshape(1), std.reshape(1), skews.reshape(1), kurtoses.reshape(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BCELoss_103": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_161": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_116": {
                "variable": {
                    "value": "desired",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(output)['output']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_128": {
                "input": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist - mean",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_131": {
                "input": {
                    "value": "zscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diffs / std",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_132": {
                "input": {
                    "value": "torch.pow(zscores, 4.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_132": {
                "input": {
                    "value": "zscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diffs / std",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_223": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/learning_rate_schedulers/cosine_test.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(10, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/learning_rate_schedulers/learning_rate_scheduler_test.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(10, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/learning_rate_schedulers/slanted_triangular_test.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('lin1', torch.nn.Linear(10, 10)), ('lin2', torch.nn.Linear(10, 10))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/attachment_scores_test.py": {
        "torch": {
            "Tensor_13": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_16": {
                "variable": {
                    "value": "self.gold_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "self.label_predictions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "self.gold_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/bleu_test.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 0], [0, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0], [1, 1, 0], [1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "gold_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 0, 0], [1, 0, 0], [1, 1, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/boolean_accuracy_test.py": {
        "torch": {
            "Tensor_12": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_16": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_23": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_42": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_47": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_56": {
                "variable": {
                    "value": "incorrect_shape_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_63": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_64": {
                "variable": {
                    "value": "incorrect_shape_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "[5, 8]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/categorical_accuracy_test.py": {
        "torch": {
            "Tensor_22": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_24": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_45": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_48": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_62": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_77": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_78": {
                "variable": {
                    "value": "out_of_range_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_84": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_93": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_94": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_105": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_36": {},
            "Tensor_37": {}
        }
    },
    "allennlp/allennlp/tests/training/metrics/conll_coref_scores_test.py": {
        "torch": {
            "Tensor_9": {
                "variable": {
                    "value": "top_spans",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_10": {
                "variable": {
                    "value": "antecedent_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_13": {
                "variable": {
                    "value": "predicted_antecedents",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/covariance_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/training/metrics/entropy_test.py": {
        "torch": {
            "Tensor_12": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_24": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_36": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/f1_measure_test.py": {
        "torch": {
            "rand_14": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_15": {
                "variable": {
                    "value": "out_of_range_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_21": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_29": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_47": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_61": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_96": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_110": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/fbeta_measure_test.py": {
        "torch": {
            "Tensor_16": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_83": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_166": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_167": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_168": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/mean_absolute_error_test.py": {
        "torch": {
            "Tensor_11": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_15": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_29": {
                "variable": {
                    "value": "new_targets",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/pearson_correlation_test.py": {
        "torch": {}
    },
    "allennlp/allennlp/tests/training/metrics/sequence_accuracy_test.py": {
        "torch": {
            "Tensor_28": {
                "variable": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_40": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_54": {},
            "Tensor_55": {}
        }
    },
    "allennlp/allennlp/tests/training/metrics/span_based_f1_measure_test.py": {
        "torch": {
            "Tensor_54": {
                "variable": {
                    "value": "gold_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_55": {
                "variable": {
                    "value": "prediction_map_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_57": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 6, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "gold_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 9, self.vocab.get_vocab_size('tags')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_183": {
                "variable": {
                    "value": "gold_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_185": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 5, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_222": {
                "variable": {
                    "value": "gold_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_223": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 6, self.vocab.get_vocab_size('tags')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_280": {
                "variable": {
                    "value": "gold_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_281": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 6, self.vocab.get_vocab_size('tags')]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/metrics/unigram_recall_test.py": {
        "torch": {
            "Tensor_28": {
                "variable": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_40": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_54": {},
            "Tensor_55": {}
        }
    },
    "allennlp/allennlp/tests/training/momentum_schedulers/inverted_triangular_test.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(10, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/moving_average_test.py": {
        "torch": {
            "ones_22": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_23": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_53": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_54": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_123": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_88": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/multi_task_trainer_test.py": {
        "torch": {
            "Parameter_152": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/no_op_trainer_test.py": {
        "torch": {
            "tensor_15": {
                "data": {
                    "value": "98",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tests/training/trainer_test.py": {
        "torch": {
            "SGD_53": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_684": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_666": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(self.TEST_DIR / 'training_state_epoch_{}.th'.format(index))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_670": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(self.TEST_DIR / 'training_state_epoch_{}.th'.format(index))",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_686": {
                "*size": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/tools/create_elmo_embeddings_from_vocab.py": {
        "torch": {
            "cat_78": {
                "variable": {
                    "value": "embedding_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sentences[i * batch_size:(i + 1) * batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/callback_trainer.py": {
        "torch": {
            "isnan_196": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dict['loss']",
                            "Subscript"
                        ],
                        [
                            "loss + self.model.get_regularization_penalty()",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.batch_loss(batch_group, for_training=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/callbacks/log_to_tensorboard.py": {
        "torch": {
            "norm_96": {
                "variable": {
                    "value": "update_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.param_updates[name].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_97": {
                "variable": {
                    "value": "param_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/callbacks/update_learning_rate.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/callbacks/update_momentum.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/callbacks/validate.py": {
        "torch": {
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/checkpointer.py": {
        "torch": {
            "load_202": {
                "variable": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "nn_util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_203": {
                "variable": {
                    "value": "training_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "training_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "nn_util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_path, map_location=nn_util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_48": {
                "obj": {
                    "value": "{**training_states, 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "training_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_84": {
                "obj": {
                    "value": "{**training_states, 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "training_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_127": {
                "obj": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_path, map_location=nn_util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_103": {
                "obj": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_path, map_location=nn_util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/learning_rate_schedulers/cosine.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/learning_rate_schedulers/learning_rate_scheduler.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/learning_rate_schedulers/noam.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/learning_rate_schedulers/slanted_triangular.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/attachment_scores.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/bleu.py": {
        "torch": {
            "ones_109": {
                "variable": {
                    "value": "valid_tokens_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/boolean_accuracy.py": {
        "torch": {
            "ones_65": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/categorical_accuracy.py": {
        "torch": {
            "arange_74": {
                "start": {
                    "value": "gold_labels.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/conll_coref_scores.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/covariance.py": {
        "torch": {
            "sum_59": {
                "variable": {
                    "value": "num_batch_items",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ],
                        [
                            "mask.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_84": {
                "variable": {
                    "value": "batch_co_moment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_coresiduals * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_86": {
                "variable": {
                    "value": "batch_co_moment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_coresiduals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(predictions - batch_mean_prediction) * (gold_labels - batch_mean_label)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_71": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ],
                        [
                            "predictions.view(-1)",
                            "Call"
                        ],
                        [
                            "predictions * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_77": {
                "input": {
                    "value": "gold_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ],
                        [
                            "gold_labels.view(-1)",
                            "Call"
                        ],
                        [
                            "gold_labels * mask",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/entropy.py": {
        "torch": {
            "log_softmax_33": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(logits, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_31": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.size()[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_34": {
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/fbeta_measure.py": {
        "torch": {
            "zeros_115": {
                "variable": {
                    "value": "self._true_positive_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "self._true_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "self._pred_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "self._total_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_121": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ],
                        [
                            "gold_labels.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "true_positive_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bincount_134": {
                "variable": {
                    "value": "true_positive_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_positives_bins.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "minlength": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bincount_140": {
                "variable": {
                    "value": "pred_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "argmax_predictions[mask].long()",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "pred_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bincount_146": {
                "variable": {
                    "value": "true_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gold_labels[mask].long()",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "true_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.size(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/mean_absolute_error.py": {
        "torch": {
            "abs_34": {
                "variable": {
                    "value": "absolute_errors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions - gold_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_40": {
                "input": {
                    "value": "absolute_errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(predictions - gold_labels)",
                            "Call"
                        ],
                        [
                            "absolute_errors * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_37": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/mention_recall.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/metric.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/pearson_correlation.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/perplexity.py": {
        "torch": {
            "exp_32": {
                "input": {
                    "value": "average_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().get_metric(reset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/sequence_accuracy.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/metrics/span_based_f1_measure.py": {
        "torch": {
            "ones_like_119": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask, prediction_map)",
                            "Call"
                        ],
                        [
                            "torch.gather(prediction_map, 1, gold_labels.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_134": {
                "variable": {
                    "value": "argmax_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask, prediction_map)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "argmax_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.max(-1)[1]",
                            "Subscript"
                        ],
                        [
                            "torch.gather(prediction_map, 1, argmax_predictions)",
                            "Call"
                        ],
                        [
                            "argmax_predictions.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_135": {
                "variable": {
                    "value": "gold_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unwrap_to_tensors(predictions, gold_labels, mask, prediction_map)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "gold_labels.long()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/metrics/unigram_recall.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/momentum_schedulers/inverted_triangular.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/momentum_schedulers/momentum_scheduler.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/moving_average.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/optimizers.py": {
        "torch": {
            "zeros_like_227": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_229": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/scheduler.py": {
        "torch": {}
    },
    "allennlp/allennlp/training/tensorboard_writer.py": {
        "torch": {
            "prod_106": {
                "input": {
                    "value": "torch.tensor(grad_data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "grad_data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/trainer.py": {
        "torch": {
            "isnan_322": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dict['loss']",
                            "Subscript"
                        ],
                        [
                            "loss + self.model.get_regularization_penalty()",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.batch_loss(batch_group, for_training=True, optimizer=self.optimizer)",
                            "Call"
                        ],
                        [
                            "self.batch_loss(batch_group, for_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_347": {
                "variable": {
                    "value": "update_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_updates[name].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_348": {
                "variable": {
                    "value": "param_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/allennlp/training/util.py": {
        "torch": {
            "gather_339": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[output['loss'].unsqueeze(0) for output in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "used_device_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/scripts/write_srl_predictions_to_conll_format.py": {
        "torch": {
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/tutorials/tagger/basic_allennlp.py": {
        "torch": {
            "SGD_285": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('labels')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_269": {
                "*args": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_336": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_350": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/tutorials/tagger/basic_pytorch.py": {
        "torch": {
            "NLLLoss_98": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_172": {
                "variable": {
                    "value": "tag_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(sentence_in)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(tag_space, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[to_ix[w] for w in seq]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_72": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_76": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tagset_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_94": {
                "variable": {
                    "value": "tag_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden2tag(lstm_out.view(len(sentence), -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_118": {
                "mode": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(training_data, True), (validation_data, False)]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "allennlp/tutorials/tagger/config_allennlp.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('labels')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "imojie/models/copy_seq2seq_bahdanu.py": {
        "torch": {
            "Linear_177": {
                "variable": {
                    "value": "self._input_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._target_embedding_dim + self.encoder_output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self._output_generation_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._target_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self._output_copying_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_539": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(p).unsqueeze(1) for p in probs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_722": {
                "variable": {
                    "value": "copy_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "copy_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_copying_layer(trimmed_encoder_outputs)",
                            "Call"
                        ],
                        [
                            "torch.tanh(copy_projection)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_764": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores_mask, copy_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_766": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_792": {
                "variable": {
                    "value": "combined_gen_and_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_log_probs, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_871": {
                "variable": {
                    "value": "log_likelihoods",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_log_likelihoods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1071": {
                "variable": {
                    "value": "modified_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "modified_log_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1144": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1148": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generation_scores.new_full(generation_scores.size(), 1.0), copy_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GRUCell_166": {
                "variable": {
                    "value": "self._coverage_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.decoder_output_dim + self.encoder_output_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "coverage_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_output_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LSTM_184": {
                "variable": {
                    "value": "self._decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self._decoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "data": {
                    "value": "padded_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "end_column",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self._end_index] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_450": {
                "variable": {
                    "value": "end_column",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_452": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prediction, end_column)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded_input, attentive_read, selective_read)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TransformerDecoderLayer_186": {
                "variable": {
                    "value": "decoder_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "nhead": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TransformerDecoder_187": {
                "variable": {
                    "value": "self._decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "decoder_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.TransformerDecoderLayer(d_model=256, nhead=4)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_477": {
                "tensors": {
                    "value": "predictions_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_477": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_661": {
                "variable": {
                    "value": "enc_hidden_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state['encoder_outputs'], state['m_t'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_669": {
                "variable": {
                    "value": "comb_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(exp_dec_hidden, state['encoder_outputs'], attentive_weights.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1052": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(copy_log_probs_slice.unsqueeze(-1), future_copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_539": {
                "data": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_539": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_705": {
                "variable": {
                    "value": "state[inputs_so_far]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state['inputs_so_far'], embedded_input.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1036": {
                "tensors": {
                    "value": "(selected_generation_log_probs, copy_log_probs_to_add)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/convert_gpt2_checkpoint_to_pytorch.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/convert_openai_checkpoint_to_pytorch.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/convert_roberta_checkpoint_to_pytorch.py": {
        "torch": {
            "zeros_like_69": {
                "variable": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_147": {
                "variable": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "our_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "their_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roberta.model.classification_heads['mnli'](roberta.extract_features(input_ids))",
                            "Call"
                        ],
                        [
                            "roberta.model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/convert_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/convert_transfo_xl_checkpoint_to_pytorch.py": {
        "torch": {
            "save_60": {
                "obj": {
                    "value": "corpus_vocab_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corpus.vocab.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_vocab_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + VOCAB_FILES_NAMES['pretrained_vocab_file']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "corpus_dict_no_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corpus.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_dataset_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + CORPUS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_87": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/convert_xlm_checkpoint_to_pytorch.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "chkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "xlm_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xlm_checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chkpt['model']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/convert_xlnet_checkpoint_to_pytorch.py": {
        "torch": {
            "save_69": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/file_utils.py": {
        "torch": {}
    },
    "pytorch_transformers/pytorch_transformers/modeling_auto.py": {
        "torch": {}
    },
    "pytorch_transformers/pytorch_transformers/modeling_openai.py": {
        "torch": {
            "from_numpy_75": {
                "variable": {
                    "value": "model.tokens_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "model.positions_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(names, init_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_250": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_251": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_256": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "index_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_270": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_328": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_454": {
                "variable": {
                    "value": "self.tokens_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_455": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_456": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_457": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_680": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_124": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_478": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "input_ids.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_594": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_704": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_711": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_120": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_241": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_278": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_260": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_241": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_120": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/modeling_roberta.py": {
        "torch": {
            "Linear_249": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_253": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_339": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_340": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_346": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_62": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_237": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_253": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_322": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_325": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/modeling_transfo_xl_utilities.py": {
        "torch": {
            "cat_314": {
                "variable": {
                    "value": "all_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels.view(-1), neg_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits[:, :, None], sample_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_53": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_80": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_83": {
                "variable": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_84": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_145": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_273": {
                "variable": {
                    "value": "log_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "range_max + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_294": {
                "variable": {
                    "value": "neg_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * n_sample",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_294": {
                "variable": {
                    "value": "neg_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_214": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_325": {
                "equation": {
                    "value": "ijk,ijk->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[true_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_327": {
                "equation": {
                    "value": "lk,ijk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[sample_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "d_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_token",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "weight_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "bias_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_179": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "weight_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "bias_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_252": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_117": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/modeling_utils.py": {
        "torch": {
            "Linear_871": {
                "variable": {
                    "value": "new_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_286": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_embeddings.weight.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_554": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_556": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_557": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_561": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_591": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_592": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_593": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_631": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_632": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_633": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_805": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_813": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_817": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_821": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_302": {
                "variable": {
                    "value": "first_module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "second_module.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_359": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_477": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(archive_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_735": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_754": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_756": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_758": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_764": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_766": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_770": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_811": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_815": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_819": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_823": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_557": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_616": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_664": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_743": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_840": {
                "variable": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/modeling_xlm.py": {
        "torch": {
            "arange_235": {
                "variable": {
                    "value": "alen",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "slen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_273": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_331": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_335": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_336": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_342": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_356": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_364": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_521": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_526": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_527": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_530": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_531": {
                "variable": {
                    "value": "self.layer_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_532": {
                "variable": {
                    "value": "self.ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_533": {
                "variable": {
                    "value": "self.layer_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_628": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(position_ids).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_525": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_585": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "slen",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.new((slen,)).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=position_ids).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "position_ids[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_585": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_643": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_690": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_692": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "config.asm_cutoffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "div_value": {
                    "value": "config.asm_div_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "head_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "erf_223": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_708": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_words)",
                            "Call"
                        ],
                        [
                            "self.proj.log_prob(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_837": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_840": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_540": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_545": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_277": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/optimization.py": {
        "torch": {
            "zeros_like_155": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_transformers/pytorch_transformers/tokenization_transfo_xl.py": {
        "torch": {
            "load_466": {
                "variable": {
                    "value": "corpus_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_corpus_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(corpus_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_546": {
                "variable": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_pickle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_92": {
                "variable": {
                    "value": "vocab_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_143": {
                "obj": {
                    "value": "self.__dict__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(vocab_path, VOCAB_FILES_NAMES['pretrained_vocab_file'])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "vocab_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_181": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_471": {
                "variable": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_473": {
                "variable": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_475": {
                "variable": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_568": {
                "obj": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn_pickle)",
                            "Call"
                        ],
                        [
                            "pickle.load(fp)",
                            "Call"
                        ],
                        [
                            "TransfoXLCorpus(datadir, dataset, **kwargs)",
                            "Call"
                        ],
                        [
                            "cls(*inputs, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/tensorboard.py": {
        "torch": {
            "SummaryWriter_25": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.inp_fp + '.logs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/neuron_view.py": {
        "torch": {
            "tensor_138": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.convert_tokens_to_ids(tokens_a + (tokens_b if tokens_b else []))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_138": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/tests/test_attention.py": {
        "torch": {
            "tensor_116": {
                "variable": {
                    "value": "attn_all_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_all[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_120": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "len(tokens)",
                            "Call"
                        ],
                        [
                            "len(tokens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "attn_aa_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_aa[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "attn_ab_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_ab[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "attn_ba_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_ba[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "attn_bb_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_bb[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "top_half",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attn_aa_layer, attn_ab_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "bottom_half",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attn_ba_layer, attn_bb_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "whole",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(top_half, bottom_half)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "attn_all_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_all[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_151": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "len(tokens)",
                            "Call"
                        ],
                        [
                            "len(tokens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "attn_all_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_all[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_52": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "len(tokens)",
                            "Call"
                        ],
                        [
                            "len(tokens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "attn_aa_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_aa[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "attn_ab_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_ab[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "attn_ba_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_ba[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "attn_bb_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_bb[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "top_half",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attn_aa_layer, attn_ab_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "bottom_half",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attn_ba_layer, attn_bb_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "whole",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(top_half, bottom_half)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "attn_all_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attn_all[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_84": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "attn_all_layer.size()",
                            "Call"
                        ],
                        [
                            "len(tokens)",
                            "Call"
                        ],
                        [
                            "len(tokens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_121": {
                "input": {
                    "value": "sum_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "sum(att_matrix[i])",
                            "Call"
                        ],
                        [
                            "sum(att_matrix[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_131": {
                "input": {
                    "value": "whole",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((top_half, bottom_half), dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat((top_half, bottom_half), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn_all_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(attn_all[layer])",
                            "Call"
                        ],
                        [
                            "torch.tensor(attn_all[layer])",
                            "Call"
                        ],
                        [
                            "torch.tensor(attn_all[layer])",
                            "Call"
                        ],
                        [
                            "torch.tensor(attn_all[layer])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_152": {
                "input": {
                    "value": "sum_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "sum(att_matrix[i])",
                            "Call"
                        ],
                        [
                            "sum(att_matrix[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_53": {
                "input": {
                    "value": "sum_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "sum(att_matrix[i])",
                            "Call"
                        ],
                        [
                            "sum(att_matrix[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_63": {
                "input": {
                    "value": "whole",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((top_half, bottom_half), dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat((top_half, bottom_half), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn_all_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(attn_all[layer])",
                            "Call"
                        ],
                        [
                            "torch.tensor(attn_all[layer])",
                            "Call"
                        ],
                        [
                            "torch.tensor(attn_all[layer])",
                            "Call"
                        ],
                        [
                            "torch.tensor(attn_all[layer])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_85": {
                "input": {
                    "value": "sum_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_all_layer.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "sum(att_matrix[i])",
                            "Call"
                        ],
                        [
                            "sum(att_matrix[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_heads, seq_len, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/file_utils.py": {
        "torch": {}
    },
    "utils/viz/bertviz/transformers_neuron_view/modeling_openai.py": {
        "torch": {
            "from_numpy_75": {
                "variable": {
                    "value": "model.tokens_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "model.positions_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(names, init_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_250": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_251": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_256": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "index_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_270": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_328": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_454": {
                "variable": {
                    "value": "self.tokens_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_455": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_456": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_457": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_680": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_124": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_478": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "input_ids.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_594": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_704": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_711": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_120": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_241": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_278": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_260": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_241": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_120": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/modeling_roberta.py": {
        "torch": {
            "Linear_249": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_253": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_339": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_340": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_346": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_62": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_237": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_253": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_322": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_325": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/modeling_transfo_xl_utilities.py": {
        "torch": {
            "cat_314": {
                "variable": {
                    "value": "all_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels.view(-1), neg_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits[:, :, None], sample_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_53": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_80": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_83": {
                "variable": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_84": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_145": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_273": {
                "variable": {
                    "value": "log_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "range_max + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_294": {
                "variable": {
                    "value": "neg_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * n_sample",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_294": {
                "variable": {
                    "value": "neg_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_214": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_325": {
                "equation": {
                    "value": "ijk,ijk->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[true_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_327": {
                "equation": {
                    "value": "lk,ijk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[sample_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "d_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_token",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "weight_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "bias_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_179": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "weight_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "bias_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_252": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_117": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/modeling_utils.py": {
        "torch": {
            "Linear_876": {
                "variable": {
                    "value": "new_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_290": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_embeddings.weight.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_559": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_561": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_562": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_566": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_575": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_596": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_597": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_598": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_599": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_636": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_637": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_638": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_810": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_818": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_822": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_826": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_306": {
                "variable": {
                    "value": "first_module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "second_module.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_364": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_482": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(archive_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_740": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_759": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_761": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_763": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_769": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_771": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_775": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_816": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_820": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_824": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_828": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_562": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_621": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_669": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_748": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_845": {
                "variable": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/modeling_xlm.py": {
        "torch": {
            "arange_235": {
                "variable": {
                    "value": "alen",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "slen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_273": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_331": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_335": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_336": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_342": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_356": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_364": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_522": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_527": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_528": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_531": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_532": {
                "variable": {
                    "value": "self.layer_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_533": {
                "variable": {
                    "value": "self.ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_534": {
                "variable": {
                    "value": "self.layer_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_629": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(position_ids).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_526": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_586": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "slen",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.new((slen,)).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=position_ids).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "position_ids[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_586": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_644": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_691": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_693": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "config.asm_cutoffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "div_value": {
                    "value": "config.asm_div_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "head_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "erf_223": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_709": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_words)",
                            "Call"
                        ],
                        [
                            "self.proj.log_prob(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_838": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_841": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_541": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_546": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_277": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz/bertviz/transformers_neuron_view/tokenization_transfo_xl.py": {
        "torch": {
            "load_466": {
                "variable": {
                    "value": "corpus_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_corpus_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(corpus_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_546": {
                "variable": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_pickle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_92": {
                "variable": {
                    "value": "vocab_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_143": {
                "obj": {
                    "value": "self.__dict__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(vocab_path, VOCAB_FILES_NAMES['pretrained_vocab_file'])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "vocab_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_181": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_471": {
                "variable": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_473": {
                "variable": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_475": {
                "variable": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_568": {
                "obj": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn_pickle)",
                            "Call"
                        ],
                        [
                            "pickle.load(fp)",
                            "Call"
                        ],
                        [
                            "TransfoXLCorpus(datadir, dataset, **kwargs)",
                            "Call"
                        ],
                        [
                            "cls(*inputs, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/viz/bertviz/util.py": {
        "torch": {
            "stack_9": {
                "tensors": {
                    "value": "squeezed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}