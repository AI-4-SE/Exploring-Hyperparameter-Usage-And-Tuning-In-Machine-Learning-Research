{
    "forked/SPADE/util/visualizer.py": {
        "tensorflow": {
            "FileWriter_28": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets.py": {
        "torch": {}
    },
    "data/kernels.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "kernels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(kernels, axis=0)",
                            "Call"
                        ],
                        [
                            "th.from_numpy(kernels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/wrappers.py": {
        "torch": {}
    },
    "degradations/base.py": {
        "torch": {
            "randn_like_201": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_229": {
                "variable": {
                    "value": "degraded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degraded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.degrade(images)",
                            "Call"
                        ],
                        [
                            "self._add_noise(degraded, self.noise_std)",
                            "Call"
                        ],
                        [
                            "th.clamp(degraded, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "vjp_64": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent_images",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_241": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "degradations/cnn.py": {
        "torch": {
            "stack_34": {
                "variable": {
                    "value": "images_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(images_batch, dim=0).to(device=labels.device).permute(0, 3, 1, 2).contiguous().float()",
                            "Call"
                        ],
                        [
                            "images_batch / 255",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_34": {
                "variable": {
                    "value": "images_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_17": {
                "f": {
                    "value": "pretrained/encoder_epoch_20.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_18": {
                "f": {
                    "value": "pretrained/decoder_epoch_20.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "colorEncode(label.detach().cpu().numpy(), self.colors, mode='RGB')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "degradations/linear.py": {
        "torch": {
            "conv2d_95": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images.view((images.shape[0], *images.shape[-3:])).transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "th.flip(kernels.view((kernels.shape[0], *kernels.shape[-3:])), dims=(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "kernels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_109": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images.view((images.shape[0], *images.shape[-3:])).transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "th.flip(kernels.view((kernels.shape[0], *kernels.shape[-3:])), dims=(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "kernels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "variable": {
                    "value": "upscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*images.shape[:2]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "*hw",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fold_233": {
                "variable": {
                    "value": "upscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upscaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.zeros(*images.shape[:2], *hw, dtype=images.dtype, device=images.device)",
                            "Call"
                        ],
                        [
                            "upscaled.unfold(-2, self.scale_factor, self.scale_factor).unfold(-2, self.scale_factor, self.scale_factor)",
                            "Call"
                        ],
                        [
                            "upscaled.permute(0, 1, 4, 5, 2, 3).flatten(start_dim=-2).flatten(start_dim=1, end_dim=-2)",
                            "Call"
                        ],
                        [
                            "F.fold(upscaled, hw, self.scale_factor, stride=self.scale_factor)",
                            "Call"
                        ],
                        [
                            "th.zeros(*degraded_images.shape[:2], *hw, dtype=degraded_images.dtype, device=degraded_images.device)",
                            "Call"
                        ],
                        [
                            "upscaled.unfold(-2, self.scale_factor, self.scale_factor).unfold(-2, self.scale_factor, self.scale_factor)",
                            "Call"
                        ],
                        [
                            "upscaled.permute(0, 1, 4, 5, 2, 3).flatten(start_dim=-2).flatten(start_dim=1, end_dim=-2)",
                            "Call"
                        ],
                        [
                            "F.fold(upscaled, hw, self.scale_factor, stride=self.scale_factor)",
                            "Call"
                        ],
                        [
                            "self._valid_convolve_transposed(upscaled, self.kernels)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "hw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i * self.scale_factor for i in images.shape[2:]]",
                            "ListComp"
                        ],
                        [
                            "[i * self.scale_factor for i in degraded_images.shape[2:]]",
                            "ListComp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "upscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*degraded_images.shape[:2]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "*hw",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "degraded_images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "degraded_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fold_261": {
                "variable": {
                    "value": "upscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upscaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.zeros(*images.shape[:2], *hw, dtype=images.dtype, device=images.device)",
                            "Call"
                        ],
                        [
                            "upscaled.unfold(-2, self.scale_factor, self.scale_factor).unfold(-2, self.scale_factor, self.scale_factor)",
                            "Call"
                        ],
                        [
                            "upscaled.permute(0, 1, 4, 5, 2, 3).flatten(start_dim=-2).flatten(start_dim=1, end_dim=-2)",
                            "Call"
                        ],
                        [
                            "F.fold(upscaled, hw, self.scale_factor, stride=self.scale_factor)",
                            "Call"
                        ],
                        [
                            "th.zeros(*degraded_images.shape[:2], *hw, dtype=degraded_images.dtype, device=degraded_images.device)",
                            "Call"
                        ],
                        [
                            "upscaled.unfold(-2, self.scale_factor, self.scale_factor).unfold(-2, self.scale_factor, self.scale_factor)",
                            "Call"
                        ],
                        [
                            "upscaled.permute(0, 1, 4, 5, 2, 3).flatten(start_dim=-2).flatten(start_dim=1, end_dim=-2)",
                            "Call"
                        ],
                        [
                            "F.fold(upscaled, hw, self.scale_factor, stride=self.scale_factor)",
                            "Call"
                        ],
                        [
                            "self._valid_convolve_transposed(upscaled, self.kernels)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "hw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i * self.scale_factor for i in images.shape[2:]]",
                            "ListComp"
                        ],
                        [
                            "[i * self.scale_factor for i in degraded_images.shape[2:]]",
                            "ListComp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_96": {
                "input": {
                    "value": "kernels.view((kernels.shape[0], *kernels.shape[-3:]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_110": {
                "input": {
                    "value": "kernels.view((kernels.shape[0], *kernels.shape[-3:]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "forked/SPADE/data/__init__.py": {
        "torch": {}
    },
    "forked/SPADE/data/base_dataset.py": {
        "torch": {}
    },
    "forked/SPADE/data/image_folder.py": {
        "torch": {}
    },
    "forked/SPADE/models/__init__.py": {
        "torch": {}
    },
    "forked/SPADE/models/networks/__init__.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "forked/SPADE/models/networks/architecture.py": {
        "torch": {
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_36": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_37": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_39": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_79": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_82": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "forked/SPADE/models/networks/base_network.py": {
        "torch": {}
    },
    "forked/SPADE/models/networks/discriminator.py": {
        "torch": {
            "avg_pool2d_47": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_D_input_nc(opt)",
                            "Call"
                        ],
                        [
                            "opt.label_nc + opt.output_nc",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_85": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*sequence[n]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if n == opt.n_layers_D - 1 else 2",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "forked/SPADE/models/networks/encoder.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(256, 256), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer3(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer4(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer5(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer6(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.actvn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "ndf * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "forked/SPADE/models/networks/generator.py": {
        "torch": {
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_58": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_82": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_115": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_143": {
                "padding": {
                    "value": "opt.resnet_initial_kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_175": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "nc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.output_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.label_nc + (1 if opt.contain_dontcare_label else 0) + (0 if opt.no_instance else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.resnet_initial_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "opt.ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_168": {
                "in_channels": {
                    "value": "nc_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "forked/SPADE/models/networks/loss.py": {
        "torch": {
            "L1Loss_106": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_94": {
                "variable": {
                    "value": "new_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_64": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_68": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_71": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_72": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "forked/SPADE/models/networks/normalization.py": {
        "torch": {
            "Sequential_88": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(label_nc, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_101": {
                "variable": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_26": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spectral_norm(layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_75": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "label_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_43": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "forked/SPADE/models/pix2pix_model.py": {
        "torch": {
            "Adam_75": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_246": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_247": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_31": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "input_semantics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "forked/SPADE/options/base_options.py": {
        "torch": {
            "set_device_171": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "forked/SPADE/trainers/pix2pix_trainer.py": {
        "torch": {
            "DataParallel_20": {
                "variable": {
                    "value": "self.pix2pix_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.pix2pix_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "forked/SPADE/util/util.py": {
        "torch": {
            "load_207": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/dataset.py": {
        "torch": {
            "zeros_146": {
                "variable": {
                    "value": "batch_images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_per_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max(batch_heights)",
                            "Call"
                        ],
                        [
                            "int(self.round2nearest_multiple(batch_height, self.padding_constant))",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "batch_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max(batch_widths)",
                            "Call"
                        ],
                        [
                            "int(self.round2nearest_multiple(batch_width, self.padding_constant))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "batch_segms",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_per_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_height // self.segm_downsampling_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch_width // self.segm_downsampling_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "batch_segms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(segm)).long() - 1",
                            "BinOp"
                        ],
                        [
                            "Image.open(segm_path)",
                            "Call"
                        ],
                        [
                            "segm.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "imresize(segm, (batch_widths[i], batch_heights[i]), interp='nearest')",
                            "Call"
                        ],
                        [
                            "imresize(segm_rounded, (segm_rounded.size[0] // self.segm_downsampling_rate, segm_rounded.size[1] // self.segm_downsampling_rate), interp='nearest')",
                            "Call"
                        ],
                        [
                            "self.segm_transform(segm)",
                            "Call"
                        ],
                        [
                            "Image.open(segm_path)",
                            "Call"
                        ],
                        [
                            "self.segm_transform(segm)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_240": {
                "variable": {
                    "value": "img_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imresize(img, (target_width, target_height), interp='bilinear')",
                            "Call"
                        ],
                        [
                            "self.img_transform(img_resized)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_resized, 0)",
                            "Call"
                        ],
                        [
                            "imresize(img, (target_width, target_height), interp='bilinear')",
                            "Call"
                        ],
                        [
                            "self.img_transform(img_resized)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_resized, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_286": {
                "variable": {
                    "value": "img_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imresize(img, (target_width, target_height), interp='bilinear')",
                            "Call"
                        ],
                        [
                            "self.img_transform(img_resized)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_resized, 0)",
                            "Call"
                        ],
                        [
                            "imresize(img, (target_width, target_height), interp='bilinear')",
                            "Call"
                        ],
                        [
                            "self.img_transform(img_resized)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_resized, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "np.array(segm)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/lib/nn/modules/batchnorm.py": {
        "torch": {
            "zeros_50": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_59": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/lib/nn/modules/replicate.py": {
        "torch": {}
    },
    "forked/mit_semseg/lib/nn/modules/tests/test_numeric_batchnorm.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "variable": {
                    "value": "a_std2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "handy_var(a_var2, unbias=False).clamp(min=1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/lib/nn/modules/tests/test_sync_batchnorm.py": {
        "torch": {
            "BatchNorm1d_68": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_71": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_77": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_87": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_97": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_107": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/lib/nn/modules/unittest.py": {
        "torch": {}
    },
    "forked/mit_semseg/lib/nn/parallel/data_parallel.py": {
        "torch": {
            "is_tensor_14": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Stream_111": {
                "variable": {
                    "value": "_streams[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_34": {
                "obj": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "current_stream_91": {
                "variable": {
                    "value": "main_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_76": {
                "type": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/lib/utils/data/dataloader.py": {
        "torch": {
            "set_num_threads_47": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_109": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_146": {
                "obj": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_69": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_117": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_224": {
                "variable": {
                    "value": "maybe_device_id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "ndarray": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/lib/utils/data/dataset.py": {
        "torch": {
            "randperm_117": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sum(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/lib/utils/data/distributed.py": {
        "torch": {
            "Generator_39": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_41": {
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "forked/mit_semseg/lib/utils/data/sampler.py": {
        "torch": {
            "randperm_50": {
                "n": {
                    "value": "len(self.data_source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_90": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "self.replacement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_67": {
                "n": {
                    "value": "len(self.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/lib/utils/th.py": {
        "torch": {
            "is_tensor_31": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(obj)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_25": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(obj)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "forked/mit_semseg/models/hrnet.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_273": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_427": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_429": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_431": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_434": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0], x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_inchannels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_174": {
                "modules": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_220": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_343": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_348": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_360": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_390": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "self.num_inchannels[branch_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_218": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_349": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_341": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_inchannels[i], 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "*args": {
                    "value": "nn.Conv2d(num_channels_pre_layer[i], num_channels_cur_layer[i], 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "*args": {
                    "value": "nn.Conv2d(inchannels, outchannels, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_inchannels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_241": {
                "input": {
                    "value": "self.fuse_layers[i][j](x[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(height_output, width_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_319": {
                "in_channels": {
                    "value": "num_channels_pre_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_327": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_340": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/models/mobilenet.py": {
        "torch": {
            "Sequential_23": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/models/models.py": {
        "torch": {
            "max_13": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(self.encoder(image, return_feature_maps=True), segSize=image.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True), segSize=segSize)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_15": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(label >= 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_347": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_348": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_362": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_384": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_416": {
                "variable": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_418": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_437": {
                "variable": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_465": {
                "variable": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_468": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_476": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_477": {
                "variable": {
                    "value": "self.dropout_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_489": {
                "variable": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_498": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_531": {
                "variable": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_532": {
                "variable": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_543": {
                "variable": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_550": {
                "variable": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_552": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(len(fpn_inplanes) * fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_567": {
                "variable": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_589": {
                "variable": {
                    "value": "fusion_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_598": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_357": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_359": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_392": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_394": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_396": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_442": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_444": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_446": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_494": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_496": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_575": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_593": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_595": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_419": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_422": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_423": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_424": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_469": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_472": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_473": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_474": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_554": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_120": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_167": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_433": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_459": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_485": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_525": {
                "output_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_526": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_538": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_547": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_585": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_411": {
                "output_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_412": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_414": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_460": {
                "output_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_461": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_463": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_527": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_529": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_539": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_541": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_563": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/models/resnet.py": {
        "torch": {
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_115": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/models/resnext.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_82": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "forked/mit_semseg/models/utils.py": {
        "torch": {
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_21": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEVICE",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "functions/base.py": {
        "torch": {}
    },
    "functions/priors.py": {
        "torch": {
            "conv2d_67": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images.view((images.shape[0], *images.shape[-3:])).transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "th.flip(kernels.view((kernels.shape[0], *kernels.shape[-3:])), dims=(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "kernels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_27": {
                "input": {
                    "value": "th.norm(input_tensor.flatten(start_dim=1), p=self.p)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "input_tensor.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_27": {
                "input": {
                    "value": "input_tensor.flatten(start_dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_68": {
                "input": {
                    "value": "kernels.view((kernels.shape[0], *kernels.shape[-3:]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "functions/projections.py": {
        "torch": {
            "clamp_40": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "self.min_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modules/srresnet.py": {
        "torch": {
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.conv_hr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_132": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.upconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_feat * self.upscale * self.upscale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_118": {
                "variable": {
                    "value": "self.pixel_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "self.upscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.upconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_feat * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.upconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_feat * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_122": {
                "variable": {
                    "value": "self.pixel_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.upconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.upconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/base.py": {
        "torch": {
            "Parameter_119": {
                "variable": {
                    "value": "param_images",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/learnable.py": {
        "torch": {
            "cat_66": {
                "variable": {
                    "value": "network_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(latent_images, input_gradients)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "network_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(network_input, hidden_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "latent_images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_state_num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "latent_images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "latent_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "(network_input, hidden_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/nonlearnable.py": {
        "torch": {
            "is_grad_enabled_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_degradations.py": {
        "torch": {
            "rand_33": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "channels_number",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "spatial_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "spatial_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_65": {
                "variable": {
                    "value": "vec_a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kwargs['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "kwargs['channels_number']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kwargs['spatial_dims'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "kwargs['spatial_dims'][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_68": {
                "variable": {
                    "value": "vec_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Avec_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.degradation_class.linear_transform(vec_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_111": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kwargs['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "kwargs['channels_number']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kwargs['spatial_dims'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "kwargs['spatial_dims'][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "convolved_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convolved_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(convolved_true, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradcheck_46": {
                "func": {
                    "value": "self.degradation_class.likelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(degraded, latent)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "all_73": {
                "input": {
                    "value": "th.isclose(prod_1, prod_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_103": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "all_123": {
                "input": {
                    "value": "th.isclose(convolved_true, convolved_th)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_142": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isclose_73": {
                "input": {
                    "value": "prod_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prod(Avec_a, vec_b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prod_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prod(vec_a, A_Tvec_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "isclose_123": {
                "input": {
                    "value": "convolved_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(convolved_true, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "convolved_th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.degradation_class._valid_convolve(image, self.degradation_class.kernels)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_121": {
                "tensors": {
                    "value": "colored_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "ndarray": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolve2d(image[batch, channel, :, :].numpy(), kernel[batch, 0, :, :].numpy(), mode='valid')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}