{
    "MMA.py": {
        "torch": {
            "normalize_18": {
                "variable": {
                    "value": "weight_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.view(weight.size(0), -1)",
                            "Call"
                        ],
                        [
                            "weight.reshape((num_filter, -1))",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_19": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(weight, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "mx.symbol.L2Normalization(weight, mode='instance')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight_.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_25": {
                "input": {
                    "value": "cosine.max(dim=1)[0].clamp(-0.99999, 0.99999)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_22": {
                "input": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(weight_, weight_.t())",
                            "Call"
                        ],
                        [
                            "cosine - 2.0 * torch.diag(torch.diag(cosine))",
                            "BinOp"
                        ],
                        [
                            "mx.symbol.linalg.syrk(weight_, alpha=1.0, transpose=False) - 2.0 * mx.symbol.eye(num_filter)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}