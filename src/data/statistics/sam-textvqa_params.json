{
    "evaluator.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_36": {
                "variable": {
                    "value": "self.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_179": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sam/beam_search.py": {
        "torch": {
            "log_85": {
                "variable": {
                    "value": "current_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(batch_dict['scores'][:, t, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_142": {
                "variable": {
                    "value": "self.completed_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_dict['train_prev_inds'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "variable": {
                    "value": "captions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "variable": {
                    "value": "captions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_40": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_interleave_40": {
                "input": {
                    "value": "self._decode_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "input": {
                    "value": "batch_dict['scores'][:, t, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_99": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self._decode_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_98": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sam/datasets/metrics.py": {
        "torch": {
            "tensor_65": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.tensor(accuracy).cuda()",
                            "Call"
                        ],
                        [
                            "sum(pred_scores) / len(pred_scores)",
                            "BinOp"
                        ],
                        [
                            "sum(pred_scores) / len(pred_scores)",
                            "BinOp"
                        ],
                        [
                            "sum(pred_scores) / len(pred_scores)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "sam/datasets/processors.py": {
        "torch": {
            "tensor_92": {
                "variable": {
                    "value": "token_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(len(tokens), max_length)",
                            "Call"
                        ],
                        [
                            "torch.tensor(token_length, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_206": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.max_length, self.model.get_dimension())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_313": {
                "variable": {
                    "value": "answers_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.DEFAULT_NUM_ANSWERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_381": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.get_vocab_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_423": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.max_length, phoc_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_483": {
                "variable": {
                    "value": "token_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_487": {
                "variable": {
                    "value": "token_inds[:len(indices)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._map_strings_to_indices(item['tokens'])",
                            "Call"
                        ],
                        [
                            "self._map_strings_to_indices(item['tokens'])",
                            "Call"
                        ],
                        [
                            "self.bert_tokenizer.encode(item['question'], add_special_tokens=True)",
                            "Call"
                        ],
                        [
                            "indices[:self.max_length]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_488": {
                "variable": {
                    "value": "token_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_490": {
                "variable": {
                    "value": "tokens_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_611": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_copy_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.get_vocab_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_650": {
                "variable": {
                    "value": "train_prev_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_copy_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_652": {
                "variable": {
                    "value": "train_loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_copy_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_653": {
                "variable": {
                    "value": "train_acc_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_copy_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_213": {
                "variable": {
                    "value": "output[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.stov[token]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_430": {
                "variable": {
                    "value": "output[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "build_phoc(token)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_457": {
                "ndarray": {
                    "value": "final_blob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((self.max_length,) + blob.shape[1:], blob.dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sam/datasets/stvqa_dataset.py": {
        "torch": {}
    },
    "sam/datasets/textvqa_dataset.py": {
        "torch": {}
    },
    "sam/datasets/textvqa_vocab.py": {
        "torch": {}
    },
    "sam/sa_m4c.py": {
        "torch": {
            "arange_954": {
                "variable": {
                    "value": "arange",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_954": {
                "variable": {
                    "value": "arange",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_963": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_inds.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_inds.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_981": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inds_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_offsets + inds",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "x_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size * length, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.linear_obj_feat_to_mmt_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mmt_config.obj_feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.linear_obj_bbox_to_mmt_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "variable": {
                    "value": "self.obj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.mmt_config.obj_drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.linear_ocr_feat_to_mmt_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mmt_config.ocr_feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.linear_ocr_bbox_to_mmt_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_150": {
                "variable": {
                    "value": "self.ocr_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.mmt_config.ocr_drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(registry.answer_vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.spatial_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fixed_scores, dynamic_ocr_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_430": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_431": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_433": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_563": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.query(query_inputs)",
                            "Call"
                        ],
                        [
                            "query_layer.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_594": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "attention_probs * entity_probs_mask",
                            "BinOp"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_625": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_720": {
                "variable": {
                    "value": "self.normal_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(self.num_normal_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_723": {
                "variable": {
                    "value": "self.spatial_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SpatialBertLayer(config) for _ in range(self.num_spatial_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_726": {
                "variable": {
                    "value": "self.implicit_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SpatialBertLayer(config, True) for _ in range(self.num_implicit_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_793": {
                "variable": {
                    "value": "dec_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dec_emb.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "dec_emb.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "dec_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_796": {
                "variable": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_dict['text_bert_emb'], batch_dict['obj_mmt_in'], batch_dict['ocr_mmt_in'], dec_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_805": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_dict['question_mask'], batch_dict['pad_obj_mask'], batch_dict['pad_ocr_mask'], dec_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_875": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "query_key_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_876": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "query_key_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_891": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.query(query_inputs)",
                            "Call"
                        ],
                        [
                            "query_layer.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_910": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "MAX_DEC_LENGTH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_911": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "MAX_TYPE_NUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_917": {
                "variable": {
                    "value": "self.emb_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_933": {
                "variable": {
                    "value": "ans_ocr_emb_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ans_emb, ocr_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_937": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_inds.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ocr_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_1034": {
                "variable": {
                    "value": "self.logit_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, hid_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.text_bert_out_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "TEXT_BERT_HIDDEN_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.mmt_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_103": {
                "variable": {
                    "value": "self.text_bert_out_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_209": {
                "variable": {
                    "value": "obj_fc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_fc7",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.obj_faster_rcnn_fc7(batch_dict['pad_obj_features'])",
                            "Call"
                        ],
                        [
                            "F.normalize(obj_fc7, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_225": {
                "variable": {
                    "value": "ocr_fasttext",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_fasttext",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_dict['ocr_fasttext']",
                            "Subscript"
                        ],
                        [
                            "F.normalize(ocr_fasttext, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_231": {
                "variable": {
                    "value": "ocr_phoc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_phoc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_dict['ocr_phoc']",
                            "Subscript"
                        ],
                        [
                            "F.normalize(ocr_phoc, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_238": {
                "variable": {
                    "value": "ocr_fc7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ocr_fc7",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ocr_faster_rcnn_fc7(ocr_fc6)",
                            "Call"
                        ],
                        [
                            "F.normalize(ocr_fc7, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "ocr_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ocr_fasttext, ocr_phoc, ocr_fc7, ocr_order_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "ocr_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ocr_fc7, ocr_order_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_288": {
                "variable": {
                    "value": "batch_dict[train_prev_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_dict['train_prev_inds']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_437": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_443": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "spatial_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[spatial_attention_mask, implicit_attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_568": {
                "variable": {
                    "value": "combined_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_dict['question_mask']",
                            "Subscript"
                        ],
                        [
                            "torch.cat([batch_dict['question_mask'], batch_dict['pad_obj_mask'], batch_dict['pad_ocr_mask'], dec_mask], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_977": {
                "start": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nums.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "prev_inds.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "inds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_581": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "erf_991": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_1020": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1021": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1035": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1038": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unique_569": {
                "input": {
                    "value": "combined_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.min(attention_mask, spatial_attention_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_634": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1020": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_1021": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_1027": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sam/spatial_utils.py": {
        "torch": {
            "zeros_like_48": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "sam/task_utils.py": {
        "torch": {
            "clip_grad_norm__34": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_l2_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LambdaLR_56": {
                "variable": {
                    "value": "warmup_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Adam(optimizer_grouped_parameters, lr=base_lr)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_update",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "one_hots",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*labels.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "RandomSampler_155": {
                "variable": {
                    "value": "random_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_instance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ConcatDataset(datasets)",
                            "Call"
                        ],
                        [
                            "datasets[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_156": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_instance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ConcatDataset(datasets)",
                            "Call"
                        ],
                        [
                            "datasets[0]",
                            "Subscript"
                        ]
                    ]
                },
                "sampler": {
                    "value": "random_sampler if split == 'train' else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "task_cfg['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "task_cfg['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "self.one",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_26": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "one_hots * labels",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_28": {
                "variable": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(loss_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_151": {
                "variable": {
                    "value": "dataset_instance",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "datasets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_28": {
                "input": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(scores, targets, reduction='none')",
                            "Call"
                        ],
                        [
                            "losses * loss_mask.unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_92": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "sam/textvqa_encoders.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bias.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "i3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lc(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/objects_to_byte_tensor.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "byte_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_86": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_87": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "task_cfg['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataParallel_112": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SAM4C(mmt_config, text_bert_config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_108": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "{'model_state_dict': model_to_save.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'warmup_scheduler_state_dict': warmup_scheduler.state_dict(), 'global_step': global_step, 'current_val_score': curr_val_score, 'epoch_id': epoch_id}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(save_path, 'best_model.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}