{
    "dataset.py": {
        "torch": {
            "set_default_tensor_type_8": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "feat_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feat_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(feature_handle)",
                            "Call"
                        ],
                        [
                            "pickle.load(feature_handle)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(feat_mat)",
                            "Call"
                        ],
                        [
                            "feat_mat[:, startp:startp + self.feat_len]",
                            "Subscript"
                        ],
                        [
                            "padding(feat_mat, self.feat_len)",
                            "Call"
                        ],
                        [
                            "repeat_padding(feat_mat, self.feat_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "(spec, torch.zeros(width, padd_len, dtype=spec.dtype))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "padd_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_len - cur_len",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "spec.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softplus_16": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_24": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_classes, enc_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_48": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_49": {
                "variable": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(feat, p=2, dim=-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_51": {
                "variable": {
                    "value": "norms_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_52": {
                "variable": {
                    "value": "ncenters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "norms_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(self.centers, p=2, dim=-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(feat, norms)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(ncenters, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_14": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "enc_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "input": {
                    "value": "ncenters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(self.centers, norms_c)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "resnet.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.att_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_26": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.att_weights.permute(1, 0).unsqueeze(0).repeat(batch_size, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_112": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(num_nodes, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "enc_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_30": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "attentions.expand_as(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(weights.squeeze())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_33": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "attentions.unsqueeze(2).expand_as(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "representations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(avg_repr, std_repr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_118": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.in_planes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_67": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_92": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "enc_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(inputs, self.att_weights.permute(1, 0).unsqueeze(0).repeat(batch_size, 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_32": {
                "input": {
                    "value": "weights.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_38": {
                "*size": {
                    "value": "weighted.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "feat_model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "testDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ASVspoof2019('LA', '/dataNVME/neil/ASVspoof2019LAFeatures/', '/data/neil/DS_10283_3336/LA/ASVspoof2019_LA_cm_protocols/', part, 'LFCC', feat_len=750, padding='repeat')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_set.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_140": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_22": {
                "f": {
                    "value": "loss_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'anti-spoofing_loss_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "lfcc_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_97": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "lfcc_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lfcc_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta_1, args.beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "trainDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ASVspoof2019(args.access_type, args.path_to_features, args.path_to_protocol, 'train', 'LFCC', feat_len=args.feat_len, padding=args.padding)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "training_set.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "valDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ASVspoof2019(args.access_type, args.path_to_features, args.path_to_protocol, 'dev', 'LFCC', feat_len=args.feat_len, padding=args.padding)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "validation_set.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_266": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_fold, 'anti-spoofing_lfcc_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_107": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "lfcc_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_fold, 'anti-spoofing_lfcc_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_134": {
                "variable": {
                    "value": "amsoftmax_optimzer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "amsoftmax_loss.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_139": {
                "variable": {
                    "value": "ocsoftmax_optimzer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ocsoftmax.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_270": {
                "variable": {
                    "value": "loss_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_fold, 'anti-spoofing_loss_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_226": {
                "obj": {
                    "value": "lfcc_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet(3, args.enc_dim, resnet_type='18', nclasses=2).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.out_fold, 'anti-spoofing_lfcc_model.pt')).to(args.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.out_fold, 'checkpoint', 'anti-spoofing_lfcc_model_%d.pt' % (epoch_num + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "loss_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.load(os.path.join(args.out_fold, 'anti-spoofing_loss_model.pt'))",
                            "Call"
                        ],
                        [
                            "ocsoftmax",
                            "variable"
                        ],
                        [
                            "amsoftmax_loss",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ocsoftmax",
                            "variable"
                        ],
                        [
                            "amsoftmax_loss",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.out_fold, 'checkpoint', 'anti-spoofing_loss_model_%d.pt' % (epoch_num + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_241": {
                "obj": {
                    "value": "lfcc_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet(3, args.enc_dim, resnet_type='18', nclasses=2).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.out_fold, 'anti-spoofing_lfcc_model.pt')).to(args.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.out_fold, 'anti-spoofing_lfcc_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_234": {
                "obj": {
                    "value": "loss_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.load(os.path.join(args.out_fold, 'anti-spoofing_loss_model.pt'))",
                            "Call"
                        ],
                        [
                            "ocsoftmax",
                            "variable"
                        ],
                        [
                            "amsoftmax_loss",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ocsoftmax",
                            "variable"
                        ],
                        [
                            "amsoftmax_loss",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.out_fold, 'checkpoint', 'anti-spoofing_loss_model_%d.pt' % (epoch_num + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "loss_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.load(os.path.join(args.out_fold, 'anti-spoofing_loss_model.pt'))",
                            "Call"
                        ],
                        [
                            "ocsoftmax",
                            "variable"
                        ],
                        [
                            "amsoftmax_loss",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ocsoftmax",
                            "variable"
                        ],
                        [
                            "amsoftmax_loss",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.out_fold, 'anti-spoofing_loss_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "loss_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.load(os.path.join(args.out_fold, 'anti-spoofing_loss_model.pt'))",
                            "Call"
                        ],
                        [
                            "ocsoftmax",
                            "variable"
                        ],
                        [
                            "amsoftmax_loss",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ocsoftmax",
                            "variable"
                        ],
                        [
                            "amsoftmax_loss",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.out_fold, 'anti-spoofing_loss_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_218": {
                "tensors": {
                    "value": "score_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "tensors": {
                    "value": "idx_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}