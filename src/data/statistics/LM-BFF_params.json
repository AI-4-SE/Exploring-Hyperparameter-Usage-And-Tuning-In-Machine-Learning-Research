{
    "run.py": {
        "torch": {
            "tensor_486": {
                "variable": {
                    "value": "model.label_word_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "train_dataset.label_word_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_546": {
                "variable": {
                    "value": "model.label_word_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "train_dataset.label_word_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_538": {
                "obj": {
                    "value": "model_args",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(training_args.output_dir, 'model_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_539": {
                "obj": {
                    "value": "data_args",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(training_args.output_dir, 'data_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset.py": {
        "torch": {
            "load_336": {
                "variable": {
                    "value": "(self.support_examples, self.query_examples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_354": {
                "obj": {
                    "value": "[self.support_examples, self.query_examples]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir if cache_dir is not None else args.data_dir, 'cached_{}_{}_{}_{}'.format(mode, tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/label_search.py": {
        "torch": {}
    },
    "src/models.py": {
        "torch": {
            "Embedding_21": {
                "variable": {
                    "value": "new_token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_types",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "old_token_type_embeddings.weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits, -1)",
                            "Call"
                        ],
                        [
                            "logsoftmax(logits)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits, -1)",
                            "Call"
                        ],
                        [
                            "logsoftmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits, -1)",
                            "Call"
                        ],
                        [
                            "logsoftmax(logits)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits, -1)",
                            "Call"
                        ],
                        [
                            "logsoftmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LogSoftmax_94": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LogSoftmax_177": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_101": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - (labels.view(-1) - self.lb) / (self.ub - self.lb), (labels.view(-1) - self.lb) / (self.ub - self.lb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_105": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_184": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - (labels.view(-1) - self.lb) / (self.ub - self.lb), (labels.view(-1) - self.lb) / (self.ub - self.lb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_188": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_75": {
                "start": {
                    "value": "sequence_output.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_158": {
                "start": {
                    "value": "sequence_output.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "prediction_mask_scores.new()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "prediction_mask_scores.new()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_111": {
                "input": {
                    "value": "logits[..., 1].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_194": {
                "input": {
                    "value": "logits[..., 1].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/processors.py": {
        "torch": {}
    },
    "src/trainer.py": {
        "torch": {
            "tensor_328": {
                "variable": {
                    "value": "tr_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_278": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_282": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[self.args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_265": {
                "f": {
                    "value": "os.path.join(model_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_267": {
                "f": {
                    "value": "os.path.join(model_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__366": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__368": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__370": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/ensemble.py": {
        "torch": {}
    },
    "tools/gather_result.py": {
        "torch": {}
    },
    "tools/generate_template.py": {
        "torch": {
            "zeros_106": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(input_tensors), max_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(input_tensors), max_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "ori_decoder_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_ids.size(0), max_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_text(template, item['text'], item['label'], tokenizer, mapping)",
                            "Call"
                        ],
                        [
                            "input_text[-256:]",
                            "Subscript"
                        ],
                        [
                            "input_text[:256]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_157": {
                "variable": {
                    "value": "aggr_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aggr_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(aggr_output, 0)",
                            "Call"
                        ],
                        [
                            "aggr_output.mean(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_161": {
                "variable": {
                    "value": "log_denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggr_output[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/sort_mapping.py": {
        "torch": {}
    },
    "tools/sort_prompt.py": {
        "torch": {}
    },
    "tools/sort_template.py": {
        "torch": {}
    }
}