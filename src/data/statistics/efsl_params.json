{
    "data/dataset.py": {
        "torch": {}
    },
    "data/sampler.py": {
        "torch": {
            "stack_64": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "episode",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "episode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(episode, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "ndarray": {
                    "value": "all_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate((l1, l2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/classifier.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.proto",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(n_classes, in_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_64": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_43": {
                "*size": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/cosine.py": {
        "torch": {
            "cat_38": {
                "variable": {
                    "value": "proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_shot, x_pseudo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_38": {
                "variable": {
                    "value": "proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(temp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/feat.py": {
        "torch": {
            "randn_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1] + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "protos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_shot, x_pseudo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_38": {
                "variable": {
                    "value": "protos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "protos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "protos_adapted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_63": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_66": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_68": {
                "variable": {
                    "value": "log_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_71": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_92": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(temp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/masking_model.py": {
        "torch": {
            "mean_37": {
                "variable": {
                    "value": "a_shot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_shot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_shot.view(ep_per_batch, n_way, n_shot, *img_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_38": {
                "variable": {
                    "value": "a_pseudo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pseudo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(x_pseudo, mask)",
                            "Call"
                        ],
                        [
                            "x_pseudo.view(ep_per_batch, n_way, n_pseudo, *img_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a_shot, a_pseudo)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_48": {
                "variable": {
                    "value": "x_pseudo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pseudo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(x_pseudo, mask)",
                            "Call"
                        ],
                        [
                            "x_pseudo.view(ep_per_batch, n_way, n_pseudo, *img_shape)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.masking_model(total)",
                            "Call"
                        ],
                        [
                            "mask.view(*batch_shape, *mask.shape[1:]).unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/masking_utils.py": {
        "torch": {
            "randn_226": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - self.keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_118": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(7, 512, 5, 5).cuda()",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sigmoid_27": {
                "variable": {
                    "value": "self.act_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_124": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_29": {
                "variable": {
                    "value": "self.act_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_174": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.DropBlock(out, gamma=gamma)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.drop_rate, training=self.training, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "[x_shot, x_pseudo, x_query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/models.py": {
        "torch": {
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/relation_net.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1] + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hdim, 300)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "protos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_shot, x_pseudo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "protos",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "protos",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "expanded_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_query.expand([-1, -1, x_shot.shape[1], -1, -1, -1]), protos.expand([-1, x_query.shape[1], -1, -1, -1, -1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(temp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "hdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_36": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/resnet_new.py": {
        "torch": {
            "randn_356": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "84",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "84",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_17": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(self.block_size).view(-1, 1).expand(self.block_size, self.block_size).reshape(-1), torch.arange(self.block_size).repeat(self.block_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_66": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(self.block_size ** 2, 2).cuda().long(), offsets.long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_99": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_182": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - self.keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Bernoulli_46": {
                "variable": {
                    "value": "bernoulli",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1 - keep_rate) / self.block_size ** 2 * feat_size ** 2 / (feat_size - self.block_size + 1) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_82": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bernoulli.sample((batch_size, channels, height - (self.block_size - 1), width - (self.block_size - 1))).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(left_padding, right_padding, left_padding, right_padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_85": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bernoulli.sample((batch_size, channels, height - (self.block_size - 1), width - (self.block_size - 1))).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(left_padding, right_padding, left_padding, right_padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_179": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_221": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.DropBlock(out, gamma=gamma)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.drop_rate, training=self.training, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "self.block_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_202": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_70": {
                "start": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_efsl.py": {
        "torch": {
            "DataParallel_28": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_model(config)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_classifier.py": {
        "torch": {
            "DataParallel_61": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_model(config)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_63": {
                "variable": {
                    "value": "fs_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fs_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_model({'model': 'cosine', 'model_args': {'encoder': None}})",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fs_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_92": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_203": {
                "obj": {
                    "value": "save_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "save_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-ex.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_111": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "save_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "save_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'max-va.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_efsl.py": {
        "torch": {
            "DataParallel_44": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_model(config)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "save_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "trlog",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'trlog.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "save_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_203": {
                "obj": {
                    "value": "save_obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'max-va.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/__init__.py": {
        "torch": {
            "normalize_122": {
                "variable": {
                    "value": "proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proto",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(proto, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_123": {
                "variable": {
                    "value": "x_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(x_query, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SGD_169": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_173": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SGD(params, lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "Adam(params, lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_99": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proto.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_101": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(feat, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "F.normalize(proto, dim=-1).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_109": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proto.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_111": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(feat, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "F.normalize(proto, dim=-1).permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_133": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(feat, proto.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(F.normalize(feat, dim=-1), F.normalize(proto, dim=-1).t())",
                            "Call"
                        ],
                        [
                            "torch.bmm(feat, proto.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "-(feat.unsqueeze(1) - proto.unsqueeze(0)).pow(2).sum(dim=-1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.bmm(F.normalize(feat, dim=-1), F.normalize(proto, dim=-1).permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "-(feat.unsqueeze(2) - proto.unsqueeze(1)).pow(2).sum(dim=-1)",
                            "UnaryOp"
                        ],
                        [
                            "compute_logits(x_query, proto, metric=metric, temp=temp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_101": {
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_102": {
                "input": {
                    "value": "proto",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(proto, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "t_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_111": {
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_112": {
                "input": {
                    "value": "proto",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(proto, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_112": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/few_shot.py": {
        "torch": {
            "arange_18": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_41": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, n_way)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(n).unsqueeze(1).expand(n, k).reshape(-1)",
                            "Call"
                        ],
                        [
                            "label.repeat(ep_per_batch)",
                            "Call"
                        ],
                        [
                            "make_nk_label(n=n_way, k=n_query, ep_per_batch=ep_per_batch).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/get_data_loader.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CustomDataset(config[sub_dsname], **config[f'{sub_dsname}_args'], data_dir=config['data_dir'])",
                            "Call"
                        ],
                        [
                            "TrainDataset(name=config[sub_dsname], **config[f'{sub_dsname}_args'], data_dir=config['data_dir'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config['workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_23": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CustomDataset(config[sub_dsname], **config[f'{sub_dsname}_args'], data_dir=config['data_dir'])",
                            "Call"
                        ],
                        [
                            "TrainDataset(name=config[sub_dsname], **config[f'{sub_dsname}_args'], data_dir=config['data_dir'])",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EpisodicSampler(dataset=dataset, n_batch=config['num_batches'], n_way=config['n_way'], n_shot=config['n_shot'], n_query=config['n_query'], n_pseudo=config['n_pseudo'], episodes_per_batch=config['ep_per_batch'])",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/get_model.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "saved_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['model_checkpoint']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_19": {
                "variable": {
                    "value": "saved_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['encoder_checkpoint']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}