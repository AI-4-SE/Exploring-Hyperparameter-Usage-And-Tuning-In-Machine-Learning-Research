{
    "adult/mixture_model/classify_mixture_onehot.py": {
        "sklearn": {
            "StandardScaler_37": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_136": {
                "variable": {
                    "value": "cls_syn_dpvi",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_17": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "adult/mixture_model/classify_pb_onehot.py": {
        "sklearn": {
            "StandardScaler_28": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_113": {
                "variable": {
                    "value": "cls_syn_pb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adult/mixture_model/create_onehot_data.py": {
        "sklearn": {
            "StandardScaler_113": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_106": {
                "variable": {
                    "value": "encoders[column]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adult/mixture_model/create_onehot_data_disc.py": {
        "sklearn": {
            "StandardScaler_155": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_109": {
                "variable": {
                    "value": "encoders[column]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adult/dp_logistic_regression_onehot/adult_lr_model.py": {
        "torch": {
            "as_tensor_7": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_8": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_10": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(data * w).sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_17": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0 * torch.ones_like(w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_18": {
                "input": {
                    "value": "logp.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_17": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_17": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adult/dp_logistic_regression_onehot/adult_main_anticipated.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "generative_model.reparam.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.bias.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "generative_model.reparam.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.weight.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_14": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adult/dp_logistic_regression_onehot/classify_anticipated.py": {
        "torch": {}
    },
    "adult/dp_logistic_regression_onehot/dpvi.py": {
        "torch": {
            "randn_23": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_6": {
                "input": {
                    "value": "torch.sum(log_2pi + 1 + 2 * model.weight, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(model.reparam.weight.grad.data, model.reparam.bias.grad.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_37": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_6": {
                "input": {
                    "value": "log_2pi + 1 + 2 * model.weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_35": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "all_38": {
                "input": {
                    "value": "g.norm(dim=1) < C + 1e-09",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_40": {
                "input": {
                    "value": "torch.isnan(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_40": {
                "input": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((model.reparam.weight.grad.data, model.reparam.bias.grad.data), 1).clone()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adult/dp_logistic_regression_onehot/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_33": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adult/dp_logistic_regression_onehot/res/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_33": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adult/dp_logistic_regression_onehot/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adult/dp_logistic_regression_onehot/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "adult/mixture_model/adult_model.py": {
        "torch": {
            "Beta_6": {
                "variable": {
                    "value": "base_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TransformedDistribution_8": {
                "variable": {
                    "value": "TransBeta",
                    "type": "Variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "base_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Beta(1, 1)",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "transforms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[SigmoidTransform().inv]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "logps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(X), k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_34": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([len(X), k])",
                            "Call"
                        ],
                        [
                            "logps + Beta(alpha, beta).log_prob(data)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_63": {
                "input": {
                    "value": "logp",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.logsumexp(logps, dim=-1)",
                            "Call"
                        ],
                        [
                            "Dirichlet(torch.ones_like(pi)).log_prob(pi) + log_det_jacobian_softmax(pi, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "logp + torch.sum(Gamma(1.0, 1.0).log_prob(beta) + torch.log(beta), dim=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SigmoidTransform_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_22": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dirichlet_43": {
                "concentration": {
                    "value": "torch.ones_like(pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_27": {
                "probs": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_51": {
                "input": {
                    "value": "Dirichlet(torch.ones_like(alpha)).log_prob(alpha) + log_det_jacobian_softmax(alpha, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Bernoulli_30": {
                "logits": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ]
                    ]
                }
            },
            "exp_32": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_32": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_60": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Beta_33": {
                "concentration1": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_43": {
                "input": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(Z['pi_unconstrained'][0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dirichlet_51": {
                "concentration": {
                    "value": "torch.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(alpha) + torch.log(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(beta) + torch.log(beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Gamma_61": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_62": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_62": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_51": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adult/mixture_model/dpvi.py": {
        "torch": {
            "randn_20": {
                "variable": {
                    "value": "draw_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_8": {
                "input": {
                    "value": "torch.sum(log_2pi + 1 + 2 * model.weight, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "clip_bound",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.reparam.bias.grad.data.norm(dim=1) / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_8": {
                "input": {
                    "value": "log_2pi + 1 + 2 * model.weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "adult/mixture_model/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adult/mixture_model/mixture_main.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_14": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "Optimizer_114": {
                "variable": {
                    "value": "optimizer_rich",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rich_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0005",
                            "Constant"
                        ]
                    ]
                }
            },
            "Optimizer_123": {
                "variable": {
                    "value": "optimizer_poor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "poor_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0005",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_like_116": {
                "input": {
                    "value": "rich_model.reparam.bias.data[:, -(k - 1):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_117": {
                "input": {
                    "value": "rich_model.reparam.weight.data[:, -(k - 1):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_124": {
                "input": {
                    "value": "poor_model.reparam.bias.data[:, -(k - 1):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "poor_model.reparam.weight.data[:, -(k - 1):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "adult/mixture_model/res/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_33": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adult/mixture_model/sampler.py": {
        "torch": {
            "zeros_8": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adult/mixture_model/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adult/mixture_model/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/female/diabetes_model.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "logps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(X), k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_37": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([len(X), k])",
                            "Call"
                        ],
                        [
                            "logps + Beta(alpha, beta).log_prob(data)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dirichlet_52": {
                "concentration": {
                    "value": "torch.ones_like(pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_29": {
                "probs": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_58": {
                "input": {
                    "value": "Dirichlet(torch.ones_like(alpha)).log_prob(alpha) + log_det_jacobian_softmax(alpha, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Bernoulli_32": {
                "logits": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(Z['pi_unconstrained'][0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "Beta(torch.ones_like(theta), torch.ones_like(theta)).log_prob(theta) + log_det_jacobian_sigmoid(theta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Beta_35": {
                "concentration1": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dirichlet_58": {
                "concentration": {
                    "value": "torch.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(alpha) + torch.log(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(beta) + torch.log(beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Beta_62": {
                "concentration1": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_67": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/female/dpvi.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "bias_grad_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C / bias_grad_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "any_82": {
                "input": {
                    "value": "torch.isnan(total_weight_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_35": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_51": {
                "input": {
                    "value": "model.reparam.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_82": {
                "input": {
                    "value": "total_weight_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ll_weight_grad + logprior_weight_grad + entropy_weight_grad).repeat(batch_size).reshape_as(model.reparam.weight.data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/female/female_main.py": {
        "torch": {
            "is_available_8": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "generative_model.reparam.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.bias.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "generative_model.reparam.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.weight.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_55": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_140": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_143": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_144": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_44": {
                "input": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-23 * torch.ones(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_48": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_66": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init, size=num_cats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_56": {
                "data": {
                    "value": "train_data[key].mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "data": {
                    "value": "freqs / np.sum(freqs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_58": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_cats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(freqs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/female/generate_data_by_seed.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/female/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/female/sampler.py": {
        "torch": {
            "zeros_8": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/female/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/female/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/male/diabetes_model.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "logps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(X), k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_37": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([len(X), k])",
                            "Call"
                        ],
                        [
                            "logps + Beta(alpha, beta).log_prob(data)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dirichlet_52": {
                "concentration": {
                    "value": "torch.ones_like(pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_29": {
                "probs": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_58": {
                "input": {
                    "value": "Dirichlet(torch.ones_like(alpha)).log_prob(alpha) + log_det_jacobian_softmax(alpha, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Bernoulli_32": {
                "logits": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(Z['pi_unconstrained'][0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "Beta(torch.ones_like(theta), torch.ones_like(theta)).log_prob(theta) + log_det_jacobian_sigmoid(theta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Beta_35": {
                "concentration1": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dirichlet_58": {
                "concentration": {
                    "value": "torch.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(alpha) + torch.log(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(beta) + torch.log(beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Beta_62": {
                "concentration1": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_67": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/male/dpvi.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "bias_grad_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C / bias_grad_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "any_82": {
                "input": {
                    "value": "torch.isnan(total_weight_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_35": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_51": {
                "input": {
                    "value": "model.reparam.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_82": {
                "input": {
                    "value": "total_weight_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ll_weight_grad + logprior_weight_grad + entropy_weight_grad).repeat(batch_size).reshape_as(model.reparam.weight.data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/male/generate_data_by_seed.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/male/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/male/male_main.py": {
        "torch": {
            "is_available_8": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "generative_model.reparam.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.bias.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "generative_model.reparam.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.weight.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_55": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_140": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_143": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_144": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_44": {
                "input": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-23 * torch.ones(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_48": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_66": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init, size=num_cats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_56": {
                "data": {
                    "value": "train_data[key].mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "data": {
                    "value": "freqs / np.sum(freqs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_58": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_cats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(freqs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/male/sampler.py": {
        "torch": {
            "zeros_8": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/male/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_death_strat/male/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_strat/diabetes_model.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "logps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(X), k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_37": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([len(X), k])",
                            "Call"
                        ],
                        [
                            "logps + Beta(alpha, beta).log_prob(data)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dirichlet_52": {
                "concentration": {
                    "value": "torch.ones_like(pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_29": {
                "probs": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_58": {
                "input": {
                    "value": "Dirichlet(torch.ones_like(alpha)).log_prob(alpha) + log_det_jacobian_softmax(alpha, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Bernoulli_32": {
                "logits": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(Z['pi_unconstrained'][0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "Beta(torch.ones_like(theta), torch.ones_like(theta)).log_prob(theta) + log_det_jacobian_sigmoid(theta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Beta_35": {
                "concentration1": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dirichlet_58": {
                "concentration": {
                    "value": "torch.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(alpha) + torch.log(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(beta) + torch.log(beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Beta_62": {
                "concentration1": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_67": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_strat/dpvi.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "bias_grad_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C / bias_grad_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "any_82": {
                "input": {
                    "value": "torch.isnan(total_weight_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_35": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_51": {
                "input": {
                    "value": "model.reparam.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_82": {
                "input": {
                    "value": "total_weight_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ll_weight_grad + logprior_weight_grad + entropy_weight_grad).repeat(batch_size).reshape_as(model.reparam.weight.data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_strat/generate_data_by_seed.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_strat/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_strat/main.py": {
        "torch": {
            "is_available_8": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "generative_model.reparam.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.bias.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "generative_model.reparam.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.weight.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_55": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_144": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_145": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_147": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_44": {
                "input": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-23 * torch.ones(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_48": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_66": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init, size=num_cats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_56": {
                "data": {
                    "value": "train_data[key].mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "data": {
                    "value": "freqs / np.sum(freqs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_58": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_cats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(freqs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/ablation_study/no_strat/sampler.py": {
        "torch": {
            "zeros_8": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_strat/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ard/ablation_study/no_strat/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ard/mixture_female/diabetes_model.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "logps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(X), k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_37": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([len(X), k])",
                            "Call"
                        ],
                        [
                            "logps + Beta(alpha, beta).log_prob(data)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dirichlet_52": {
                "concentration": {
                    "value": "torch.ones_like(pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_29": {
                "probs": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_58": {
                "input": {
                    "value": "Dirichlet(torch.ones_like(alpha)).log_prob(alpha) + log_det_jacobian_softmax(alpha, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Bernoulli_32": {
                "logits": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(Z['pi_unconstrained'][0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "Beta(torch.ones_like(theta), torch.ones_like(theta)).log_prob(theta) + log_det_jacobian_sigmoid(theta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Beta_35": {
                "concentration1": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dirichlet_58": {
                "concentration": {
                    "value": "torch.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(alpha) + torch.log(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(beta) + torch.log(beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Beta_62": {
                "concentration1": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_67": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/mixture_female/dpvi.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "bias_grad_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C / bias_grad_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "any_82": {
                "input": {
                    "value": "torch.isnan(total_weight_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_35": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_51": {
                "input": {
                    "value": "model.reparam.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_82": {
                "input": {
                    "value": "total_weight_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ll_weight_grad + logprior_weight_grad + entropy_weight_grad).repeat(batch_size).reshape_as(model.reparam.weight.data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/mixture_female/female_main.py": {
        "torch": {
            "is_available_9": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "generative_model.reparam.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.bias.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "generative_model.reparam.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.weight.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_56": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_151": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_152": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_154": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_45": {
                "input": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-23 * torch.ones(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_49": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init, size=num_cats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_57": {
                "data": {
                    "value": "train_data[key].mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_68": {
                "data": {
                    "value": "freqs / np.sum(freqs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_59": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_cats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(freqs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/mixture_female/generate_data.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_female/generate_data_by_seed.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_female/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_female/sampler.py": {
        "torch": {
            "zeros_8": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_female/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_female/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ard/mixture_male/diabetes_model.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "logps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(X), k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_37": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([len(X), k])",
                            "Call"
                        ],
                        [
                            "logps + Beta(alpha, beta).log_prob(data)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dirichlet_52": {
                "concentration": {
                    "value": "torch.ones_like(pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_29": {
                "probs": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_58": {
                "input": {
                    "value": "Dirichlet(torch.ones_like(alpha)).log_prob(alpha) + log_det_jacobian_softmax(alpha, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Bernoulli_32": {
                "logits": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(Z['pi_unconstrained'][0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "Beta(torch.ones_like(theta), torch.ones_like(theta)).log_prob(theta) + log_det_jacobian_sigmoid(theta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Beta_35": {
                "concentration1": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dirichlet_58": {
                "concentration": {
                    "value": "torch.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(alpha) + torch.log(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(beta) + torch.log(beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Beta_62": {
                "concentration1": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_67": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/mixture_male/dpvi.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "bias_grad_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C / bias_grad_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "any_82": {
                "input": {
                    "value": "torch.isnan(total_weight_grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_35": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_51": {
                "input": {
                    "value": "model.reparam.weight.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_82": {
                "input": {
                    "value": "total_weight_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ll_weight_grad + logprior_weight_grad + entropy_weight_grad).repeat(batch_size).reshape_as(model.reparam.weight.data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/mixture_male/generate_data.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_male/generate_data_by_seed.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_male/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_male/male_main.py": {
        "torch": {
            "is_available_9": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "generative_model.reparam.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.bias.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "generative_model.reparam.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.weight.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_56": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_152": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_153": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_155": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_156": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_45": {
                "input": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-23 * torch.ones(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_49": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "variable": {
                    "value": "initialization_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.laplace(1.0 / eps_init, size=num_cats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_57": {
                "data": {
                    "value": "train_data[key].mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_68": {
                "data": {
                    "value": "freqs / np.sum(freqs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_59": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_cats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(freqs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/mixture_male/sampler.py": {
        "torch": {
            "zeros_8": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_male/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ard/mixture_male/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ard/non_dp_runs/female/diabetes_model.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "logps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(X), k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_37": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([len(X), k])",
                            "Call"
                        ],
                        [
                            "logps + Beta(alpha, beta).log_prob(data)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dirichlet_52": {
                "concentration": {
                    "value": "torch.ones_like(pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_29": {
                "probs": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_58": {
                "input": {
                    "value": "Dirichlet(torch.ones_like(alpha)).log_prob(alpha) + log_det_jacobian_softmax(alpha, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Bernoulli_32": {
                "logits": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(Z['pi_unconstrained'][0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "Beta(torch.ones_like(theta), torch.ones_like(theta)).log_prob(theta) + log_det_jacobian_sigmoid(theta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Beta_35": {
                "concentration1": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dirichlet_58": {
                "concentration": {
                    "value": "torch.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(alpha) + torch.log(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(beta) + torch.log(beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Beta_62": {
                "concentration1": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_67": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/non_dp_runs/female/female_main.py": {
        "torch": {
            "is_available_9": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "generative_model.reparam.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.bias.data.cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "generative_model.reparam.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.weight.data.cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_57": {
                "variable": {
                    "value": "param_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_data[key].mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_150": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_151": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_153": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_154": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_47": {
                "input": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-23 * torch.ones(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_51": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "variable": {
                    "value": "param_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "freqs / np.sum(freqs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_59": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_cats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(freqs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/non_dp_runs/female/generate_data.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/female/generate_data_by_seed.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/female/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/female/sampler.py": {
        "torch": {
            "zeros_8": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/female/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/female/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ard/non_dp_runs/female/vi.py": {
        "torch": {
            "randn_19": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_34": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "any_39": {
                "input": {
                    "value": "torch.isnan(model.reparam.weight.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_39": {
                "input": {
                    "value": "model.reparam.weight.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/male/diabetes_model.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "logps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(X), k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_37": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([len(X), k])",
                            "Call"
                        ],
                        [
                            "logps + Beta(alpha, beta).log_prob(data)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dirichlet_52": {
                "concentration": {
                    "value": "torch.ones_like(pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_29": {
                "probs": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_58": {
                "input": {
                    "value": "Dirichlet(torch.ones_like(alpha)).log_prob(alpha) + log_det_jacobian_softmax(alpha, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Bernoulli_32": {
                "logits": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(Z['pi_unconstrained'][0], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "Beta(torch.ones_like(theta), torch.ones_like(theta)).log_prob(theta) + log_det_jacobian_sigmoid(theta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "variable": {
                    "value": "(alpha, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Beta_35": {
                "concentration1": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dirichlet_58": {
                "concentration": {
                    "value": "torch.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(alpha) + torch.log(alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "Gamma(1.0, 1.0).log_prob(beta) + torch.log(beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Beta_62": {
                "concentration1": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "torch.ones_like(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_67": {
                "concentration": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ],
                        [
                            "softmax(z, dim=-1, additional=-50.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/non_dp_runs/male/generate_data.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/male/generate_data_by_seed.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/male/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/male/male_main.py": {
        "torch": {
            "is_available_9": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "generative_model.reparam.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.bias.data.cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "generative_model.reparam.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.weight.data.cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_57": {
                "variable": {
                    "value": "param_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_data[key].mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_151": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_152": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_154": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sys.argv[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_47": {
                "input": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-23 * torch.ones(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_51": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "variable": {
                    "value": "param_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "freqs / np.sum(freqs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_59": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_cats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(freqs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ard/non_dp_runs/male/sampler.py": {
        "torch": {
            "zeros_8": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/male/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ard/non_dp_runs/male/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ard/non_dp_runs/male/vi.py": {
        "torch": {
            "randn_19": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_34": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "any_39": {
                "input": {
                    "value": "torch.isnan(model.reparam.weight.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_39": {
                "input": {
                    "value": "model.reparam.weight.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "carat/mixture_model/carat_dp_main.py": {
        "torch": {
            "is_available_6": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "generative_model.reparam.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.bias.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "generative_model.reparam.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.reparam.weight.data.cpu()[0].data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "X_apps",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "app_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pd.read_csv('../data/subsets/carat_apps_sub{}.dat'.format(d), sep=' ', header=None).astype('float').values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_9": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_10": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "carat/mixture_model/carat_model.py": {
        "torch": {
            "sum_14": {
                "variable": {
                    "value": "logp_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Bernoulli(logits=theta_unconstrained).log_prob(X_apps)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_20": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_unconstrained",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "theta_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_det_jacobian_sigmoid(theta_unconstrained)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "pi_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Dirichlet(torch.ones_like(pi)).log_prob(pi) + log_det_jacobian_softmax(pi, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Bernoulli_14": {
                "logits": {
                    "value": "theta_unconstrained",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dirichlet_28": {
                "concentration": {
                    "value": "torch.ones_like(pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_28": {
                "input": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(pi_unconstrained, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "carat/mixture_model/dpvi.py": {
        "torch": {
            "randn_14": {
                "variable": {
                    "value": "draw_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.reparam.weight.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_8": {
                "input": {
                    "value": "torch.sum(log_2pi + 1 + 2 * model.weight, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_33": {
                "variable": {
                    "value": "clip_bound",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.reparam.bias.grad.data.norm(dim=1) / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_8": {
                "input": {
                    "value": "log_2pi + 1 + 2 * model.weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_32": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.reparam.weight.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_63": {
                "input": {
                    "value": "model.reparam.bias.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_64": {
                "input": {
                    "value": "model.reparam.weight.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "carat/mixture_model/linear.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_33": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "carat/mixture_model/sampler.py": {
        "torch": {
            "zeros_8": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "carat/mixture_model/transform.py": {
        "torch": {
            "Softmax_12": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_22": {
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_12": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.log(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([x, additional])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "additional",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_25": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_26": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log1p_38": {
                "input": {
                    "value": "x.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "carat/mixture_model/utils.py": {
        "torch": {
            "sqrt_12": {
                "variable": {
                    "value": "example_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "example_norms + p.grad.data.norm(dim=dim) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(example_norms)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example_norms / C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_6": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "carat/plot_scripts/plot_cov_err.py": {
        "torch": {
            "is_available_8": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_11": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_14": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}