{
    "atari_demo.py": {
        "torch": {
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "autoencode.py": {
        "torch": {
            "SummaryWriter_42": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "run_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'data/models/{args.tag}/autoencode/{args.model_type}/run_{args.run_id}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "train_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "test_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "auto_encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_73": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Adam(auto_encoder.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_80": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[0], x_[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_37": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_55": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_56": {
                "variable": {
                    "value": "wm",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "wm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(x, hm, wm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "classify.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "train_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tv.datasets.CIFAR10(torchvision_data_root, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "test_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tv.datasets.CIFAR10(torchvision_data_root, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_57": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_58": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SGD(classifier.parameters(), lr=lr, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_59": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "confusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "keypoints.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "train_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False if args.device == 'cpu' else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "test_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False if args.device == 'cpu' else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "kp_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_17": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_58": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "criterion(x_t, x_, loss_mask)",
                            "Call"
                        ],
                        [
                            "criterion(x_t, x_, loss_mask)",
                            "Call"
                        ],
                        [
                            "(x - x_) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * loss_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/config.py": {
        "torch": {
            "device_107": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/data_augments.py": {
        "torch": {
            "ones_29": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_8": {
                "*size": {
                    "value": "batch_items",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/ds/datasets.py": {
        "torch": {
            "randperm_216": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sum(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_223": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tv.datasets.ImageFolder(str(Path(data_root) / Path(self.subdir)), transform=self.transforms, **kwargs)",
                            "Call"
                        ],
                        [
                            "AtariDataset(self.env, total_len, self.prepro, end_trajectory=if_done, transforms=self.transforms)",
                            "Call"
                        ],
                        [
                            "SquareDataset(total_len, transform=self.transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(0, train_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_224": {
                "variable": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tv.datasets.ImageFolder(str(Path(data_root) / Path(self.subdir)), transform=self.transforms, **kwargs)",
                            "Call"
                        ],
                        [
                            "AtariDataset(self.env, total_len, self.prepro, end_trajectory=if_done, transforms=self.transforms)",
                            "Call"
                        ],
                        [
                            "SquareDataset(total_len, transform=self.transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(train_len, total_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_195": {
                "variable": {
                    "value": "kp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.keypoints",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_198": {
                "variable": {
                    "value": "(mask, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MF.gaussian_like_function(kp, self.height, self.width)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Subset_217": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices[offset - length:offset]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/higgham.py": {
        "torch": {
            "svd_69": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(A + A.T) / 2",
                            "BinOp"
                        ],
                        [
                            "A + A.T / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_70": {
                "input": {
                    "value": "s.diag_embed()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_77": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "A.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "symeig_98": {
                "variable": {
                    "value": "(e, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(v, torch.matmul(e.diag_embed(), v.t()))",
                            "Call"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "input": {
                    "value": "e.diag_embed()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "v.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_60": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/models/classifier.py": {
        "torch": {
            "AdaptiveAvgPool2d_9": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_10": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_22": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/models/functional.py": {
        "torch": {
            "mean_6": {
                "variable": {
                    "value": "marginal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_7": {
                "variable": {
                    "value": "sm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "marginal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(heatmap, dim=dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(heatmap, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_12": {
                "variable": {
                    "value": "marginal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_13": {
                "variable": {
                    "value": "sm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "marginal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(heatmap, dim=dim)",
                            "Call"
                        ],
                        [
                            "torch.mean(heatmap, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_18": {
                "variable": {
                    "value": "ruler",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_23": {
                "variable": {
                    "value": "ruler",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linspace(0, 1, length, device=prob.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_50": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_62": {
                "variable": {
                    "value": "gm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-(hm + wm + eps).sqrt_() / (2 * sigma ** 2)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(gm)",
                            "Call"
                        ],
                        [
                            "-(hm + wm)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "linspace_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "prob * ruler",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_19": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "torch.exp(prob + ruler)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "(hk, wk)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_44": {
                "tensors": {
                    "value": "(hk, wk)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_32": {
                "tensors": {
                    "value": "(hk, wk)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_42": {
                "tensors": {
                    "value": "(hk, wk)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_24": {
                "input": {
                    "value": "prob + ruler",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_42": {
                "input": {
                    "value": "wp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_23": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/models/keynet.py": {
        "torch": {
            "cat_29": {
                "tensors": {
                    "value": "(z, m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/models/knn.py": {
        "torch": {
            "MaxPool2d_60": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "return_indices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_71": {
                "variable": {
                    "value": "self.unpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.in_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*in_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.out_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*out_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.feature_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.output_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*block",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_203": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.in_block(x)",
                            "Call"
                        ],
                        [
                            "self.core(h)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_204": {
                "variable": {
                    "value": "wm",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "wm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "block.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_151": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "(x, hm, wm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_115": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "core_in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "core_out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "core_in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "str(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_188": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "keypoints/models/losses.py": {
        "torch": {
            "mse_loss_56": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.target_activations[i]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "prod_60": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bad_bits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "flowfield ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_60": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_79": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.target_activations[i]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.target_activations[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "loss + F.mse_loss(x, target, reduction='mean')",
                            "BinOp"
                        ],
                        [
                            "F.mse_loss(source, target, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.mse_loss(source, target, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_36": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.x_activations[i]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.target_activations[i]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "loss + F.mse_loss(x, target, reduction='mean')",
                            "BinOp"
                        ],
                        [
                            "F.mse_loss(source, target, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.mse_loss(source, target, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "keypoints/models/transporter.py": {
        "torch": {
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "mask_xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_48": {
                "variable": {
                    "value": "mask_xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "mask_xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "variable": {
                    "value": "mask_xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_58": {
                "variable": {
                    "value": "(mask_xs, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "m_xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_59": {
                "variable": {
                    "value": "(mask_xt, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "m_xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/models/vgg.py": {
        "torch": {
            "Sequential_39": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_26": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_30": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_channels + 2 * co_ord_conv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg[1:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "keypoints/tps.py": {
        "torch": {
            "sqrt_43": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(diff ** 2).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_53": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U.view(N, -1, T)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((-w.sum(dim=1, keepdim=True), w), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_83": {
                "variable": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_84": {
                "variable": {
                    "value": "grid[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "grid[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_117": {
                "variable": {
                    "value": "c[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_118": {
                "variable": {
                    "value": "c[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "c[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_124": {
                "variable": {
                    "value": "cnt_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_control_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[cos(theta), sin(theta), 0.0], [-sin(theta), cos(theta), 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "affine_grid_150": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1, 4 + 3, 2)",
                            "Call"
                        ],
                        [
                            "torch.randn(batch_size, num_control_points + 3, 2) * var",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[cos(theta), sin(theta), 0.0], [-sin(theta), cos(theta), 0.0]]).expand(x.size(0), -1, -1).to(x.device)",
                            "Call"
                        ],
                        [
                            "theta.to(x.device)",
                            "Call"
                        ],
                        [
                            "torch.full((x.size(0),), self.theta, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.rand(x.size(0)) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "theta * self.max",
                            "BinOp"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_156": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1, 4 + 3, 2)",
                            "Call"
                        ],
                        [
                            "torch.randn(batch_size, num_control_points + 3, 2) * var",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[cos(theta), sin(theta), 0.0], [-sin(theta), cos(theta), 0.0]]).expand(x.size(0), -1, -1).to(x.device)",
                            "Call"
                        ],
                        [
                            "theta.to(x.device)",
                            "Call"
                        ],
                        [
                            "torch.full((x.size(0),), self.theta, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.rand(x.size(0)) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "theta * self.max",
                            "BinOp"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sin_157": {
                "variable": {
                    "value": "sin_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1, 4 + 3, 2)",
                            "Call"
                        ],
                        [
                            "torch.randn(batch_size, num_control_points + 3, 2) * var",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[cos(theta), sin(theta), 0.0], [-sin(theta), cos(theta), 0.0]]).expand(x.size(0), -1, -1).to(x.device)",
                            "Call"
                        ],
                        [
                            "theta.to(x.device)",
                            "Call"
                        ],
                        [
                            "torch.full((x.size(0),), self.theta, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.rand(x.size(0)) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "theta * self.max",
                            "BinOp"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "affine_grid_165": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "transform",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x.size(0), 2, 3, dtype=x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0], [1.0, 0], [1.0, 1], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_198": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4 + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(-w.sum(dim=1, keepdim=True), w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_131": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tps_grid(theta, c, size)",
                            "Call"
                        ],
                        [
                            "theta.new(N, H, W, 3)",
                            "Call"
                        ],
                        [
                            "xy.new(N, M, 3)",
                            "Call"
                        ],
                        [
                            "tps_grid(theta, cnt_points, x.shape).type_as(x).to(device)",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, x.shape)",
                            "Call"
                        ],
                        [
                            "F.affine_grid(transform, x.shape).to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_151": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tps_grid(theta, c, size)",
                            "Call"
                        ],
                        [
                            "theta.new(N, H, W, 3)",
                            "Call"
                        ],
                        [
                            "xy.new(N, M, 3)",
                            "Call"
                        ],
                        [
                            "tps_grid(theta, cnt_points, x.shape).type_as(x).to(device)",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, x.shape)",
                            "Call"
                        ],
                        [
                            "F.affine_grid(transform, x.shape).to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_166": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tps_grid(theta, c, size)",
                            "Call"
                        ],
                        [
                            "theta.new(N, H, W, 3)",
                            "Call"
                        ],
                        [
                            "xy.new(N, M, 3)",
                            "Call"
                        ],
                        [
                            "tps_grid(theta, cnt_points, x.shape).type_as(x).to(device)",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, x.shape)",
                            "Call"
                        ],
                        [
                            "F.affine_grid(transform, x.shape).to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_183": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "D + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_55": {
                "input": {
                    "value": "grid.view(N, -1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_123": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_control_points + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_192": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "keypoints/utils.py": {
        "torch": {
            "ones_76": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bytes.fromhex(s)",
                            "Call"
                        ],
                        [
                            "min(rows * columns, b)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(color.item(0), color.item(1), color.item(2))",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_77": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bytes.fromhex(s)",
                            "Call"
                        ],
                        [
                            "min(rows * columns, b)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grid.unbind(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_80": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(b, c, h, w, device=tensor.device, dtype=tensor.dtype)",
                            "Call"
                        ],
                        [
                            "torch.cat(grid.unbind(0), dim=1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.unfold(grid, kernel_size=(h, w), stride=(h, w))",
                            "Call"
                        ],
                        [
                            "F.fold(grid, output_size=(rows * h, columns * w), kernel_size=(h, w), stride=(h, w))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "fold_81": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(b, c, h, w, device=tensor.device, dtype=tensor.dtype)",
                            "Call"
                        ],
                        [
                            "torch.cat(grid.unbind(0), dim=1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.unfold(grid, kernel_size=(h, w), stride=(h, w))",
                            "Call"
                        ],
                        [
                            "F.fold(grid, output_size=(rows * h, columns * w), kernel_size=(h, w), stride=(h, w))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(rows * h, columns * w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SummaryWriter_106": {
                "variable": {
                    "value": "self.tb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "run_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "comment": {
                    "value": "comment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_134": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "rows",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "stack_135": {
                "variable": {
                    "value": "kps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[TVF.to_tensor(plot_keypoints_on_image(k[i], x_[i])).to(x.device) for i in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "eye_183": {
                "n": {
                    "value": "confusion.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "train_panel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[index], x_[index], x_t[index], loss_mask[index], kps[index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "train_panel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[index], x_[index], x_t[index], kps[index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mapper.py": {
        "torch": {
            "SummaryWriter_40": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "run_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'data/models/mapper/{args.model_type}/run_{args.run_id}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "train_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "test_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mapper.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_65": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_[0], mask[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_35": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/common.py": {
        "torch": {
            "rand_23": {
                "variable": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_bottleneck.py": {
        "torch": {
            "linspace_5": {
                "variable": {
                    "value": "ruler",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_6": {
                "input": {
                    "value": "prob * ruler",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_6": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_10": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_cms_es.py": {
        "torch": {
            "meshgrid_22": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[x_, y_]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_39": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[x_, y_]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0, mean[0]], [0, 1.0, mean[1]], [0, 0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "x_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0], [0.0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "y_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0.0], [0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_unit, y_unit)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unit, torch.ones(2, 1, 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_131": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_132": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b.matmul(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b.matmul(d).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_205": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_206": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "matmul_207": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b.matmul(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b.matmul(d).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_334": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_335": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_336": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b.matmul(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b.matmul(d).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_339": {
                "variable": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_340": {
                "variable": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_432": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_433": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_434": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "matmul_435": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b.matmul(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b.matmul(d).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "variable": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_438": {
                "variable": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_531": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_532": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_533": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "matmul_534": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b.matmul(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b.matmul(d).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_536": {
                "variable": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_537": {
                "variable": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_668": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_670": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "knn.parameter_count(policy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['z'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['sample'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weights.diag_embed()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "symeig_161": {
                "variable": {
                    "value": "(d, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(t, weights.diag_embed())",
                            "Call"
                        ],
                        [
                            "c.matmul(t.t())",
                            "Call"
                        ],
                        [
                            "(1.0 - cmu) * c_prev + cmu * c",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1 - c1) * c + c1 * cov_pc",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * prev_cov + c1 * pc_cov + cmu * cmu_cov",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_221": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['z'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['sample'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "symeig_249": {
                "variable": {
                    "value": "(d, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(t, weights.diag_embed())",
                            "Call"
                        ],
                        [
                            "c.matmul(t.t())",
                            "Call"
                        ],
                        [
                            "(1.0 - cmu) * c_prev + cmu * c",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1 - c1) * c + c1 * cov_pc",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * prev_cov + c1 * pc_cov + cmu * cmu_cov",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultivariateNormal_266": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(N)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_352": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['z'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_353": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['sample'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_378": {
                "variable": {
                    "value": "cmu_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bdz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ],
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ],
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weights.diag_embed()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "symeig_384": {
                "variable": {
                    "value": "(d, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(t, weights.diag_embed())",
                            "Call"
                        ],
                        [
                            "c.matmul(t.t())",
                            "Call"
                        ],
                        [
                            "(1.0 - cmu) * c_prev + cmu * c",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1 - c1) * c + c1 * cov_pc",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * prev_cov + c1 * pc_cov + cmu * cmu_cov",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_450": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['z'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_451": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['sample'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_476": {
                "variable": {
                    "value": "cmu_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bdz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ],
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ],
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weights.diag_embed()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "symeig_482": {
                "variable": {
                    "value": "(d, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(t, weights.diag_embed())",
                            "Call"
                        ],
                        [
                            "c.matmul(t.t())",
                            "Call"
                        ],
                        [
                            "(1.0 - cmu) * c_prev + cmu * c",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1 - c1) * c + c1 * cov_pc",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * prev_cov + c1 * pc_cov + cmu * cmu_cov",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_562": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['z'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_563": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['sample'] for g in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_606": {
                "variable": {
                    "value": "cmu_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bdz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ],
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ],
                        [
                            "b.matmul(d).matmul(z.t())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weights.diag_embed()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "symeig_612": {
                "variable": {
                    "value": "(d, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(t, weights.diag_embed())",
                            "Call"
                        ],
                        [
                            "c.matmul(t.t())",
                            "Call"
                        ],
                        [
                            "(1.0 - cmu) * c_prev + cmu * c",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1 - c1) * c + c1 * cov_pc",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * c_prev + c1 * cov_pc + cmu * cmu_cov",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(b.matmul(d), b.matmul(d).T)",
                            "Call"
                        ],
                        [
                            "(1.0 - c1 - cmu) * prev_cov + c1 * pc_cov + cmu * cmu_cov",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_631": {
                "variable": {
                    "value": "selected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['parameters'] for g in ranked_results[0:fast_cma.mu]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_652": {
                "variable": {
                    "value": "selected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g['parameters'] for g in ranked_results[0:n_cma.mu]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "symeig_653": {
                "variable": {
                    "value": "(d, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "n_cma.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_677": {
                "input": {
                    "value": "weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "torch.flip(weights, dims=(0,)) / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "torch.flip(weights, dims=(0,)) / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([log(mu + 0.5)]) - torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.randn(knn.parameter_count(policy))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "policy_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "knn.flatten(policy)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_21": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_38": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_118": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "mu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "floor(mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_119": {
                "input": {
                    "value": "weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "torch.flip(weights, dims=(0,)) / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "torch.flip(weights, dims=(0,)) / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([log(mu + 0.5)]) - torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.randn(knn.parameter_count(policy))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_176": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "mu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "floor(mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_177": {
                "input": {
                    "value": "weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "torch.flip(weights, dims=(0,)) / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "torch.flip(weights, dims=(0,)) / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "log(mu + 0.5) + torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([log(mu + 0.5)]) - torch.linspace(start=1, end=mu, steps=floor(mu)).log()",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.randn(knn.parameter_count(policy))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_302": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "mu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "floor(mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_399": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "mu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "floor(mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_510": {
                "data": {
                    "value": "[log(mu + 0.5)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_510": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "mu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ],
                        [
                            "samples / 2",
                            "BinOp"
                        ],
                        [
                            "floor(mu)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "floor(mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_266": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xrange",
                            "Name"
                        ],
                        [
                            "xrange",
                            "Name"
                        ]
                    ]
                }
            },
            "eye_266": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xrange",
                            "Name"
                        ],
                        [
                            "xrange",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_284": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xrange",
                            "Name"
                        ],
                        [
                            "xrange",
                            "Name"
                        ]
                    ]
                }
            },
            "eye_284": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xrange",
                            "Name"
                        ],
                        [
                            "xrange",
                            "Name"
                        ]
                    ]
                }
            },
            "exp_493": {
                "input": {
                    "value": "0.5 * (torch.cos(2 * pi * x) + torch.cos(2 * pi * y))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_492": {
                "input": {
                    "value": "-0.2 * torch.sqrt(0.5 * (x ** 2 + y ** 2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_91": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_492": {
                "input": {
                    "value": "0.5 * (x ** 2 + y ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_493": {
                "input": {
                    "value": "2 * pi * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_dataset.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SquareDataset(size=10)",
                            "Call"
                        ],
                        [
                            "AtariDataset('Pong-v0', l, d.pong_prepro, transforms=T.Compose([T.ToTensor(), T.ToPILImage()]), end_trajectory=if_done_or_nonzero_reward)",
                            "Call"
                        ],
                        [
                            "d.MapperDataset(16, 16, 3, 10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_gl_hack.py": {
        "torch": {
            "no_grad_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_higgham.py": {
        "torch": {
            "no_grad_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_12": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(range(2, 100))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(range(2, 100))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_patches.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils.py": {
        "torch": {
            "linspace_26": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t, t * 3, t * 5, t * 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_28": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "min(x.size(0), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_44": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "640",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "640",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/tests.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "heatmap_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_57": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 100, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_127": {
                "variable": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(k, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_141": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "MF.gaussian_like_function(kp, 5, 5)",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "MF.gaussian_like_function(kp, 5, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_183": {
                "variable": {
                    "value": "top_marginal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "plot_keypoints_on_image(kp[0], hm[0])",
                            "Call"
                        ],
                        [
                            "test_pattern(16, 32, dim=0)",
                            "Call"
                        ],
                        [
                            "plot_keypoints_on_image(k[0], img)",
                            "Call"
                        ],
                        [
                            "np.random.random((4, 4))",
                            "Call"
                        ],
                        [
                            "torch.cat(images, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.cat(images, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_184": {
                "variable": {
                    "value": "side_marginal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "plot_keypoints_on_image(kp[0], hm[0])",
                            "Call"
                        ],
                        [
                            "test_pattern(16, 32, dim=0)",
                            "Call"
                        ],
                        [
                            "plot_keypoints_on_image(k[0], img)",
                            "Call"
                        ],
                        [
                            "np.random.random((4, 4))",
                            "Call"
                        ],
                        [
                            "torch.cat(images, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.cat(images, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_257": {
                "variable": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_262": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "MF.gaussian_like_function(kp, 5, 5)",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "knn.SpatialSoftmax()",
                            "Call"
                        ],
                        [
                            "MF.gaussian_like_function(kp, 5, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_269": {
                "variable": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_274": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "l2(activation)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_289": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_302": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "affine_grid_307": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]).expand(1, -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grid_sample_309": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "bad_monkey()",
                            "Call"
                        ],
                        [
                            "bad_monkey()",
                            "Call"
                        ],
                        [
                            "bad_monkey()",
                            "Call"
                        ],
                        [
                            "bad_monkey()",
                            "Call"
                        ],
                        [
                            "bad_monkey(2)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, x.shape)",
                            "Call"
                        ],
                        [
                            "tps_grid(theta, c, x.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_318": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0], [1.0, 0], [1.0, 1], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_327": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_336": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "bad_monkey()",
                            "Call"
                        ],
                        [
                            "bad_monkey()",
                            "Call"
                        ],
                        [
                            "bad_monkey()",
                            "Call"
                        ],
                        [
                            "bad_monkey()",
                            "Call"
                        ],
                        [
                            "bad_monkey(2)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, x.shape)",
                            "Call"
                        ],
                        [
                            "tps_grid(theta, c, x.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_357": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_381": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, value, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "st",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "set",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_378": {
                "variable": {
                    "value": "st",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "set",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "k",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ss(heatmap(batch=batch, channels=channels))",
                            "Call"
                        ],
                        [
                            "ss(heatmap)",
                            "Call"
                        ],
                        [
                            "ss(heatmap_batch)",
                            "Call"
                        ],
                        [
                            "ss(h)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0.5, 0.8]).expand(1, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.empty(1, 5, 2).uniform_(0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_138": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_176": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_176": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_178": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "permute_178": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_178": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "transporter.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "train_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False if args.device == 'cpu' else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "test_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False if args.device == 'cpu' else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transporter_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_16": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_60": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "criterion(x_t, x_, loss_mask)",
                            "Call"
                        ],
                        [
                            "criterion(x_t, x_, loss_mask)",
                            "Call"
                        ],
                        [
                            "(x - x_) ** 2",
                            "BinOp"
                        ],
                        [
                            "loss * loss_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}