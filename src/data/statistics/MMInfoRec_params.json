{
    "dataset.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "user_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample[0] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample[1] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample[2] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample[3] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample[4] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "att_att_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample[5] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "user_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([sample[0] for sample in batch])",
                            "Call"
                        ],
                        [
                            "index",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "answer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([sample[1] for sample in batch])",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "items[-2]",
                            "Subscript"
                        ],
                        [
                            "items[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([sample[2] for sample in batch])",
                            "Call"
                        ],
                        [
                            "items[:-2]",
                            "Subscript"
                        ],
                        [
                            "items[:-2]",
                            "Subscript"
                        ],
                        [
                            "items[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids[-self.max_len:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "len(input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([sample[4] for sample in batch])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "att_att_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([sample[5] for sample in batch])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.item_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.item_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.attribute_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.attribute_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_seq_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * args.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.item_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.loss_fuse_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.att_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.res_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_28": {
                "variable": {
                    "value": "att_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nhead": {
                    "value": "args.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoder_30": {
                "variable": {
                    "value": "self.g_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "att_encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(args.hidden_size, args.num_attention_heads, args.hidden_size, args.attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "args.num_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_37": {
                "variable": {
                    "value": "item_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "self.ar_att_hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nhead": {
                    "value": "args.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "self.ar_att_hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoder_40": {
                "variable": {
                    "value": "self.ar_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "item_encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(self.ar_att_hidden_sz, args.num_attention_heads, self.ar_att_hidden_sz, args.attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "args.num_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_43": {
                "variable": {
                    "value": "self.ar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.ar_att_hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "self.all_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.all_att",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "self.all_att_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.all_att_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.mb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.ar_att_hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.mb_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ar_att_hidden_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.mem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_64": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.mb_dp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.mb_dp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_67": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_127": {
                "variable": {
                    "value": "padded_seq_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seq_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[seq[:-1] for seq in indi_seq]",
                            "ListComp"
                        ],
                        [
                            "indi_seq",
                            "Name"
                        ]
                    ]
                }
            },
            "pad_sequence_131": {
                "variable": {
                    "value": "padded_batch_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[ids[:-1] for ids in indi_ids]",
                            "ListComp"
                        ],
                        [
                            "indi_ids",
                            "Name"
                        ]
                    ]
                }
            },
            "log_303": {
                "variable": {
                    "value": "nominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.exp(self.t * sim_score) * ((target_mask == 1) + 1e-24)).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_304": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.t * sim_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indi[1:] for indi in indi_ids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mm_202": {
                "variable": {
                    "value": "sim_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(pred, dim=1).squeeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.item_dropout(fused_embedding).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "*size": {
                    "value": "(self.args.num_hidden_layers_gru, batch_size, self.ar_att_hidden_sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "cat_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unpadded_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[seq[:l - 1] for (seq, l) in zip(sequence_output, seq_len)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "fused_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fused_embedding, self.fusing_embedding(item_embeddings, att_embeddings, att_att_mask))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_212": {
                "variable": {
                    "value": "recommend_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_230": {
                "variable": {
                    "value": "fused_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item_embeddings, (att_embeddings * att_att_mask[:, 1:].unsqueeze(dim=-1)).sum(dim=1) / (att_att_mask[:, 1:].sum(dim=1) + 1e-24).unsqueeze(dim=-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "self.all_fused_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_item_embeddings, (all_att_embeddings * self.all_att_mask.to(self.item_embeddings.weight.device)[:, 1:].unsqueeze(dim=-1)).sum(dim=1) / (self.all_att_mask.to(self.item_embeddings.weight.device)[:, 1:].sum(dim=1) + 1e-24).unsqueeze(dim=-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.cat(unpadded_out).unsqueeze(dim=0)]",
                            "List"
                        ],
                        [
                            "[mem_read.unsqueeze(dim=0)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_202": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "tensors": {
                    "value": "target_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[-1 * torch.ones(input_ids.shape[0] - len(user_id), input_ids.shape[0]).to(device) for _ in range(self.args.pred_step)]",
                            "ListComp"
                        ],
                        [
                            "repeated_mask",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_237": {
                "variable": {
                    "value": "fused_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item_embeddings, self.g_enc(torch.cat([torch.unsqueeze(item_embeddings, dim=1), att_embeddings], dim=1).transpose(0, 1), src_key_padding_mask=att_att_mask.bool())[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "self.all_fused_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_item_embeddings, self.g_enc(torch.cat([torch.unsqueeze(all_item_embeddings, dim=1), all_att_embeddings], dim=1).transpose(0, 1), src_key_padding_mask=self.all_att_mask.to(self.item_embeddings.weight.device).bool())[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_78": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "unpadded_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[seq[:l - 1] for (seq, l) in zip(sequence_output, seq_len)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "unsqueeze_147": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "input_ids.shape[0] - len(user_id)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "input_ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_225": {
                "tensors": {
                    "value": "[torch.unsqueeze(item_embeddings, dim=1), att_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_225": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "[torch.unsqueeze(all_item_embeddings, dim=1), all_att_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_251": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_184": {
                "variable": {
                    "value": "pos_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids == input_ids[cur + j + i + s + 1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "exp_303": {
                "input": {
                    "value": "self.t * sim_score",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_225": {
                "input": {
                    "value": "item_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embeddings(input_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "[torch.unsqueeze(item_embeddings, dim=1), att_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_238": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_251": {
                "input": {
                    "value": "all_item_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embeddings.weight",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "tensors": {
                    "value": "[torch.unsqueeze(all_item_embeddings, dim=1), all_att_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_265": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_238": {
                "input": {
                    "value": "item_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embeddings(input_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_265": {
                "input": {
                    "value": "all_item_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.item_embeddings.weight",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules.py": {
        "torch": {
            "Parameter_36": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_53": {
                "variable": {
                    "value": "self.item_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.item_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_54": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_seq_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_63": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.out_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_146": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_177": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(args.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_22": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_43": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_119": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "run_mminforec.py": {
        "torch": {
            "RandomSampler_107": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MMInfoRecDataset(args, user_seq, args.max_att_num, data_type='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MMInfoRecDataset(args, user_seq, args.max_att_num, data_type='train')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_111": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MMInfoRecDataset(args, user_seq, args.max_att_num, data_type='valid')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MMInfoRecDataset(args, user_seq, args.max_att_num, data_type='valid')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_115": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MMInfoRecDataset(args, user_seq, args.max_att_num, data_type='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MMInfoRecDataset(args, user_seq, args.max_att_num, data_type='test')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "StepLR_122": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "trainer.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "args.dc_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.dc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_153": {
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if self.cuda_condition else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.args.adam_beta1, self.args.adam_beta2)",
                            "Tuple"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_39": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_102": {
                "variable": {
                    "value": "pos_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos * seq_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "neg_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg * seq_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "indi_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indi_seq[:indi_len] for (indi_seq, indi_len) in zip(seq_out, seq_len)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indi_tar[:indi_len] for (indi_tar, indi_len) in zip(pos_ids, seq_len)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mm_115": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indi_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([indi_seq[:indi_len] for (indi_seq, indi_len) in zip(seq_out, seq_len)])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.model.item_embeddings.weight[1:].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_122": {
                "variable": {
                    "value": "test_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_item_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.item_embeddings(test_neg_sample)",
                            "Call"
                        ],
                        [
                            "self.model.item_embeddings.weight",
                            "Attribute"
                        ],
                        [
                            "self.model.all_fused_embedding",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "seq_out.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "test_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "variable": {
                    "value": "rating_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "test_item_emb.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "rating_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "test_item_emb.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "self.model.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "-torch.log(torch.sigmoid(pos_logits) + 1e-24) * istarget - torch.log(1 - torch.sigmoid(neg_logits) + 1e-24) * istarget",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "istarget",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pos_ids > 0).view(pos_ids.size(0) * self.model.args.max_seq_length).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "1 - torch.sigmoid(neg_logits) + 1e-24",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "data": {
                    "value": "self.args.train_matrix[batch_user_index].toarray() > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_106": {
                "input": {
                    "value": "torch.sigmoid(pos_logits) + 1e-24",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "input": {
                    "value": "pos_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(pos * seq_emb, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_107": {
                "input": {
                    "value": "neg_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(neg * seq_emb, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_87": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}