{
    "data_prep/data_prep_cifar.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./../../datasets/cifar100', train=True, download=args.download == 'True', transform=transform_tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root='./../../datasets/cifar100', train=False, download=args.download == 'True', transform=transform_tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.classifier_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes * num_tasks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.linear_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes * num_tasks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_146": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_30": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "input": {
                    "value": "self.classifier_list.weight[num_classes * tid[i]:num_classes * (tid[i] + 1), :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "out[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "input": {
                    "value": "self.linear_list.weight[num_classes * tid[i]:num_classes * (tid[i] + 1), :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "out[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_52": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "opt_based.py": {
        "torch": {
            "CrossEntropyLoss_120": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "int(args.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root='./../datasets/' + dataset + '/' + split_pattern + '/task_' + str(task_id) + '/train/', transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root='./../datasets/' + dataset + '/' + split_pattern + '/task_' + str(task_id) + '/test/', transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_163": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Vanilla_cnn(num_classes=num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_414": {
                "variable": {
                    "value": "net_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "net_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cl_root + '{mod_name}_{data_name}_train_{ttype}_lr_{lr}_tasks_{ntasks}_taskid_{tid}_seed_{sid}.pth'.format(mod_name=model_name, data_name=dataset, ttype=train_type, lr=lr_method, ntasks=num_tasks, tid=tid, sid=int(args.seed))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_453": {
                "variable": {
                    "value": "net_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pretrained/vanilla_cnn_temp_1.0_seed_0_plain.pth'",
                            "str"
                        ],
                        [
                            "'pretrained/resnet-18_temp_1.0_seed_0.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Vanilla_cnn_multiclassifier(num_classes=num_classes, num_tasks=num_tasks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_175": {
                "n": {
                    "value": "buffer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.buffer_size)",
                            "Call"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_200": {
                "variable": {
                    "value": "g_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mod.weight.grad.data.reshape(mod.weight.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_201": {
                "variable": {
                    "value": "p_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mod.weight.data.reshape(mod.weight.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_202": {
                "variable": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(mod.weight.grad.data.reshape(mod.weight.shape[0], -1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_norms + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_216": {
                "variable": {
                    "value": "ref_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "buffer_size - batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_272": {
                "variable": {
                    "value": "ref_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "buffer_size - batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_321": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'net': net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "cl_root + '{mod_name}_{data_name}_train_{ttype}_lr_{lr}_tasks_{ntasks}_taskid_{tid}_seed_{sid}.pth'.format(mod_name=model_name, data_name=dataset, ttype=train_type, lr=lr_method, ntasks=num_tasks, tid=task_id, sid=int(args.seed))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_167": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ResNet18(num_classes=num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_387": {
                "tensors": {
                    "value": "(X, X1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_397": {
                "variable": {
                    "value": "gram_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.module.features[0:lind + 1](X.to(device)).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_curr.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_400": {
                "variable": {
                    "value": "gram_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_base.module.features[0:lind + 1](X.to(device)).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_orig.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_473": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_curr.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_478": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_curr.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd_cl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_169": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ResNet18_multiclassifier(num_classes=num_classes, num_tasks=num_tasks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "buffer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.buffer_size)",
                            "Call"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_204": {
                "input": {
                    "value": "p_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(mod.weight.data.reshape(mod.weight.shape[0], -1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_norms + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_225": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_283": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_306": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_333": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reg_based.py": {
        "torch": {
            "CrossEntropyLoss_147": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "int(args.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root='./../datasets/' + dataset + '/' + split_pattern + '/task_' + str(task_id) + '/train/', transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root='./../datasets/' + dataset + '/' + split_pattern + '/task_' + str(task_id) + '/test/', transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_217": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Vanilla_cnn(num_classes=num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_630": {
                "variable": {
                    "value": "net_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "net_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cl_root + '{mod_name}_{data_name}_train_{ttype}_measure_{measure}_lr_{lr}_reg_{reg}_tasks_{ntasks}_taskid_{tid}_seed_{sid}.pth'.format(mod_name=model_name, data_name=dataset, ttype=train_type, measure=saliency_measure, lr=lr_method, reg=reg_constant, ntasks=num_tasks, tid=tid, sid=int(args.seed))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_681": {
                "variable": {
                    "value": "net_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pretrained/vanilla_cnn_temp_1.0_seed_0_plain.pth'",
                            "str"
                        ],
                        [
                            "'pretrained/resnet-18_temp_1.0_seed_0.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "DataParallel_219": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ResNet18(num_classes=num_classes, skipinit=skipinit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_231": {
                "variable": {
                    "value": "g_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mod.weight.grad.data.reshape(mod.weight.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_232": {
                "variable": {
                    "value": "p_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mod.weight.data.reshape(mod.weight.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_233": {
                "variable": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(mod.weight.grad.data.reshape(mod.weight.shape[0], -1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_norms + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_518": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'net': net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "cl_root + '{mod_name}_{data_name}_train_{ttype}_measure_{measure}_lr_{lr}_reg_{reg}_tasks_{ntasks}_taskid_{tid}_seed_{sid}.pth'.format(mod_name=model_name, data_name=dataset, ttype=train_type, measure=saliency_measure, lr=lr_method, reg=reg_constant, ntasks=num_tasks, tid=task_id, sid=int(args.seed))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_527": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_589": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_586": {
                "tensors": {
                    "value": "(X, X1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_671": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_672": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_673": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_699": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_curr.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_704": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_curr.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd_cl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_597": {
                "variable": {
                    "value": "gram_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.module.features[0:lind + 1](X.to(device)).reshape(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "mod(f_curr).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_curr.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_600": {
                "variable": {
                    "value": "gram_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_base.module.features[0:lind + 1](X.to(device)).reshape(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "mod_base(f_orig).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_orig.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_613": {
                "variable": {
                    "value": "gram_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.module.features[0:lind + 1](X.to(device)).reshape(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "mod(f_curr).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_curr.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_616": {
                "variable": {
                    "value": "gram_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_base.module.features[0:lind + 1](X.to(device)).reshape(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "mod_base(f_orig).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_orig.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_701": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_curr.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_706": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_curr.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd_cl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_235": {
                "input": {
                    "value": "p_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(mod.weight.data.reshape(mod.weight.shape[0], -1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_norms + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_759": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_362": {
                "input": {
                    "value": "next_g * (next_p - start_p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_458": {
                "input": {
                    "value": "next_g * (next_p - start_p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_364": {
                "input": {
                    "value": "next_g * (next_p - start_p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_460": {
                "input": {
                    "value": "next_g * (next_p - start_p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "saliency_estimator.py": {
        "torch": {
            "CrossEntropyLoss_8": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_60": {
                "variable": {
                    "value": "gradsH",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(outputs, targets.to(device))",
                            "Call"
                        ],
                        [
                            "outputs.norm().pow(2)",
                            "Call"
                        ],
                        [
                            "outputs.norm().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "base_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params(net)",
                            "Call"
                        ],
                        [
                            "model_params(net.module.features)",
                            "Call"
                        ],
                        [
                            "model_params(net)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_78": {
                "variable": {
                    "value": "gradsH",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(outputs, targets.to(device))",
                            "Call"
                        ],
                        [
                            "outputs.norm().pow(2)",
                            "Call"
                        ],
                        [
                            "outputs.norm().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "base_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params(net)",
                            "Call"
                        ],
                        [
                            "model_params(net.module.features)",
                            "Call"
                        ],
                        [
                            "model_params(net)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_96": {
                "variable": {
                    "value": "gradsH",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(outputs, targets.to(device))",
                            "Call"
                        ],
                        [
                            "outputs.norm().pow(2)",
                            "Call"
                        ],
                        [
                            "outputs.norm().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "base_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params(net)",
                            "Call"
                        ],
                        [
                            "model_params(net.module.features)",
                            "Call"
                        ],
                        [
                            "model_params(net)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_like_164": {
                "input": {
                    "value": "l_params[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_158": {
                "input": {
                    "value": "l_params[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "train_cifar10.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./../datasets/cifar10', train=True, download=args.download == 'True', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./../datasets/cifar10', train=False, download=args.download == 'True', transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "int(args.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Vanilla_cnn(num_classes=10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'net': net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "pretrained_root + 'vanilla_cnn_seed_' + args.seed + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}