{
    "causalnlp/analyzers.py": {
        "sklearn": {
            "CountVectorizer_258": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "max_df": {
                    "value": "max_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "min_df": {
                    "value": "min_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "max_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                },
                "stop_words": {
                    "value": "stop_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'english'",
                            "Method Argument"
                        ],
                        [
                            "'english'",
                            "Method Argument"
                        ]
                    ]
                },
                "token_pattern": {
                    "value": "token_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEFAULT_TOKEN_PATTERN",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ngram_range": {
                    "value": "ngram_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_kwargs.get('ngram_range', (1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "LatentDirichletAllocation_269": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_topics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(400, estimated)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "lda_max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "learning_method": {
                    "value": "lda_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'online'",
                            "Method Argument"
                        ],
                        [
                            "'online'",
                            "Method Argument"
                        ]
                    ]
                },
                "learning_offset": {
                    "value": "50.0",
                    "type": "float",
                    "possible_values": []
                },
                "doc_topic_prior": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_kwargs.get('alpha', 5.0 / n_topics)",
                            "Call"
                        ]
                    ]
                },
                "topic_word_prior": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_kwargs.get('beta', 0.01)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "self.verbose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NMF_275": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_topics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(400, estimated)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "lda_max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "self.verbose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "nmf_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_kwargs.get('nmf_alpha', 0)",
                            "Call"
                        ]
                    ]
                },
                "l1_ratio": {
                    "value": "l1_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_kwargs.get('l1_ratio', 0)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "causalnlp/core/causalbert.py": {
        "sklearn": {
            "LogisticRegression_46": {
                "variable": {
                    "value": "log_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_65": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_66": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_91": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.vocab_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleDict_94": {
                "variable": {
                    "value": "self.Q_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.g_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size + self.num_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pooled_output, C_bow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_169": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_316": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*data",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataLoader_318": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.tensor(out[x]) for x in ['W_ids', 'W_len', 'W_mask', 'C', 'T', 'Y'])",
                            "GeneratorExp"
                        ],
                        [
                            "TensorDataset(*data)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(data) if sampler == 'random' else SequentialSampler(data)",
                            "IfExp"
                        ],
                        [
                            "'random'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.Q_cls[%d % T]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.hidden_size + self.num_labels, 200)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_113": {
                "variable": {
                    "value": "target_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(mask_class(W_len.shape).uniform_() * W_len.float()).long() + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "erf_52": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "data": {
                    "value": "out[x]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RandomSampler_317": {
                "data_source": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.tensor(out[x]) for x in ['W_ids', 'W_len', 'W_mask', 'C', 'T', 'Y'])",
                            "GeneratorExp"
                        ],
                        [
                            "TensorDataset(*data)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_317": {
                "data_source": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.tensor(out[x]) for x in ['W_ids', 'W_len', 'W_mask', 'C', 'T', 'Y'])",
                            "GeneratorExp"
                        ],
                        [
                            "TensorDataset(*data)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "config.hidden_size + self.num_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_114": {
                "*size": {
                    "value": "W_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "causalnlp/core/causalinference.py": {
        "sklearn": {
            "train_test_split_373": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.x.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.y.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_pct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "314",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomizedSearchCV_404": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learner_type(max_depth=-1, random_state=random_state, silent=True, metric='None', n_jobs=4, n_estimators=5000)",
                            "Call"
                        ]
                    ]
                },
                "param_distributions": {
                    "value": "param_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'num_leaves': sp_randint(6, 750), 'min_child_samples': sp_randint(20, 500), 'min_child_weight': [1e-05, 0.001, 0.01, 0.1, 1, 10.0, 100.0, 1000.0, 10000.0], 'subsample': sp_uniform(loc=0.2, scale=0.8), 'colsample_bytree': sp_uniform(loc=0.4, scale=0.6), 'reg_alpha': [0, 0.1, 1, 2, 5, 7, 10, 50, 100], 'reg_lambda': [0, 0.1, 1, 5, 10, 20, 50, 100]}",
                            "Dict"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_HP_points_to_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "scoring": {
                    "value": "scoring",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'roc_auc' if scoring is None else scoring",
                            "IfExp"
                        ],
                        [
                            "'neg_mean_squared_error' if scoring is None else scoring",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "refit": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "314",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogisticRegression_143": {
                "max_iter": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "causalnlp/key_driver_analysis.py": {
        "sklearn": {
            "train_test_split_83": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.x.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.y.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_pct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "causalnlp/meta/explainer.py": {
        "sklearn": {
            "train_test_split_120": {
                "variable": {
                    "value": "(self.X_train, self.X_test, self.tau_train, self.tau_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permutation_importance_169": {
                "estimator": {
                    "value": "perm_estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.models_tau[group]",
                            "Subscript"
                        ]
                    ]
                },
                "X": {
                    "value": "self.X_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau_test[:, idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "causalnlp/meta/propensity.py": {
        "sklearn": {
            "LogisticRegressionCV_119": {
                "**kwargs": {
                    "value": "kwargs",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "LogisticRegression_130": {
                "**kwargs": {
                    "value": "kwargs",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "train_test_split_181": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "stop_val_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StratifiedKFold_110": {
                "n_splits": {
                    "value": "self.model_kwargs.pop('n_fold') if 'n_fold' in self.model_kwargs else 4",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.model_kwargs.get('random_state', 42)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_94": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "propensity_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "causalnlp/meta/rlearner.py": {
        "sklearn": {
            "KFold_84": {
                "variable": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_fold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_val_predict_125": {
                "variable": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.model_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pd_to_np(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_val_predict_500": {
                "variable": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.model_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pd_to_np(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_val_predict_392": {
                "estimator": {
                    "value": "self.model_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pd_to_np(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "method": {
                    "value": "predict_proba",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "train_test_split_517": {
                "variable": {
                    "value": "(X_train_filt, X_test_filt, y_train_filt, y_test_filt, yhat_train_filt, yhat_test_filt, w_train, w_test, p_train_filt, p_test_filt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "yhat_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_4": {
                    "value": "p_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "causalnlp/meta/slearner.py": {
        "sklearn": {
            "DummyRegressor_55": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "causalnlp/meta/tlearner.py": {
        "sklearn": {
            "MLPRegressor_385": {
                "hidden_layer_sizes": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            }
        }
    },
    "causalnlp/meta/utils.py": {
        "sklearn": {
            "log_loss_276": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "check_random_state_399": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_422": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NearestNeighbors_432": {
                "variable": {
                    "value": "matching_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "self.ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "causalnlp/preprocessing.py": {
        "sklearn": {
            "TfidfVectorizer_141": {
                "variable": {
                    "value": "self.tv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_df": {
                    "value": "min_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "max_df": {
                    "value": "max_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "ngram_range": {
                    "value": "ngram_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stop_words": {
                    "value": "stop_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'english'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}