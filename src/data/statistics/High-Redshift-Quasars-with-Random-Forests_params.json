{
    "3_apply_models.py": {
        "sklearn": {}
    },
    "random_forest.py": {
        "sklearn": {
            "RandomForestClassifier_179": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_221": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_329": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "robust_scale_426": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(df[features])",
                            "Call"
                        ],
                        [
                            "np.array(df[features])",
                            "Call"
                        ],
                        [
                            "preprocessing.robust_scale(X)",
                            "Call"
                        ],
                        [
                            "build_matrix(df, features)",
                            "Call"
                        ],
                        [
                            "scaler.transform(X)",
                            "Call"
                        ],
                        [
                            "scaler.transform(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_428": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rand_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_500": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "RobustScaler_589": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_606": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "RobustScaler_660": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_673": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rand_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_683": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "train_test_split_764": {
                "variable": {
                    "value": "(stars_train, stars_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_stars",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rand_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "train_test_split_767": {
                "variable": {
                    "value": "(qsos_train, qsos_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_qsos",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rand_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GridSearchCV_119": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "RandomForestClassifier(random_state=rand_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "'%s' % score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "confusion_matrix_372": {
                "variable": {
                    "value": "cnf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true.astype('str')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.astype('str')",
                            "Call"
                        ],
                        [
                            "clf.predict(X_pred)",
                            "Call"
                        ],
                        [
                            "clf.predict(X_pred)",
                            "Call"
                        ],
                        [
                            "reg.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "GridSearchCV_438": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "RandomForestRegressor(random_state=rand_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "scoring": {
                    "value": "'%s' % score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "classification_report_360": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true.astype('str')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.astype('str')",
                            "Call"
                        ],
                        [
                            "clf.predict(X_pred)",
                            "Call"
                        ],
                        [
                            "clf.predict(X_pred)",
                            "Call"
                        ],
                        [
                            "reg.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomForestClassifier_119": {
                "random_state": {
                    "value": "rand_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "classification_report_133": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true.astype('str')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.astype('str')",
                            "Call"
                        ],
                        [
                            "clf.predict(X_pred)",
                            "Call"
                        ],
                        [
                            "clf.predict(X_pred)",
                            "Call"
                        ],
                        [
                            "reg.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomForestRegressor_438": {
                "random_state": {
                    "value": "rand_state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "result_analysis/ml_analysis.py": {
        "sklearn": {
            "precision_recall_curve_261": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "y_prob_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "pos_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_307": {
                "variable": {
                    "value": "(fpr_rf, tpr_rf, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "QSO",
                    "type": "str",
                    "possible_values": []
                }
            },
            "auc_310": {
                "variable": {
                    "value": "auc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr_rf",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr_rf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "explained_variance_score_35": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "multioutput": {
                    "value": "raw_values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_absolute_error_38": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "multioutput": {
                    "value": "raw_values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_41": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "multioutput": {
                    "value": "raw_values",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "training_data_preprocessing/ml_quasar_sample.py": {
        "sklearn": {
            "train_test_split_383": {
                "variable": {
                    "value": "(stars_train, stars_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_stars",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rand_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "train_test_split_386": {
                "variable": {
                    "value": "(qsos_train, qsos_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_qsos",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rand_state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}