{
    "Layers.py": {
        "tensorflow": {
            "mean_59": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_61": {
                "variable": {
                    "value": "squ_diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "mean_sq_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "squ_diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.square(inputs - mean)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_67": {
                "variable": {
                    "value": "stdev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_sq_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.mean(squ_diffs, axis=0, keepdims=True)",
                            "Call"
                        ],
                        [
                            "mean_sq_diff + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_69": {
                "variable": {
                    "value": "mean_pix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "stdev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.sqrt(mean_sq_diff)",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_71": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_73": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_pix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.mean(stdev, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(shape[0], shape[1], shape[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concatenate_75": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[inputs, output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_107": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs ** 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_111": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.mean(values, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "mean_values + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_128": {
                "a": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "UpSampling2D_151": {
                "variable": {
                    "value": "self.upspl1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_152": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_154": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_155": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_157": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_160": {
                "variable": {
                    "value": "self.conv_last1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_161": {
                "variable": {
                    "value": "self.act_last1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_162": {
                "variable": {
                    "value": "self.conv_last2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_163": {
                "variable": {
                    "value": "self.act_last2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_164": {
                "variable": {
                    "value": "self.RGB_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_214": {
                "variable": {
                    "value": "self.input_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_215": {
                "variable": {
                    "value": "self.input_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_219": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_221": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_227": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_229": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AveragePooling2D_232": {
                "variable": {
                    "value": "self.dnspl1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Perceptual_loss_VGG.py": {
        "tensorflow": {
            "VGG19_37": {
                "variable": {
                    "value": "vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.load_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "self.input_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_40": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "[vgg.input]",
                    "type": "List",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vgg.layers[i].output for i in self.layers_to_extract]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "ProGANVanilla.py": {
        "tensorflow": {
            "Conv2D_44": {
                "variable": {
                    "value": "self.input_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_45": {
                "variable": {
                    "value": "self.input_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AveragePooling2D_46": {
                "variable": {
                    "value": "self.input_dnsmpl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_56": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "leakyrelu_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_60": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "leakyrelu_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Flatten_65": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_66": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_173": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_174": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.leakyrelu_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_177": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_178": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.leakyrelu_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpSampling2D_185": {
                "variable": {
                    "value": "self.upspl_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_188": {
                "variable": {
                    "value": "self.conv_last1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_189": {
                "variable": {
                    "value": "self.act_last1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.leakyrelu_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_191": {
                "variable": {
                    "value": "self.conv_last2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_192": {
                "variable": {
                    "value": "self.act_last2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.leakyrelu_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_196": {
                "variable": {
                    "value": "self.RGB_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "normal_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(16, 8, 8, 3)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "BinaryCrossentropy_130": {
                "variable": {
                    "value": "gen_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_131": {
                "variable": {
                    "value": "discrim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "beta_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "beta_2": {
                    "value": "beta_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "float"
                        ]
                    ]
                }
            },
            "Mean_140": {
                "variable": {
                    "value": "gen_train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Accuracy_141": {
                "variable": {
                    "value": "gen_train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_142": {
                "variable": {
                    "value": "dis_train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dis_train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_143": {
                "variable": {
                    "value": "dis_train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dis_train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_146": {
                "variable": {
                    "value": "gen_test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Accuracy_147": {
                "variable": {
                    "value": "gen_test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_test_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_148": {
                "variable": {
                    "value": "dis_test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dis_test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_149": {
                "variable": {
                    "value": "dis_test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dis_test_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "create_file_writer_160": {
                "variable": {
                    "value": "gen_train_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "gen_train_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../logs/gradient_tape/' + current_time + '/gen_train'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "create_file_writer_161": {
                "variable": {
                    "value": "gen_test_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "gen_test_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../logs/gradient_tape/' + current_time + '/gen_test'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "create_file_writer_162": {
                "variable": {
                    "value": "dis_train_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "dis_train_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../logs/gradient_tape/' + current_time + '/dis_train'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "create_file_writer_163": {
                "variable": {
                    "value": "dis_test_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "dis_test_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../logs/gradient_tape/' + current_time + '/dis_test'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "create_file_writer_164": {
                "variable": {
                    "value": "image_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "../logs/gradient_tape/ + current_time + /images",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "resize_63": {
                "images": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_dict['image']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "lr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_dim",
                            "Method Argument"
                        ],
                        [
                            "lr_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradientTape_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_251": {
                "name": {
                    "value": "dis_train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dis_train_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_252": {
                "name": {
                    "value": "dis_train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dis_train_accuracy.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_270": {
                "name": {
                    "value": "gen_test_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gen_test_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_271": {
                "name": {
                    "value": "gen_test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gen_test_accuracy.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_294": {
                "name": {
                    "value": "dis_test_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dis_test_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_295": {
                "name": {
                    "value": "dis_test_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dis_test_accuracy.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_209": {
                "name": {
                    "value": "gen_train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gen_train_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epoch in range(epochs)",
                            "Call"
                        ],
                        [
                            "epoch in range(epochs)",
                            "Call"
                        ],
                        [
                            "epoch",
                            "Method Argument"
                        ],
                        [
                            "epoch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_210": {
                "name": {
                    "value": "gen_train_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gen_train_accuracy.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epoch in range(epochs)",
                            "Call"
                        ],
                        [
                            "epoch in range(epochs)",
                            "Call"
                        ],
                        [
                            "epoch",
                            "Method Argument"
                        ],
                        [
                            "epoch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "image_214": {
                "name": {
                    "value": "Generated",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "predictions / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "GROW_COUNT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "GROW_COUNT + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_215": {
                "name": {
                    "value": "high res",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "high_res_imgs / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "GROW_COUNT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "GROW_COUNT + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_216": {
                "name": {
                    "value": "low res",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "low_res_imgs / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "GROW_COUNT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "GROW_COUNT + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "util.py": {
        "tensorflow": {}
    }
}