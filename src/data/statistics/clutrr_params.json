{
    "codes/baselines/MAC/mac_nets.py": {
        "torch": {
            "bmm_71": {
                "variable": {
                    "value": "query_rep_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "query_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "query_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.transformQuestion_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_rep_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "query_rep_dim * model_config.decoder.query_ents",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.contControl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.controlProj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.controlAttn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.transformMemory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.transformKB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.combineInfo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.readAttn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_175": {
                "variable": {
                    "value": "self.memDrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "model_config.mac.dropout.memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_176": {
                "variable": {
                    "value": "self.readDrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "model_config.mac.dropout.read",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_177": {
                "variable": {
                    "value": "self.writeDrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "model_config.mac.dropout.write",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_184": {
                "variable": {
                    "value": "initMemory",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "knowledgeBase.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_185": {
                "variable": {
                    "value": "initCtrl",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "knowledgeBase.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_218": {
                "variable": {
                    "value": "attnWeight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attnLogit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.controlAttn(interactions)",
                            "Call"
                        ],
                        [
                            "self.readAttn(interactions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_253": {
                "variable": {
                    "value": "attnWeight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attnLogit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.controlAttn(interactions)",
                            "Call"
                        ],
                        [
                            "self.readAttn(interactions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "newMemory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[info, memory]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.projQuery",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mac_size * model_config.decoder.query_ents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mac_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.transformQuestion_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_size, hidden_size) for i in range(iteration)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.transformQuestion_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "interactions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interactions, query_rep_all]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "[query_rep, enc_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_206": {
                "input": {
                    "value": "newContCtrl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.contControl(torch.cat([ctrl, query_rep], -1)).tanh()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "[mem_KB, knowledgeBase]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_246": {
                "input": {
                    "value": "curControl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_202": {
                "tensors": {
                    "value": "[ctrl, query_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "codes/baselines/bert/bert_encoder.py": {
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codes/baselines/gat/edge_gat.py": {
        "torch": {
            "Parameter_32": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, heads * out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, heads, 2 * out_channels + edge_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.edge_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels + edge_dim, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "self_loop_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_attr.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_attr, self_loop_edges]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.weight).view(-1, self.heads, self.out_channels)",
                            "Call"
                        ],
                        [
                            "self.embedding(data.x).squeeze(1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att1(x, data.edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.att2(x, data.edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "torch.cat(chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "x_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_j, edge_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "leaky_relu_85": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_100": {
                "variable": {
                    "value": "aggr_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggr_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "aggr_out.view(-1, self.heads * self.out_channels)",
                            "Call"
                        ],
                        [
                            "aggr_out.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mm(aggr_out, self.edge_update)",
                            "Call"
                        ],
                        [
                            "aggr_out + self.bias",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.edge_update",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_160": {
                "variable": {
                    "value": "chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.weight).view(-1, self.heads, self.out_channels)",
                            "Call"
                        ],
                        [
                            "self.embedding(data.x).squeeze(1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att1(x, data.edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.att2(x, data.edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "torch.cat(chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch.geo_slices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.split(x, batch.geo_slices, dim=0)",
                            "Call"
                        ],
                        [
                            "[p.unsqueeze(0) for p in chunks]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_188": {
                "variable": {
                    "value": "query_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.encoder_outputs",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.query_edge.squeeze(1).unsqueeze(2).repeat(1, 1, nodes.size(2))",
                            "Call"
                        ],
                        [
                            "step_batch.query_rep",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_195": {
                "variable": {
                    "value": "node_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.encoder_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "node_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_avg, query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(heads * out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_90": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_124": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.model_config.unique_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.model_config.unique_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(self.model_config.unique_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_130": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.model_config.unique_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.model_config.embedding.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_137": {
                "variable": {
                    "value": "self.edge_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "model_config.edge_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "model_config.edge_types",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "self.edge_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(self.model_config.edge_types)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_141": {
                "variable": {
                    "value": "self.edge_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "model_config.edge_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "model_config.graph.edge_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.weight).view(-1, self.heads, self.out_channels)",
                            "Call"
                        ],
                        [
                            "self.embedding(data.x).squeeze(1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att1(x, data.edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.att2(x, data.edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "torch.cat(chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_156": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att1(x, data.edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_157": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.weight).view(-1, self.heads, self.out_channels)",
                            "Call"
                        ],
                        [
                            "self.embedding(data.x).squeeze(1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att1(x, data.edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.att2(x, data.edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "torch.cat(chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_126": {
                "n": {
                    "value": "self.model_config.unique_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_138": {
                "n": {
                    "value": "self.model_config.edge_types",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "[x_i, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "codes/baselines/lstm/basic.py": {
        "torch": {
            "LSTM_24": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_config.embedding.dim",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "model_config.encoder.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "model_config.encoder.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).to(data.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "inp_len_sorted_nonzero_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp_len_sorted_nonzero_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.nonzero(inp_len_sorted)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inp_len_sorted_nonzero_idx).to(data.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "inp_len_sorted",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp_len_sorted",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inp_len_sorted.copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp_len_sorted).to(data.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_51": {
                "variable": {
                    "value": "data_pack",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "non_zero_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.index_select(0, inp_len_sorted_nonzero_idx)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "inp_len_sorted[inp_len_sorted_nonzero_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_53": {
                "variable": {
                    "value": "(outp, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outp.contiguous()",
                            "Call"
                        ],
                        [
                            "self.decoder2vocab(mlp_inp)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "outp_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.size(0), data.size(1), outp.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "idx_unsort",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).to(outp_l.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_94": {
                "variable": {
                    "value": "avg_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_116": {
                "variable": {
                    "value": "query_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.encoder_outputs",
                            "Attribute"
                        ],
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_123": {
                "variable": {
                    "value": "query_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.attn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.concat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.attn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "enc_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoder_outputs, hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_204": {
                "variable": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn1(enc_hid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_206": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.attn2(e1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "mlp_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query_rep.squeeze(1), emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "lstm_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[decoder_inp, query_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "[tensor[:size_mid], tensor[size_mid:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_98": {
                "input": {
                    "value": "avg_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(encoder_states, 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "avg_state.transpose(0, 1).expand(self.model_config.decoder.nlayers, -1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_138": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_139": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.encoder_outputs",
                            "Attribute"
                        ],
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_136": {
                "input": {
                    "value": "encoder_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.encoder_outputs",
                            "Attribute"
                        ],
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "emb_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.encoder_outputs",
                            "Attribute"
                        ],
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_146": {
                "variable": {
                    "value": "emb_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_max, emb_mean]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_149": {
                "input": {
                    "value": "encoder_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.encoder_outputs",
                            "Attribute"
                        ],
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codes/baselines/relation/relation_nets.py": {
        "torch": {
            "Embedding_28": {
                "variable": {
                    "value": "self.position_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "model_config.max_word_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "model_config.embedding.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_39": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch.inp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_123": {
                "variable": {
                    "value": "query_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "query_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.calculate_query(min_batch)",
                            "Call"
                        ],
                        [
                            "query.repeat(1, max_len, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(query, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_199": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb.view(B, sent_len, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_201": {
                "variable": {
                    "value": "x_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb.view(B, sent_len, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "x_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_j, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "x_full",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_i, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "sent_len_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(inp_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "sent_len_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb.view(B, sent_len, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_81": {
                "input": {
                    "value": "outp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb.view(B, sent_len, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codes/baselines/relation_rnn/relation_rnn.py": {
        "torch": {
            "Linear_69": {
                "variable": {
                    "value": "self.qkv_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.total_qkv_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_70": {
                "variable": {
                    "value": "self.qkv_layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.mem_slots_plus_input, self.total_qkv_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.attention_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.mem_size, self.mem_size)] * self.attention_mlp_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_74": {
                "variable": {
                    "value": "self.attended_memory_layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.mem_slots_plus_input, self.mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNorm_75": {
                "variable": {
                    "value": "self.attended_memory_layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[self.mem_slots_plus_input, self.mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.input_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.input_gate_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_gates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.memory_gate_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_gates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.forget_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.forget_bias, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.input_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.input_bias, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "model_config.RMC.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "init_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.eye(self.mem_slots) for _ in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_156": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qkv_transpose",
                    "type": "Name",
                    "possible_values": [
                        [
                            "qkv_reshape.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.key_size, self.key_size, self.value_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "variable": {
                    "value": "dot_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q * self.key_size ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.permute(0, 1, 3, 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(dot_product, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_227": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attended_memory_layernorm(memory + attended_memory)",
                            "Call"
                        ],
                        [
                            "self.attended_memory_layernorm2(memory + attention_mlp)",
                            "Call"
                        ],
                        [
                            "torch.tanh(memory)",
                            "Call"
                        ],
                        [
                            "self.initial_state(batch, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_250": {
                "variable": {
                    "value": "gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gate_memory + gate_inputs",
                            "BinOp"
                        ],
                        [
                            "torch.split(gates, split_size_or_sections=int(gates.shape[2] / 2), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(gates.shape[2] / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_255": {
                "variable": {
                    "value": "input_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_gate + self.input_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_256": {
                "variable": {
                    "value": "forget_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forget_gate + self.forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "memory_plus_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[memory, inputs_reshape]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "variable": {
                    "value": "self.decoder2vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, input_dim // 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_371": {
                "variable": {
                    "value": "query_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.encoder_outputs",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_378": {
                "variable": {
                    "value": "query_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "query_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "mlp_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query_rep.squeeze(1), encoder_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.mem_slots, difference)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "init_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_state, pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "self.forget_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "self.input_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_193": {
                "variable": {
                    "value": "attention_mlp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory",
                            "Name"
                        ],
                        [
                            "self.attention_mlp[i](attention_mlp)",
                            "Call"
                        ],
                        [
                            "F.relu(attention_mlp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_350": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query_rep + base_enc_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_352": {
                "in_features": {
                    "value": "input_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_config.target_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_102": {
                "n": {
                    "value": "self.mem_slots",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_299": {
                "input": {
                    "value": "next_memory",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.attend_over_memory(memory_plus_input)",
                            "Call"
                        ],
                        [
                            "next_memory[:, :-n, :]",
                            "Subscript"
                        ],
                        [
                            "input_gate * torch.tanh(next_memory)",
                            "BinOp"
                        ],
                        [
                            "next_memory + forget_gate * memory",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "codes/experiment/experiment.py": {
        "torch": {
            "device_121": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "get_device_name(device_type=config.general.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__296": {
                "parameters": {
                    "value": "experiment.model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "experiment.config.model.optimiser.clip",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_grad_norm__297": {
                "parameters": {
                    "value": "experiment.model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "experiment.config.model.optimiser.clip",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "codes/net/attention.py": {
        "torch": {
            "randn_74": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "concat_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.hidden_size * 4",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([batched_hidden, batched_encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_48": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v.repeat(batched_encoder_outputs.data.shape[0], 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(self.attn(torch.cat([batched_hidden, batched_encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_55": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_61": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(x_in, 1)[0].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_in.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_67": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SimpleSelfAttention(100)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q, k)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "input": {
                    "value": "attn_energies",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score(H, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_17": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "[batched_hidden, batched_encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_59": {
                "input": {
                    "value": "x_in",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "codes/net/base_net.py": {
        "torch": {
            "CrossEntropyLoss_26": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.model_config.dropout_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_81": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_config['save_dir'], 'best_model.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_config['save_dir'], 'model_epoch_' + str(epochs + 1) + '_timestamp_' + str(int(time())) + '.tar')",
                            "Call"
                        ],
                        [
                            "self.model_config.load_path",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Embedding_176": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.model_config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.model_config.embedding.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_191": {
                "variable": {
                    "value": "pre_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_config.model.embedding.pretrained_embedding_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_74": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epochs': epochs + 1, 'state_dict': self.state_dict(), 'optimizers': [optimizer.state_dict() for optimizer in optimizers], 'np_random_state': np.random.get_state(), 'python_random_state': random.getstate(), 'pytorch_random_state': torch.get_rng_state()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.model_config['save_dir'], 'best_model.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_config['save_dir'], 'model_epoch_' + str(epochs + 1) + '_timestamp_' + str(int(time())) + '.tar')",
                            "Call"
                        ],
                        [
                            "self.model_config.load_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_rng_state_93": {
                "new_state": {
                    "value": "checkpoint['pytorch_random_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "*args": {
                    "value": "*network_list",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "*network_list",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_232": {
                "variable": {
                    "value": "random_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding.weight.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_239": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding.weight.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_248": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "random_weights.nelement()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_253": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "random_weights.nelement()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_255": {
                "variable": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "random_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.eye(vocab_size).to(self.embedding.weight.device)",
                            "Call"
                        ],
                        [
                            "self.random_weights",
                            "Attribute"
                        ],
                        [
                            "torch.nn.init.xavier_uniform_(torch.zeros(self.embedding.weight.size()).to(self.embedding.weight.device))",
                            "Call"
                        ],
                        [
                            "random_weights.view(-1)[idx].view(random_weights.size())",
                            "Call"
                        ],
                        [
                            "random_weights.view(-1)[idx].view(random_weights.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_152": {
                "num_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_111": {
                "params": {
                    "value": "model_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_model_params()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.model_config.optimiser.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.model_config.optimiser.l2_penalty",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_148": {
                "num_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_149": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_236": {
                "*size": {
                    "value": "self.embedding.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ExponentialLR_117": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.model_config.optimiser.scheduler_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_120": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.model_config.optimiser.scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.model_config.optimiser.scheduler_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "codes/net/batch.py": {
        "torch": {
            "zeros_125": {
                "variable": {
                    "value": "self.adj_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, n_e, n_e, n_s, n_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "codes/net/generator.py": {
        "torch": {
            "arange_62": {
                "variable": {
                    "value": "batch_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "encoder_outputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_64": {
                "variable": {
                    "value": "beam_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "encoder_outputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_71": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size * beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "start_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vocab[START_TOKEN]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "encoder_outputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "topk_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "encoder_outputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_seq, topk_ids.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "alive_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_attn, current_attn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "codes/net/onmt/beam.py": {
        "torch": {
            "stack_176": {
                "tensors": {
                    "value": "attn[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_230": {
                "input": {
                    "value": "beam.attn[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_230": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "codes/net/onmt/penalties.py": {
        "torch": {
            "max_50": {
                "variable": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_43": {
                "input": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "codes/net/trainer.py": {
        "torch": {
            "exp_114": {
                "variable": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_40": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_42": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_114": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "params": {
                    "value": "model_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_params_encoder + model_params_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.model_config.optimiser.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.model_config.optimiser.l2_penalty",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_62": {
                "params": {
                    "value": "model_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_params_encoder + model_params_decoder",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.model_config.optimiser.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.model_config.optimiser.l2_penalty",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_66": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.model_config.optimiser.scheduler_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_69": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.model_config.optimiser.scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.model_config.optimiser.scheduler_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "codes/utils/bert_utils.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "cache",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, self.model_config.bert.embedding_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "{'embeddings': self.embeddings, 'hashmap': self.hash_to_idx_map}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, self.model_config.bert.embedding_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None for _ in range(len(list_of_sentences))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "codes/utils/data.py": {
        "torch": {
            "zeros_937": {
                "variable": {
                    "value": "padded_rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(rows)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_sent_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max([n for sentl in sent_lengths for n in sentl])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1004": {
                "variable": {
                    "value": "padded_rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(rows)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1013": {
                "variable": {
                    "value": "padded_rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(rows)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_num_abstracts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(list(map(len, rows)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "max_abstract_length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max([l for ln in lengths for l in ln])",
                            "Call"
                        ],
                        [
                            "max(abstract_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1022": {
                "variable": {
                    "value": "padded_ents",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(ents), max(lengths), 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1040": {
                "variable": {
                    "value": "padded_ents",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(ents)",
                            "Call"
                        ],
                        [
                            "self.config.model.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "abstracts_per_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(ents[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_entities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(ents[0][0])",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "max_abstract_length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max([l for ln in lengths for l in ln])",
                            "Call"
                        ],
                        [
                            "max(abstract_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_887": {
                "key": {
                    "value": "lambda x: len(x[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_961": {
                "key": {
                    "value": "lambda x: len(x[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1075": {
                "variable": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "data_list[0].cat_dim(key, data_list[0][key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_610": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(edge_list)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_615": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_615": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_662": {
                "dataset": {
                    "value": "PreComputedDataLoader(batches)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "pre_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_671": {
                "key": {
                    "value": "lambda x: len(x[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_617": {
                "data": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.LongTensor(target)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(target)",
                            "Call"
                        ],
                        [
                            "set(targets)",
                            "Call"
                        ],
                        [
                            "[dataRow.target]",
                            "List"
                        ],
                        [
                            "torch.LongTensor(target)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_901": {
                "start": {
                    "value": "max_node",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(slices)",
                            "Call"
                        ],
                        [
                            "max(slices)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_901": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_691": {
                "start": {
                    "value": "max_node",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(slices)",
                            "Call"
                        ],
                        [
                            "max(slices)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_691": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "codes/utils/encoder_utils.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "data_lengths_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[t for sent in sent_lengths for t in sent]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "data_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[idx for (idx, l) in enumerate(data_lengths) if l > 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "data_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 if l > 0 else 0 for l in data_lengths]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_45": {
                "variable": {
                    "value": "data_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.view(batch_size * num_sentences, -1)",
                            "Call"
                        ],
                        [
                            "data[sorted_idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "codes/utils/experiment_utils.py": {
        "torch": {
            "save_42": {
                "obj": {
                    "value": "{'epoch_index': self.epoch_index, 'iteration_index': self.iteration_index, 'config': self.config, 'experiment_id': experiment_id, 'model.encoder': self.model.encoder.state_dict(), 'model.decoder': self.model.decoder.state_dict(), 'optimizer': [opt.state_dict() for opt in self.optimizers]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_path, '{}_{}_checkpoint.pt'.format(model_pre, experiment_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_62": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_path, checkpoint_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codes/utils/util.py": {
        "torch": {
            "eye_155": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_93": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_205": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_206": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_207": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_97": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_213": {
                "input": {
                    "value": "self.w_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}