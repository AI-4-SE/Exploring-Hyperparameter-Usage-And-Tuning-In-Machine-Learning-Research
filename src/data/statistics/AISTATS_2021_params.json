{
    "single-cell/new_train.py": {
        "sklearn": {
            "MinMaxScaler_79": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_absolute_error_151": {
                "variable": {
                    "value": "test_mae",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_predict_r[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_y_r[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_squared_error_149": {
                "y_true": {
                    "value": "test_y_r[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_predict_r[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "MSELoss_121": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "FLAGS.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_96": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "target_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "validate_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "validate_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "ndarray": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/model_seq2seq.py": {
        "tensorflow": {
            "MultiRNNCell_15": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[cell for _ in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_33": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[cell for _ in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_51": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[rnn_cell() for _ in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_70": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstm_cell() for _ in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DropoutWrapper_49": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "BasicRNNCell_47": {
                "num_units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_68": {
                "num_units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/reader.py": {
        "tensorflow": {
            "get_seed_68": {
                "variable": {
                    "value": "(seed1, seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_seed_145": {
                "variable": {
                    "value": "(seed1, seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/test.py": {
        "tensorflow": {
            "placeholder_79": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, inp_steps, num_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, out_steps, num_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, out_steps, num_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_95": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.squared_difference(train_pred, Z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_96": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.squared_difference(test_pred, Z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_101": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "config.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, 2000, config.decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_110": {
                "variable": {
                    "value": "train_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.squared_difference(train_pred, Z)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_111": {
                "variable": {
                    "value": "valid_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.squared_difference(test_pred, Z)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_112": {
                "variable": {
                    "value": "lr_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, 2000, config.decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_115": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_118": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "config.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_prob",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_124": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_125": {
                "variable": {
                    "value": "summary_writer_train",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_126": {
                "variable": {
                    "value": "summary_writer_test",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path + '/test'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "input_tensor": {
                    "value": "tf.squared_difference(train_pred, Z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "input_tensor": {
                    "value": "tf.squared_difference(test_pred, Z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squared_difference_95": {
                "x": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(X, Y, True, config)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, out_steps, num_input])",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_96": {
                "x": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(X, Y, False, config)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, out_steps, num_input])",
                            "Call"
                        ]
                    ]
                }
            },
            "RunOptions_140": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_141": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_170": {
                "ref": {
                    "value": "config.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sample_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(eps_min, 1.0 - step / (2 * training_steps))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/tfc_rnn.py": {
        "tensorflow": {
            "concat_84": {
                "variable": {
                    "value": "states_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "states_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[states_vector, tf.ones([batch_size, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "states_vector_all",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[states_vector, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "weight_all",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_all",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_state_size + input_size, output_size, rank_vals[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_90": {
                "variable": {
                    "value": "branch_product",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "states_vector_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([states_vector, inputs], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('weight_all', [total_state_size + input_size, output_size, rank_vals[0]])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_91": {
                "variable": {
                    "value": "branch_save",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "branch_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(states_vector_all, weight_all, 1)",
                            "Call"
                        ],
                        [
                            "np.abs(branch_product) + 0.01",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_95": {
                "variable": {
                    "value": "new_p",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "states_vector_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([states_vector, inputs], 1)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "variable": {
                    "value": "new_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=states_vector_all, activation=tf.nn.sigmoid, use_bias=True, units=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(new_p, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_97": {
                "variable": {
                    "value": "branch_result",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "branch_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(states_vector_all, weight_all, 1)",
                            "Call"
                        ],
                        [
                            "np.abs(branch_product) + 0.01",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "new_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=states_vector_all, activation=tf.nn.sigmoid, use_bias=True, units=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(new_p, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_98": {
                "variable": {
                    "value": "branch_result",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "branch_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(branch_product, new_p)",
                            "Call"
                        ],
                        [
                            "tf.multiply(branch_result, branch_save)",
                            "Call"
                        ],
                        [
                            "tf.multiply(branch_result, excitation)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "branch_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(branch_product, 0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(branch_save) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "branch_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(branch_product, new_p)",
                            "Call"
                        ],
                        [
                            "tf.multiply(branch_result, branch_save)",
                            "Call"
                        ],
                        [
                            "tf.multiply(branch_result, excitation)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "squeeze",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "branch_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(branch_product, new_p)",
                            "Call"
                        ],
                        [
                            "tf.multiply(branch_result, branch_save)",
                            "Call"
                        ],
                        [
                            "tf.multiply(branch_result, excitation)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_104": {
                "variable": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "squeeze",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(branch_result, 1)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "units": {
                    "value": "rank_vals[0] / r_se",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=squeeze, activation=tf.nn.relu, use_bias=True, units=rank_vals[0] / r_se)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=excitation, activation=tf.nn.sigmoid, use_bias=True, units=rank_vals[0])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(excitation, 1)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "units": {
                    "value": "rank_vals[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "variable": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=squeeze, activation=tf.nn.relu, use_bias=True, units=rank_vals[0] / r_se)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=excitation, activation=tf.nn.sigmoid, use_bias=True, units=rank_vals[0])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(excitation, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_107": {
                "variable": {
                    "value": "branch_result",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "branch_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(branch_product, new_p)",
                            "Call"
                        ],
                        [
                            "tf.multiply(branch_result, branch_save)",
                            "Call"
                        ],
                        [
                            "tf.multiply(branch_result, excitation)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=squeeze, activation=tf.nn.relu, use_bias=True, units=rank_vals[0] / r_se)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=excitation, activation=tf.nn.sigmoid, use_bias=True, units=rank_vals[0])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(excitation, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_69": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * sigmoid(f + self._forget_bias) + sigmoid(i) * j",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._activation(new_c) * sigmoid(o)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_71": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bias_add_114": {
                "value": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(branch_result, -1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('biases', [output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_37": {
                "c": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_55": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "states",
                            "variable"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_85": {
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_92": {
                "x": {
                    "value": "branch_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(branch_product, 0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(branch_save) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/trnn.py": {
        "tensorflow": {
            "get_variable_scope_78": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_95": {
                "variable": {
                    "value": "tensor_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tensor, [batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "variable": {
                    "value": "vector_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tensor_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reshape(tensor, [batch_size, -1]), 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vector_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(vector, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.concat(args, 1), weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tensor_flat, vector_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.add(out_x, out_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size] + _shape_value(tensor)[1:] + _shape_value(vector)[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_129": {
                "variable": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "einsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'aib,' + x + '->' + _s3",
                            "BinOp"
                        ]
                    ]
                },
                "*inputs": {
                    "value": "cores[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "states_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states_vector",
                            "variable"
                        ],
                        [
                            "_outer_product(batch_size, states_tensor, states_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum(einsum, cores[0], states_tensor)",
                            "Call"
                        ],
                        [
                            "tf.einsum(einsum, cores[i], out_h)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out_h, [1])",
                            "Call"
                        ],
                        [
                            "tensor_train_contraction(states_tensor, cores)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_171": {
                "variable": {
                    "value": "weights_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "out_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('weights_x', [input_size, output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_177": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "mat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat_ps[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_178": {
                "variable": {
                    "value": "states_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_179": {
                "variable": {
                    "value": "states_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[states_vector, tf.ones([batch_size, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_192": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weights_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum(einsum, cores[0], states_tensor)",
                            "Call"
                        ],
                        [
                            "tf.einsum(einsum, cores[i], out_h)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out_h, [1])",
                            "Call"
                        ],
                        [
                            "tensor_train_contraction(states_tensor, cores)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_196": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_57": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_network_tt_einsum(inputs, hs, output_size, self._rank_vals, True)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat(args, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('weights', [total_arg_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_87": {
                "value": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.concat(args, 1), weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tensor_flat, vector_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.add(out_x, out_h)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('biases', [output_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "vs.get_variable('biases', [output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_139": {
                "variable": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "einsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'aib,' + x + '->' + _s3",
                            "BinOp"
                        ]
                    ]
                },
                "*inputs": {
                    "value": "cores[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum(einsum, cores[0], states_tensor)",
                            "Call"
                        ],
                        [
                            "tf.einsum(einsum, cores[i], out_h)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out_h, [1])",
                            "Call"
                        ],
                        [
                            "tensor_train_contraction(states_tensor, cores)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_187": {
                "variable": {
                    "value": "mat_core",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('weights_h', mat_size)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[mat_ps[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[mat_ps[i + 1] - mat_ps[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "mat_core",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mat_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(mat, [mat_ps[i]], [mat_ps[i + 1] - mat_ps[i]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(mat_core, [mat_ranks[i], total_state_size, mat_ranks[i + 1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[mat_ranks[i], total_state_size, mat_ranks[i + 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_198": {
                "value": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.concat(args, 1), weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tensor_flat, vector_flat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.add(out_x, out_h)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('biases', [output_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "vs.get_variable('biases', [output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_64": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * sigmoid(f + self._forget_bias) + sigmoid(i) * self._activation(j)",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._activation(new_c) * sigmoid(o)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_66": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable_scope()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_147": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_31": {
                "c": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_51": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "states",
                            "variable"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_82": {
                "values": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "outer_scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_179": {
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/trnn_imply.py": {
        "tensorflow": {
            "stack_72": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_234": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(outputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "inp_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(1, batch_size + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Bernoulli_39": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "config.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_119": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "config.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_193": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "config.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "trnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "trnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_112": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_186": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_54": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(samples[time_step], tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.identity(inp)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_144": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(samples[time_step], tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.identity(inp)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_215": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(samples[time_step], tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.identity(inp)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_54": {
                "x": {
                    "value": "samples[time_step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_144": {
                "x": {
                    "value": "samples[time_step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_215": {
                "x": {
                    "value": "samples[time_step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_54": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, time_step, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.cast(samples[time_step], tf.bool), lambda : tf.identity(inp), lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid))",
                            "Call"
                        ],
                        [
                            "fully_connected(prev, input_size, activation_fn=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "inputs[:, time_step, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.cast(samples[time_step], tf.bool), lambda : tf.identity(inp), lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid))",
                            "Call"
                        ],
                        [
                            "fully_connected(cell_output, input_size, activation_fn=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "inputs[:, time_step, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.cast(samples[time_step], tf.bool), lambda : tf.identity(inp), lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid))",
                            "Call"
                        ],
                        [
                            "fully_connected(cell_output, input_size, activation_fn=tf.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_144": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, time_step, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.cast(samples[time_step], tf.bool), lambda : tf.identity(inp), lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid))",
                            "Call"
                        ],
                        [
                            "fully_connected(prev, input_size, activation_fn=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "inputs[:, time_step, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.cast(samples[time_step], tf.bool), lambda : tf.identity(inp), lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid))",
                            "Call"
                        ],
                        [
                            "fully_connected(cell_output, input_size, activation_fn=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "inputs[:, time_step, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.cast(samples[time_step], tf.bool), lambda : tf.identity(inp), lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid))",
                            "Call"
                        ],
                        [
                            "fully_connected(cell_output, input_size, activation_fn=tf.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_215": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, time_step, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.cast(samples[time_step], tf.bool), lambda : tf.identity(inp), lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid))",
                            "Call"
                        ],
                        [
                            "fully_connected(prev, input_size, activation_fn=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "inputs[:, time_step, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.cast(samples[time_step], tf.bool), lambda : tf.identity(inp), lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid))",
                            "Call"
                        ],
                        [
                            "fully_connected(cell_output, input_size, activation_fn=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "inputs[:, time_step, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.cast(samples[time_step], tf.bool), lambda : tf.identity(inp), lambda : fully_connected(cell_output, input_size, activation_fn=tf.sigmoid))",
                            "Call"
                        ],
                        [
                            "fully_connected(cell_output, input_size, activation_fn=tf.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "single-cell/dornn_simple.py": {
        "torch": {
            "Sigmoid_25": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.x_h_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.h_h_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.h_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.x_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.x_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.h_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.h_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.x_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.hx_h_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(int(math.pow(hidden_size + input_size, self.r)), hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.h_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.x_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.hx_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.h_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.x_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_0, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "hx.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_1.view(inputs.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.hx_h_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "self.h_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "self.x_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_188": {
                "variable": {
                    "value": "self.h_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_189": {
                "variable": {
                    "value": "self.x_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_0, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_255": {
                "variable": {
                    "value": "self.pxh_p_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size_p, self.p_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_256": {
                "variable": {
                    "value": "self.pxh_p_w0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(h_size + x_size + self.p_size, self.hidden_size_p)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_257": {
                "variable": {
                    "value": "self.pxh_p_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.p_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_258": {
                "variable": {
                    "value": "self.pxh_p_b0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.hidden_size_p)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_264": {
                "variable": {
                    "value": "self.h_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_265": {
                "variable": {
                    "value": "self.x_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_266": {
                "variable": {
                    "value": "self.h_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.x_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_0 + x_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "hxp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_0 + x_0 + [p_0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_69": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.hx_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "self.h_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "self.x_h_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.x_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_180": {
                "variable": {
                    "value": "self.p_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.p_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "self.p_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.p_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_217": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_238": {
                "variable": {
                    "value": "self.hx_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_245": {
                "variable": {
                    "value": "self.h_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_250": {
                "variable": {
                    "value": "self.x_h_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(x_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_251": {
                "variable": {
                    "value": "self.x_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "variable": {
                    "value": "init_h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "init_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_279": {
                "variable": {
                    "value": "init_p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.p_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_309": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_64": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_1.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "hx.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_294": {
                "input": {
                    "value": "hxp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(h_0 + x_0 + [p_0], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.pxh_p_w0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_145": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.h_o_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_157": {
                "data": {
                    "value": "torch.Tensor(hidden_size + input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_211": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_211": {
                "input": {
                    "value": "torch.abs(h_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.p_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "data": {
                    "value": "torch.Tensor(h_size + x_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_244": {
                "data": {
                    "value": "torch.Tensor(h_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_294": {
                "input": {
                    "value": "torch.matmul(hxp, self.pxh_p_w0) + self.pxh_p_b0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_303": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_303": {
                "input": {
                    "value": "torch.abs(h_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "p_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.tanh(torch.matmul(hxp, self.pxh_p_w0) + self.pxh_p_b0), self.pxh_p_w) + self.pxh_p_b",
                            "BinOp"
                        ],
                        [
                            "self.sigmoid(p_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_304": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_66": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_101": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.x_o_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([h_0, inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h_0, inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(h_0 + x_0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_211": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_216": {
                "input": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inputs.size(0), self.hidden_size, dtype=inputs.dtype, device=inputs.device)",
                            "Call"
                        ],
                        [
                            "hidden_state[0]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(inputs.size(0), self.hidden_size, dtype=inputs.dtype, device=inputs.device)",
                            "Call"
                        ],
                        [
                            "hidden_state[0]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(inputs.size(0), self.hidden_size, dtype=inputs.dtype, device=inputs.device)",
                            "Call"
                        ],
                        [
                            "hidden_state[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_225": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.x_o_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_300": {
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([h_0, inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h_0, inputs], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(h_0 + x_0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_303": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_308": {
                "input": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(inputs.size(0), self.hidden_size, dtype=inputs.dtype, device=inputs.device)",
                            "Call"
                        ],
                        [
                            "hidden_state[0]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(inputs.size(0), self.hidden_size, dtype=inputs.dtype, device=inputs.device)",
                            "Call"
                        ],
                        [
                            "hidden_state[0]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(inputs.size(0), self.hidden_size, dtype=inputs.dtype, device=inputs.device)",
                            "Call"
                        ],
                        [
                            "hidden_state[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ],
                        [
                            "self.hx_h_w",
                            "Attribute"
                        ],
                        [
                            "self.h_h_w",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_316": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.x_o_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.x_h_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.x_h_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_311": {
                "input": {
                    "value": "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_311": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.x_h_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_219": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_219": {
                "input": {
                    "value": "torch.abs(h_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.p_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_311": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_311": {
                "input": {
                    "value": "torch.abs(h_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "p_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.tanh(torch.matmul(hxp, self.pxh_p_w0) + self.pxh_p_b0), self.pxh_p_w) + self.pxh_p_b",
                            "BinOp"
                        ],
                        [
                            "self.sigmoid(p_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_219": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_311": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(torch.matmul(h_0, self.h_h_w) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(hx.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(inputs.size(0), -1), self.hx_h_w)",
                            "Call"
                        ],
                        [
                            "h_1 + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(-1, 1), hx.view(1, -1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), self.p_h)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h_1, 0, keepdim=True) + self.hx_h_b",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h_1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(h_1) * torch.pow(torch.abs(h_1), p_1)) + torch.matmul(inputs, self.x_h_w) + self.h_h_b + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "single-cell/layers.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.m_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.f_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.h_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.x_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.h_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.m_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "x_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_s, inputs.view(-1, inputs.size(0), inputs.size(1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_50": {
                "variable": {
                    "value": "x_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x_combine, weight_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "x_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.m_m(m_0) + self.f_m(x_filter)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_h(h_0) + self.x_h(inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "z_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_z(hid) + self.m_z(mem)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.d_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.h_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.m_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.x_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.m_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.f_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.h_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.x_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.h_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.m_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "d_values.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_values.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "x_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_s, inputs.view(-1, inputs.size(0), inputs.size(1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_125": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.m_m(m_0) + self.f_m(x_filter)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_h(h_0) + self.x_h(inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.c_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.i_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.f_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.o_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_147": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_148": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample, hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_160": {
                "variable": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[-cell_tensor, weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_168": {
                "variable": {
                    "value": "second",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_tilde",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.tanh(c_tilde)",
                            "Call"
                        ],
                        [
                            "self.c_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.tanh(c_tilde)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "i_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.i_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(i_gate)",
                            "Call"
                        ],
                        [
                            "self.i_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(i_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_169": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,ik->ijk', [-cell_tensor, weights]).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "-self.filter_d(cell_tensor, d_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(c_tilde, i_gate)",
                            "Call"
                        ],
                        [
                            "torch.mul(c_tilde, i_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_170": {
                "variable": {
                    "value": "h_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cell_tensor, cell.view([-1, cell.size(0), cell.size(1)])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_173": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tanh(cell)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "o_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(o_gate)",
                            "Call"
                        ],
                        [
                            "self.o_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(o_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.c_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.i_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.f_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.o_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_199": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_200": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_210": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "d_values.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_values.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "d_values.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample, hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "combined_d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample, hidden, d_0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_245": {
                "variable": {
                    "value": "second",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_tilde",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.tanh(c_tilde)",
                            "Call"
                        ],
                        [
                            "self.c_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.tanh(c_tilde)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "i_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.i_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(i_gate)",
                            "Call"
                        ],
                        [
                            "self.i_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(i_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_246": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk,ik->ijk', [-cell_tensor, weights]).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "-self.filter_d(cell_tensor, d_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "second",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(c_tilde, i_gate)",
                            "Call"
                        ],
                        [
                            "torch.mul(c_tilde, i_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_247": {
                "variable": {
                    "value": "h_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cell_tensor, cell.view([-1, cell.size(0), cell.size(1)])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_250": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tanh(cell)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "o_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(o_gate)",
                            "Call"
                        ],
                        [
                            "self.o_gate(combined)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(o_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "m_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.k - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "weights[0:k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "m_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "d_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.k - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "cell_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_207": {
                "tensors": {
                    "value": "weights[0:self.k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "cell_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "d_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "input": {
                    "value": "self.d_d(d_0) + self.h_d(h_0) + self.m_d(m_0) + self.x_d(inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_255": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "single-cell/models.py": {
        "torch": {
            "RNN_24": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.hidden2output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_42": {
                "variable": {
                    "value": "self.lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.b_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(torch.zeros(1, input_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_82": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "d_value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.d_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(torch.zeros(1, hidden_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_136": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_146": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "d_value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "weights[0:k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "weights[0:k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "weights.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_70": {},
            "sigmoid_94": {
                "input": {
                    "value": "self.b_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_129": {},
            "sigmoid_167": {
                "input": {
                    "value": "self.d_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "single-cell/roseyu_trnn.py": {
        "torch": {
            "Sigmoid_15": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_16": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.x_h_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.h_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.x_o_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.h_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.x_o_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.x_h_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_state + [torch.ones(1, self.hidden_size)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_0.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(hidden_state + [torch.ones(1, self.hidden_size)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(i, j, k)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_57": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "init_h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_1.view(h_1_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "c.view(c_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_52": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_1.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(hidden_state + [torch.ones(1, self.hidden_size)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_86": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.x_h_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "input": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(h_0.unsqueeze(-1), h_0)",
                            "Call"
                        ],
                        [
                            "h_1.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.unsqueeze(-1), h_0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(h_1.view(h_1_shape), c.view(c_shape))",
                            "Call"
                        ],
                        [
                            "h_1 + torch.matmul(inputs, self.x_h_w) + self.x_h_b",
                            "BinOp"
                        ],
                        [
                            "self.activation(h_1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.h_o_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_54": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "single-cell/utils.py": {
        "torch": {
            "from_numpy_44": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}