{
    "visualize_tsne.py": {
        "sklearn": {
            "TSNE_66": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "demo_tracking.py": {
        "torch": {
            "sqrt_25": {
                "input": {
                    "value": "(f1 - f2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/fast_rcnn/bbox_transform.py": {
        "torch": {
            "log_17": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_18": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_20": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_41": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths.view(1, -1).expand_as(gt_widths)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_42": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights.view(1, -1).expand_as(gt_heights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_57": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_58": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_81": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 2::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_82": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 3::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_146": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_147": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_150": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_151": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_191": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_192": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_195": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_196": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_230": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_231": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_234": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_235": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/faster_rcnn_res.py": {
        "torch": {
            "cat_27": {
                "variable": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_boxes, scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "rpn_cls_prob_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reshape_layer(rpn_cls_score, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_105": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_106": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_108": {
                "variable": {
                    "value": "ce_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rpn_cls_score.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "fg_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_114": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_conv(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "ce_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(rpn_cls_score.size(1))",
                            "Call"
                        ],
                        [
                            "ce_weights.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_114": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_238": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(input_shape[0], int(d), int(float(input_shape[1] * input_shape[2]) / float(d)), input_shape[3])",
                            "Call"
                        ],
                        [
                            "self.rpn._resnet.PostFC_layer(pooled_features).mean(3).mean(2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_240": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_275": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_295": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_fc(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_295": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "variable": {
                    "value": "im_data_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_311": {
                "variable": {
                    "value": "im_info_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_info.data",
                            "Attribute"
                        ],
                        [
                            "np.array([[im_data.shape[1], im_data.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[im_data.shape[1], im_data.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_312": {
                "variable": {
                    "value": "gt_boxes_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.data",
                            "Attribute"
                        ],
                        [
                            "gt_boxes * im_scales[0]",
                            "BinOp"
                        ],
                        [
                            "np.hstack((gt_boxes, np.array([[1.0]])))",
                            "Call"
                        ],
                        [
                            "gt_boxes[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_327": {
                "variable": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "triplet_features.view(triplet_features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc_sim(triplet_features)",
                            "Call"
                        ],
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "self.fc7(self.fc6(triplet_features.view(triplet_features.size(0), -1))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.relu(triplet_features) if relu else triplet_features",
                            "IfExp"
                        ],
                        [
                            "normalize(triplet_features, dim=0)",
                            "Call"
                        ],
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "self.fc7(self.fc6(triplet_features.view(triplet_features.size(0), -1))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.relu(triplet_features) if relu else triplet_features",
                            "IfExp"
                        ],
                        [
                            "normalize(triplet_features, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_352": {
                "variable": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "triplet_features.view(triplet_features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc_sim(triplet_features)",
                            "Call"
                        ],
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "self.fc7(self.fc6(triplet_features.view(triplet_features.size(0), -1))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.relu(triplet_features) if relu else triplet_features",
                            "IfExp"
                        ],
                        [
                            "normalize(triplet_features, dim=0)",
                            "Call"
                        ],
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "self.fc7(self.fc6(triplet_features.view(triplet_features.size(0), -1))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.relu(triplet_features) if relu else triplet_features",
                            "IfExp"
                        ],
                        [
                            "normalize(triplet_features, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_376": {
                "variable": {
                    "value": "box_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[box_deltas[i, inds[i] * 4:inds[i] * 4 + 4] for i in range(len(inds))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_399": {
                "variable": {
                    "value": "im_data_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_401": {
                "variable": {
                    "value": "im_info_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_info.data",
                            "Attribute"
                        ],
                        [
                            "np.array([[im_data.shape[1], im_data.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[im_data.shape[1], im_data.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "params['{}/weights:0'.format(v)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_155": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "params['{}/biases:0'.format(v)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_191": {
                "variable": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_250": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_285": {
                "variable": {
                    "value": "self.tn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(0) * predict.eq(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_286": {
                "variable": {
                    "value": "self.fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(0) * predict.ne(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_118": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_label.data.eq(predict) * rpn_label.data.ne(0)",
                            "BinOp"
                        ],
                        [
                            "label.data.eq(predict) * label.data.ne(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_200": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_201": {
                "variable": {
                    "value": "self.BCELoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(3)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_284": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_label.data.eq(predict) * rpn_label.data.ne(0)",
                            "BinOp"
                        ],
                        [
                            "label.data.eq(predict) * label.data.ne(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_204": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_205": {
                "variable": {
                    "value": "self.BCELoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(3)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "rois.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_347": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "rois.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/faster_rcnn_vgg.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_boxes, scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "rpn_cls_prob_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reshape_layer(rpn_cls_score, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_107": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_108": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_111": {
                "variable": {
                    "value": "ce_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rpn_cls_score.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_112": {
                "variable": {
                    "value": "fg_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_117": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_conv(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "ce_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(rpn_cls_score.size(1))",
                            "Call"
                        ],
                        [
                            "ce_weights.cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(cls_score.size(1))",
                            "Call"
                        ],
                        [
                            "ce_weights.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_117": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_230": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_265": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_280": {
                "variable": {
                    "value": "ce_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cls_score.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_285": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_fc(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "ce_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(rpn_cls_score.size(1))",
                            "Call"
                        ],
                        [
                            "ce_weights.cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(cls_score.size(1))",
                            "Call"
                        ],
                        [
                            "ce_weights.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_285": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_299": {
                "variable": {
                    "value": "im_data_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_301": {
                "variable": {
                    "value": "im_info_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_info.data",
                            "Attribute"
                        ],
                        [
                            "np.array([[im_data.shape[1], im_data.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[im_data.shape[1], im_data.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_302": {
                "variable": {
                    "value": "gt_boxes_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.data",
                            "Attribute"
                        ],
                        [
                            "gt_boxes * im_scales[0]",
                            "BinOp"
                        ],
                        [
                            "np.hstack((gt_boxes, np.array([[1.0]])))",
                            "Call"
                        ],
                        [
                            "gt_boxes[np.newaxis, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_317": {
                "variable": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "triplet_features.view(triplet_features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc_sim(triplet_features)",
                            "Call"
                        ],
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "self.fc7(self.fc6(triplet_features.view(triplet_features.size(0), -1))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.relu(triplet_features) if relu else triplet_features",
                            "IfExp"
                        ],
                        [
                            "normalize(triplet_features, dim=0)",
                            "Call"
                        ],
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "self.fc7(self.fc6(triplet_features.view(triplet_features.size(0), -1))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.relu(triplet_features) if relu else triplet_features",
                            "IfExp"
                        ],
                        [
                            "normalize(triplet_features, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_342": {
                "variable": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "triplet_features.view(triplet_features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc_sim(triplet_features)",
                            "Call"
                        ],
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "self.fc7(self.fc6(triplet_features.view(triplet_features.size(0), -1))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.relu(triplet_features) if relu else triplet_features",
                            "IfExp"
                        ],
                        [
                            "normalize(triplet_features, dim=0)",
                            "Call"
                        ],
                        [
                            "self.roi_pool(features, triplet_rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "self.fc7(self.fc6(triplet_features.view(triplet_features.size(0), -1))).squeeze()",
                            "Call"
                        ],
                        [
                            "self.relu(triplet_features) if relu else triplet_features",
                            "IfExp"
                        ],
                        [
                            "normalize(triplet_features, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "box_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[box_deltas[i, inds[i] * 4:inds[i] * 4 + 4] for i in range(len(inds))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_389": {
                "variable": {
                    "value": "im_data_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_391": {
                "variable": {
                    "value": "im_info_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_info.data",
                            "Attribute"
                        ],
                        [
                            "np.array([[im_data.shape[1], im_data.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[im_data.shape[1], im_data.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_181": {
                "variable": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_240": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_275": {
                "variable": {
                    "value": "self.tn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(0) * predict.eq(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_276": {
                "variable": {
                    "value": "self.fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.data.eq(0) * predict.ne(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_121": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_label.data.eq(predict) * rpn_label.data.ne(0)",
                            "BinOp"
                        ],
                        [
                            "label.data.eq(predict) * label.data.ne(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_190": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_191": {
                "variable": {
                    "value": "self.BCELoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(3)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_274": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_label.data.eq(predict) * rpn_label.data.ne(0)",
                            "BinOp"
                        ],
                        [
                            "label.data.eq(predict) * label.data.ne(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_194": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_195": {
                "variable": {
                    "value": "self.BCELoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(3)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_312": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "rois.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_337": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "rois.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/network.py": {
        "torch": {
            "abs_139": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2) if same_padding else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(h5f[k])",
                            "Call"
                        ],
                        [
                            "np.delete(data, irrelvant_indices, axis=0)",
                            "Call"
                        ],
                        [
                            "data.reshape(21, 4, -1)",
                            "Call"
                        ],
                        [
                            "np.delete(data, irrelvant_indices, axis=0)",
                            "Call"
                        ],
                        [
                            "data.reshape(num_classes * 4, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "params[key][ptype]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "params[v]['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_127": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "params[v]['biases']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_242": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label[i].data == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_243": {
                "variable": {
                    "value": "rand_id",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "npr.choice(indices.size(0), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_246": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label[2].data == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_249": {
                "variable": {
                    "value": "rand_id",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "npr.choice(indices.size(0), bg_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_171": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_141": {
                "input": {
                    "value": "in_box_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "*size": {
                    "value": "3 + bg_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "rois.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/nms/_ext/nms/__init__.py": {
        "torch": {}
    },
    "faster_rcnn/nms/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/nms/nms_cpu.py": {
        "torch": {}
    },
    "faster_rcnn/nms/nms_gpu.py": {
        "torch": {}
    },
    "faster_rcnn/nms/nms_wrapper.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/resnet.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_102": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_109": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.PostFC_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet.layer4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_201": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/roi_align/_ext/roi_align/__init__.py": {
        "torch": {}
    },
    "faster_rcnn/roi_align/build.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "faster_rcnn/roi_align/modules/roi_align.py": {
        "torch": {
            "avg_pool2d_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/roi_data_layer/roibatchLoader.py": {
        "torch": {
            "Tensor_35": {
                "variable": {
                    "value": "self.ratio_list_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "variable": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(blobs['im_info'])",
                            "Call"
                        ],
                        [
                            "im_info.view(3)",
                            "Call"
                        ],
                        [
                            "im_info.view(3)",
                            "Call"
                        ],
                        [
                            "im_info.numpy()",
                            "Call"
                        ],
                        [
                            "np.array([[data.shape[0], data.shape[1], im_info[0][2] * im_scale]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_info)",
                            "Call"
                        ],
                        [
                            "np.array([[padding_data.size(0), padding_data.size(1), im_info[0][2]]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_info)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['gt_boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_201": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_keep == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "permute_216": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_254": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(blobs['data'])",
                            "Call"
                        ],
                        [
                            "data.permute(0, 3, 1, 2).contiguous().view(3, data_height, data_width)",
                            "Call"
                        ],
                        [
                            "data[:, y_s:y_s + trim_size, :, :]",
                            "Subscript"
                        ],
                        [
                            "data[:, :, x_s:x_s + trim_size, :]",
                            "Subscript"
                        ],
                        [
                            "data.numpy()",
                            "Call"
                        ],
                        [
                            "data.astype(np.float32, copy=False)",
                            "Call"
                        ],
                        [
                            "cv2.resize(data, None, None, fx=im_scale, fy=im_scale, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_255": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(blobs['gt_boxes'])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "gt_boxes[keep]",
                            "Subscript"
                        ],
                        [
                            "gt_boxes.numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_256": {
                "variable": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(blobs['im_info'])",
                            "Call"
                        ],
                        [
                            "im_info.view(3)",
                            "Call"
                        ],
                        [
                            "im_info.view(3)",
                            "Call"
                        ],
                        [
                            "im_info.numpy()",
                            "Call"
                        ],
                        [
                            "np.array([[data.shape[0], data.shape[1], im_info[0][2] * im_scale]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_info)",
                            "Call"
                        ],
                        [
                            "np.array([[padding_data.size(0), padding_data.size(1), im_info[0][2]]], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im_info)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_93": {
                "input": {
                    "value": "gt_boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_94": {
                "input": {
                    "value": "gt_boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_129": {
                "input": {
                    "value": "gt_boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_130": {
                "input": {
                    "value": "gt_boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/roi_data_layer/sampler.py": {
        "torch": {
            "arange_12": {
                "variable": {
                    "value": "self.range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_15": {
                "variable": {
                    "value": "self.leftover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_per_batch * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "train_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "self.rand_num_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.rand_num_view, self.leftover)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_20": {
                "n": {
                    "value": "self.num_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/roi_pooling/_ext/roi_pooling/__init__.py": {
        "torch": {}
    },
    "faster_rcnn/roi_pooling/build.py": {
        "torch": {
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/roi_pooling/functions/roi_pool.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.pooled_height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.pooled_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "data_width",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/roi_pooling/modules/roi_pool.py": {
        "torch": {}
    },
    "faster_rcnn/roi_pooling/modules/roi_pool_py.py": {
        "torch": {
            "zeros_17": {
                "*size": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.pooled_height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.pooled_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "torch.max(data[:, hstart:hend, wstart:wend], 1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_45": {
                "input": {
                    "value": "data[:, hstart:hend, wstart:wend]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/rpn_msr/anchor_target_layer.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(anchor_scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_81": {
                "variable": {
                    "value": "inds_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < int(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < int(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_93": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_94": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_100": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_113": {
                "variable": {
                    "value": "sum_fg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "sum_bg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_201": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_204": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_149": {
                "variable": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < int(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < int(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_119": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_133": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_140": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_129": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/rpn_msr/proposal_layer.py": {
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_135": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "(proposals_single, scores_single)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/rpn_msr/proposal_target_layer.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "all_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_rois, gt_boxes_append, jitter_gt_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_126": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(all_rois, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_90": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss[b] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_145": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_overlaps[i] >= cfg.TRAIN.FG_THRESH",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_149": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(max_overlaps[i] < cfg.TRAIN.BG_THRESH_HI) & (max_overlaps[i] >= cfg.TRAIN.BG_THRESH_LO)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "keep_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "labels_batch.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_132": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_batch.size(0)",
                            "Call"
                        ],
                        [
                            "ex_rois.size(0)",
                            "Call"
                        ],
                        [
                            "overlaps.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_num_rois)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_171": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "faster_rcnn/triplet.py": {
        "torch": {
            "normalize_10": {
                "variable": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features[0].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_11": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features[1].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_12": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features[2].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_39": {
                "variable": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super.relu(triplet_features)",
                            "Call"
                        ],
                        [
                            "normalize(triplet_features, dim=1)",
                            "Call"
                        ],
                        [
                            "super.relu(triplet_features)",
                            "Call"
                        ],
                        [
                            "normalize(triplet_features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_75": {
                "variable": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super.relu(triplet_features)",
                            "Call"
                        ],
                        [
                            "normalize(triplet_features, dim=1)",
                            "Call"
                        ],
                        [
                            "super.relu(triplet_features)",
                            "Call"
                        ],
                        [
                            "normalize(triplet_features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_81": {
                "variable": {
                    "value": "scores[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x1": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(triplet_features[0].view(-1), dim=0)",
                            "Call"
                        ],
                        [
                            "triplet_features[0].view(-1)",
                            "Call"
                        ],
                        [
                            "triplet_features[0].view(-1)",
                            "Call"
                        ],
                        [
                            "anchor.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(triplet_features[1].view(-1), dim=0)",
                            "Call"
                        ],
                        [
                            "triplet_features[1].view(-1)",
                            "Call"
                        ],
                        [
                            "triplet_features[1].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_82": {
                "variable": {
                    "value": "scores[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x1": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(triplet_features[0].view(-1), dim=0)",
                            "Call"
                        ],
                        [
                            "triplet_features[0].view(-1)",
                            "Call"
                        ],
                        [
                            "triplet_features[0].view(-1)",
                            "Call"
                        ],
                        [
                            "anchor.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(triplet_features[2].view(-1), dim=0)",
                            "Call"
                        ],
                        [
                            "triplet_features[2].view(-1)",
                            "Call"
                        ],
                        [
                            "triplet_features[2].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_18": {
                "variable": {
                    "value": "rem_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features[3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_52": {
                "variable": {
                    "value": "rem_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features[3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_88": {
                "variable": {
                    "value": "rem_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_features[3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_45": {
                "input": {
                    "value": "((anchor - positive) ** 2).sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "input": {
                    "value": "((anchor - negative) ** 2).sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_92": {
                "x1": {
                    "value": "rem_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(triplet_features[3:], dim=1)",
                            "Call"
                        ],
                        [
                            "rem_features.view(bg_size, -1)",
                            "Call"
                        ],
                        [
                            "normalize(triplet_features[3:], dim=1)",
                            "Call"
                        ],
                        [
                            "rem_features.view(bg_size, -1)",
                            "Call"
                        ],
                        [
                            "normalize(triplet_features[3:], dim=1)",
                            "Call"
                        ],
                        [
                            "rem_features.view(bg_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(triplet_features[0].view(-1), dim=0)",
                            "Call"
                        ],
                        [
                            "triplet_features[0].view(-1)",
                            "Call"
                        ],
                        [
                            "triplet_features[0].view(-1)",
                            "Call"
                        ],
                        [
                            "anchor.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_55": {
                "input": {
                    "value": "((anchor - rem_features) ** 2).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "faster_rcnn/vgg16.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.classifier._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_95": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(imdb, roidb, ratio_list, ratio_index, 1, imdb.num_classes, training=False, normalize=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_141": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_144": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_89": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roibatchLoader(imdb, roidb, ratio_list, ratio_index, batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.IMS_PER_BATCH",
                            "Attribute"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler(train_size, batch_size, cfg.TRIPLET.IS_TRUE)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_net_params(net, cfg, lr)",
                            "Call"
                        ],
                        [
                            "train_net_params(net, cfg, lr)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.MOMENTUM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_158": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_net_params(net, cfg, lr)",
                            "Call"
                        ],
                        [
                            "train_net_params(net, cfg, lr)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.MOMENTUM",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "val.py": {
        "torch": {
            "sqrt_67": {
                "input": {
                    "value": "(f1 - f2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_114": {
                "input": {
                    "value": "(f1 - f2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_70": {
                "x1": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}