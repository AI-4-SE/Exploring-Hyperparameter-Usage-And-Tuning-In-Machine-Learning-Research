{
    "WGAN_GP.py": {
        "torch": {
            "Adam_46": {
                "variable": {
                    "value": "self.optimizerG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "self.optimizerD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "self.optimizer_preD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_83": {
                "variable": {
                    "value": "logit_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.netD(sr_patches)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "variable": {
                    "value": "logit_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.netD(hr_patches)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(logit_fake.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(logit_real.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_257": {
                "variable": {
                    "value": "self.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "list(range(self.ngpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_258": {
                "variable": {
                    "value": "self.netD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.netD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "list(range(self.ngpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_496": {
                "variable": {
                    "value": "sr_data_cat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_62": {
                "input": {
                    "value": "D_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(sr_patches)",
                            "Call"
                        ],
                        [
                            "self.netD(sr_patches)",
                            "Call"
                        ],
                        [
                            "self.netD(sr_patches)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "logit_fake.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "logit_real.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_480": {
                "f": {
                    "value": "pretrainedG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "' '",
                            "MethodArgument"
                        ],
                        [
                            "' '",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_61": {
                "input": {
                    "value": "D_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(sr_patches)",
                            "Call"
                        ],
                        [
                            "self.netD(sr_patches)",
                            "Call"
                        ],
                        [
                            "self.netD(sr_patches)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_224": {
                "f": {
                    "value": "pretrainedG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "' '",
                            "MethodArgument"
                        ],
                        [
                            "' '",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_238": {
                "f": {
                    "value": "pretrainedD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "' '",
                            "MethodArgument"
                        ],
                        [
                            "' '",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_479": {
                "f": {
                    "value": "pretrainedD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "' '",
                            "MethodArgument"
                        ],
                        [
                            "' '",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_507": {
                "variable": {
                    "value": "sr_data_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sr_data_cat, sr_patches.to('cpu')]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_503": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_296": {
                "variable": {
                    "value": "sr_data_cat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "sr_data_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sr_data_cat, sr_patches.to('cpu')]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_306": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_401": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "self.netG.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/WGAN_G_step{}'.format(step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_351": {
                "obj": {
                    "value": "self.netD.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/WGAN_D_step{}'.format(step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_353": {
                "obj": {
                    "value": "self.netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/WGAN_G_step{}'.format(step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_354": {
                "obj": {
                    "value": "self.netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/WGAN_D_step{}'.format(step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_392": {
                "obj": {
                    "value": "self.netG.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "models/final_model_G",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_393": {
                "obj": {
                    "value": "self.netD.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "models/final_model_D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_395": {
                "obj": {
                    "value": "self.netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "models/final_model_G",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_396": {
                "obj": {
                    "value": "self.netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "models/final_model_D",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ecbm6040/dataloader/CustomDatasetFromCSV.py": {
        "torch": {}
    },
    "ecbm6040/metric/eval_metrics.py": {
        "torch": {}
    },
    "ecbm6040/model/mDCSRN_WGAN.py": {
        "torch": {
            "Conv3d_55": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_63": {
                "variable": {
                    "value": "self.comp0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Name"
                        ],
                        [
                            "num_features_cat + (block_config[3] * growth_rate + num_features)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_69": {
                "variable": {
                    "value": "self.comp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Name"
                        ],
                        [
                            "num_features_cat + (block_config[3] * growth_rate + num_features)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_75": {
                "variable": {
                    "value": "self.comp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Name"
                        ],
                        [
                            "num_features_cat + (block_config[3] * growth_rate + num_features)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_81": {
                "variable": {
                    "value": "self.recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Name"
                        ],
                        [
                            "num_features_cat + (block_config[3] * growth_rate + num_features)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(1, num_features, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_23": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(_DenseLayer, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_122": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "negative_slope": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_125": {
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_126": {
                "normalized_shape": {
                    "value": "[num_features, cube_size // 2, cube_size // 2, cube_size // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "negative_slope": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_129": {
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_130": {
                "normalized_shape": {
                    "value": "[2 * num_features, cube_size // 2, cube_size // 2, cube_size // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_131": {
                "negative_slope": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_133": {
                "in_channels": {
                    "value": "2 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_134": {
                "normalized_shape": {
                    "value": "[2 * num_features, cube_size // 4, cube_size // 4, cube_size // 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_135": {
                "negative_slope": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_137": {
                "in_channels": {
                    "value": "2 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_138": {
                "normalized_shape": {
                    "value": "[4 * num_features, cube_size // 4, cube_size // 4, cube_size // 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_139": {
                "negative_slope": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_141": {
                "in_channels": {
                    "value": "4 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_142": {
                "normalized_shape": {
                    "value": "[4 * num_features, cube_size // 8, cube_size // 8, cube_size // 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_143": {
                "negative_slope": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_145": {
                "in_channels": {
                    "value": "4 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_146": {
                "normalized_shape": {
                    "value": "[8 * num_features, cube_size // 8, cube_size // 8, cube_size // 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_147": {
                "negative_slope": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_149": {
                "in_channels": {
                    "value": "8 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_150": {
                "normalized_shape": {
                    "value": "[8 * num_features, cube_size // 16, cube_size // 16, cube_size // 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_151": {
                "negative_slope": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_154": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_155": {
                "in_channels": {
                    "value": "8 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_156": {
                "negative_slope": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_157": {
                "in_channels": {
                    "value": "16 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_13": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_15": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ecbm6040/patching/patchloader.py": {
        "torch": {
            "zeros_113": {
                "variable": {
                    "value": "merged_image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "merged_image_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "merged_image_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "merged_image_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "image_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "image_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_23": {
                "variable": {
                    "value": "image_float",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.float() / 4095.0",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(image_float, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SequentialSampler_69": {
                "variable": {
                    "value": "patch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "patch_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:patch_take]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "patch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Patch(lr_patches, hr_patches)",
                            "Call"
                        ],
                        [
                            "Patch(lr_patches, hr_patches)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "patch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(patch_indices)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "lr_data_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[lr_data.shape[0], lr_data.shape[1] + 2 * padding[0], lr_data.shape[2] + 2 * padding[1], lr_data.shape[3] + 2 * padding[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "hr_data_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[lr_data.shape[0], hr_data.shape[1] + 2 * padding[0], hr_data.shape[2] + 2 * padding[1], hr_data.shape[3] + 2 * padding[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "patch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Patch(lr_patches, hr_patches)",
                            "Call"
                        ],
                        [
                            "Patch(lr_patches, hr_patches)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "training_pre.py": {
        "torch": {
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_48": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model, list(range(ngpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(ngpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_45": {
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "' '",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_79": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model, list(range(ngpu)))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'models/pretrained_G_step{}'.format(step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/pretrained_G_step{}'.format(step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/pretrained_G_step{}'.format(step)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}