{
    "src/VAE/read_utilities.py": {
        "sklearn": {
            "train_test_split_276": {
                "variable": {
                    "value": "(X_tr_images, X_vld_images, lab_tr_images, lab_vld_images)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels_train_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "labels_train_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "324",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "get_seed_153": {
                "variable": {
                    "value": "(seed1, seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_dtype_156": {
                "type_value": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtypes.as_dtype(dtype).base_dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "MethodArgument"
                        ],
                        [
                            "dtypes.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/VAE/t15_evaluate_anomaly_one_autoencoder_oneshot_refined.py": {
        "sklearn": {
            "confusion_matrix_235": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "predList",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate([predList, predClassList])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "trueList",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate([trueList, labels_train_images])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "reset_default_graph_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/VAE/t15_test_visualization.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "src/VAE/t15_vae.py": {
        "sklearn": {},
        "tensorflow": {
            "get_variable_7": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_10": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.dim_image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_40": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_44": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.x, W1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_63": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "z[:, self.latent_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_75": {
                "variable": {
                    "value": "reconstruct",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(latent, W1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_78": {
                "variable": {
                    "value": "reconstruct",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(reconstruct, W2) + b2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "self.kldiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "0.5 * tf.reduce_sum(tf.square(self.mu) + tf.square(self.sigma) - tf.log(1e-08 + tf.square(self.sigma)) - 1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_11": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_60": {
                "a": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(self.x, W1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable('we2', [self.hidden_dim, 2 * self.latent_dim])",
                            "Call"
                        ],
                        [
                            "weight_variable('wd2', [self.hidden_dim, self.dim_image])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_83": {
                "input_tensor": {
                    "value": "tf.reduce_sum(self.x * tf.log(self.reconstruct) + (1 - self.x) * tf.log(1 - self.reconstruct), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "a": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable('we1', [self.dim_image, self.hidden_dim])",
                            "Call"
                        ],
                        [
                            "weight_variable('wd1', [self.latent_dim, self.hidden_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "a": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mu + self.sigma * tf.random_normal(tf.shape(self.mu), 0, 1, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable('we1', [self.dim_image, self.hidden_dim])",
                            "Call"
                        ],
                        [
                            "weight_variable('wd1', [self.latent_dim, self.hidden_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_78": {
                "a": {
                    "value": "reconstruct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(latent, W1) + b1)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.matmul(reconstruct, W2) + b2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable('we2', [self.hidden_dim, 2 * self.latent_dim])",
                            "Call"
                        ],
                        [
                            "weight_variable('wd2', [self.hidden_dim, self.dim_image])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "self.x * tf.log(self.reconstruct) + (1 - self.x) * tf.log(1 - self.reconstruct)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "tf.square(self.mu) + tf.square(self.sigma) - tf.log(1e-08 + tf.square(self.sigma)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_84": {
                "x": {
                    "value": "self.reconstruct",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_85": {
                "x": {
                    "value": "1 - self.reconstruct",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_88": {
                "x": {
                    "value": "1e-08 + tf.square(self.sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_87": {
                "x": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_88": {
                "x": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/VAE/test_utilities_autoencoder_oneshot.py": {
        "sklearn": {},
        "tensorflow": {
            "get_seed_153": {
                "variable": {
                    "value": "(seed1, seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_dtype_156": {
                "type_value": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtypes.as_dtype(dtype).base_dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "MethodArgument"
                        ],
                        [
                            "dtypes.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}