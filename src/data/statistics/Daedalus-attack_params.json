{
    "l0_yolov3.py": {
        "tensorflow": {
            "reshape_107": {
                "variable": {
                    "value": "anchors_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant(anchors, dtype=tf.float32, name='anchor_tensor')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, len(anchors), 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "box_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[:, :, :, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "box_xy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_110": {
                "variable": {
                    "value": "box_wh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.exp(out[:, :, :, 2:4]) * anchors_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "box_wh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[:, :, :, 4:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "objectness",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_113": {
                "variable": {
                    "value": "box_class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[:, :, :, 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_120": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.concatenate((col, row), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_128": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[box_xy, box_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([box_xy, box_wh], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [int(boxes.shape[0]) ** 2, boxes.shape[2], boxes.shape[3]])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "tf.concat([boxes, b], 0, name='xywh')",
                            "Call"
                        ],
                        [
                            "process_output(self.outs)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(boxes.shape[0]) ** 2, boxes.shape[2], boxes.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(out[:, :, :, 4:5], name='objectness')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_confidence, [int(box_confidence.shape[0]) ** 2, box_confidence.shape[-2], box_confidence.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(box_confidence.shape[0]) ** 2, box_confidence.shape[-2], box_confidence.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "box_class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_class_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(out[:, :, :, 5:], name='class_probs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_class_probs, [int(box_class_probs.shape[0]) ** 2, box_class_probs.shape[-2], box_class_probs.shape[-1]], name='class_probs')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(box_class_probs.shape[0]) ** 2, box_class_probs.shape[-2], box_class_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_184": {
                "variable": {
                    "value": "xy2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xy * xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "bxby",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[bx, by]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "bxby",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bxby",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([bx, by], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bxby, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_212": {
                "variable": {
                    "value": "(x11, y11, w1, h1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs1",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_213": {
                "variable": {
                    "value": "(x21, y21, w2, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs2",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_218": {
                "variable": {
                    "value": "xA",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(bs1, 4, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(x21)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_219": {
                "variable": {
                    "value": "yA",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(bs1, 4, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(y21)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_220": {
                "variable": {
                    "value": "xB",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x11 + w1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(x22)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_221": {
                "variable": {
                    "value": "yB",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y11 + h1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(y22)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "variable": {
                    "value": "expt",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "IoUs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_IoUs(boxes, boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_256": {
                "variable": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(box_scores, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "box_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bincount_257": {
                "variable": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "arr": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_258": {
                "variable": {
                    "value": "dominating_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_259": {
                "variable": {
                    "value": "dominating_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dominating_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(dominating_cls, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_260": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dominating_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(dominating_cls, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_261": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, dominating_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_partition_262": {
                "variable": {
                    "value": "(others, dominating_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([box_xy, box_wh], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [int(boxes.shape[0]) ** 2, boxes.shape[2], boxes.shape[3]])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "tf.concat([boxes, b], 0, name='xywh')",
                            "Call"
                        ],
                        [
                            "process_output(self.outs)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, dominating_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_531": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_532": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "input_tensor": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xy2 - 2 * tf.matmul(xy, tf.transpose(xy)) + tf.transpose(xy2)",
                            "BinOp"
                        ],
                        [
                            "self.attack_single(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_304": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_307": {
                "variable": {
                    "value": "canchange",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_308": {
                "variable": {
                    "value": "simg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_309": {
                "variable": {
                    "value": "original",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_310": {
                "variable": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_314": {
                "variable": {
                    "value": "assign_modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGE_SHAPE",
                            "variable"
                        ]
                    ]
                }
            },
            "placeholder_315": {
                "variable": {
                    "value": "assign_canchange",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGE_SHAPE",
                            "variable"
                        ]
                    ]
                }
            },
            "placeholder_316": {
                "variable": {
                    "value": "assign_simg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGE_SHAPE",
                            "variable"
                        ]
                    ]
                }
            },
            "placeholder_317": {
                "variable": {
                    "value": "assign_original",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGE_SHAPE",
                            "variable"
                        ]
                    ]
                }
            },
            "placeholder_318": {
                "variable": {
                    "value": "assign_timg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IMAGE_SHAPE",
                            "variable"
                        ]
                    ]
                }
            },
            "assign_321": {
                "variable": {
                    "value": "set_modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_342": {
                "variable": {
                    "value": "self.box_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.obj_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_max(self.class_probs, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_345": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(newimg - (tf.tanh(timg) + 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_346": {
                "variable": {
                    "value": "self.image_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "newimg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.tanh(modifier + simg) + 1) / 2 * canchange + (1 - canchange) * original",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_350": {
                "variable": {
                    "value": "self.loss1_1_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.box_scores - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_353": {
                "variable": {
                    "value": "self.f1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Iou_expt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expectation_of_IoUs_accross_classes(boxes, classprobs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_354": {
                "variable": {
                    "value": "self.f2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.multiply(self.bw, self.bh))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_359": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "const * self.loss_adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_360": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_367": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_370": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_372": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier, canchange, simg, original, timg] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_107": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[anchors[i] for i in mask]",
                            "ListComp"
                        ],
                        [
                            "[[10, 13], [16, 30], [33, 23], [30, 61], [62, 45], [59, 119], [116, 90], [156, 198], [373, 326]]",
                            "List"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "anchor_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_168": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "xywh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_169": {
                "variable": {
                    "value": "objecness",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[objecness, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "objectness",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[scores, s]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_185": {
                "a": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_218": {
                "a": {
                    "value": "x21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(bs2, 4, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_219": {
                "a": {
                    "value": "y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(bs2, 4, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_220": {
                "a": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x21 + w2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_221": {
                "a": {
                    "value": "y22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y21 + h2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_223": {
                "x": {
                    "value": "yB - yA + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_256": {
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_110": {
                "x": {
                    "value": "out[:, :, :, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_323": {
                "ref": {
                    "value": "canchange",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_canchange",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_324": {
                "ref": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_325": {
                "ref": {
                    "value": "original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_326": {
                "ref": {
                    "value": "simg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_simg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_342": {
                "input_tensor": {
                    "value": "self.class_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_345": {
                "x": {
                    "value": "newimg - (tf.tanh(timg) + 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_350": {
                "x": {
                    "value": "self.box_scores - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_354": {
                "x": {
                    "value": "tf.multiply(self.bw, self.bh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_363": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss1 + loss2",
                            "BinOp"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "[modifier]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xy",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(xy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_228": {
                "a": {
                    "value": "boxBArea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x22 - x21 + 1) * (y22 - y21 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_354": {
                "x": {
                    "value": "self.bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_328": {
                "x": {
                    "value": "modifier + simg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_345": {
                "x": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "l2_ensemble.py": {
        "tensorflow": {
            "sigmoid_95": {
                "variable": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[..., 4:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "objectness",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "box_class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_103": {
                "variable": {
                    "value": "anchors_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([anchors[i] for i in mask])",
                            "Call"
                        ],
                        [
                            "np.repeat(anchors[np.newaxis, :, :], grid_w, axis=0)",
                            "Call"
                        ],
                        [
                            "np.repeat(anchors[np.newaxis, :, :, :], grid_h, axis=0)",
                            "Call"
                        ],
                        [
                            "np.repeat(anchors[np.newaxis, :, :, :, :], batchsize, axis=0)",
                            "Call"
                        ],
                        [
                            "[[10, 13], [16, 30], [33, 23], [30, 61], [62, 45], [59, 119], [116, 90], [156, 198], [373, 326]]",
                            "List"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "anchor_tensors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "variable": {
                    "value": "box_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[..., 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "box_xy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_106": {
                "variable": {
                    "value": "box_wh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.exp(out[..., 2:4]) * anchors_tensors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "box_wh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[box_xy, box_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([box_xy, box_wh], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batchsize, -1, boxes.shape[-2], boxes.shape[-1]], name='boxes')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "tf.concat([boxes, b], 1, name='xywh')",
                            "Call"
                        ],
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "self.retinanet(images)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, None, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, -1, boxes.shape[-2], boxes.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(out[..., 4:5], name='objectness')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_confidence, [batchsize, -1, box_confidence.shape[-2], box_confidence.shape[-1]], name='box_confidence')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, -1, box_confidence.shape[-2], box_confidence.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "box_confidence",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "box_class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_class_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(out[..., 5:], name='class_probs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_class_probs, [batchsize, -1, box_class_probs.shape[-2], box_class_probs.shape[-1]], name='class_probs')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, -1, box_class_probs.shape[-2], box_class_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_445": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_446": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_475": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_263": {
                "variable": {
                    "value": "perturbations",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, img_shape[0], img_shape[1], img_shape[2]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "perturbations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_268": {
                "variable": {
                    "value": "self.timgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, img_shape[0], img_shape[1], img_shape[2]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.timgs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_272": {
                "variable": {
                    "value": "self.consts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.consts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_275": {
                "variable": {
                    "value": "self.assign_timgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, img_shape[0], img_shape[1], img_shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_279": {
                "variable": {
                    "value": "self.assign_consts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_290": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.newimgs - (tf.tanh(self.timgs) * self.boxmul + self.boxplus))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_301": {
                "variable": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.consts * self.loss_adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_302": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_307": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_309": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_316": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[perturbations] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_161": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "xywh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "objecness",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[objecness, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "objectness",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_163": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[scores, s]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_192": {
                "variable": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(box_scores, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "box_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bincount_193": {
                "variable": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "arr": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_213": {
                "variable": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(selected_cls, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmin(class_counts)",
                            "Call"
                        ],
                        [
                            "class_names.index(target_class)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_214": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(selected_cls, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmin(class_counts)",
                            "Call"
                        ],
                        [
                            "class_names.index(target_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_215": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_partition_216": {
                "variable": {
                    "value": "(_, selected_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([box_xy, box_wh], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batchsize, -1, boxes.shape[-2], boxes.shape[-1]], name='boxes')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "tf.concat([boxes, b], 1, name='xywh')",
                            "Call"
                        ],
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "self.retinanet(images)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, None, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dynamic_partition_217": {
                "variable": {
                    "value": "(_, selected_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "variable": {
                    "value": "selected_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(boxes, [BATCH_SIZE, -1, 4])",
                            "Call"
                        ],
                        [
                            "tf.dynamic_partition(boxes, index, num_partitions=2, name='dynamic_partition')",
                            "Call"
                        ],
                        [
                            "tf.reshape(selected_boxes, [BATCH_SIZE, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(box_scores, [BATCH_SIZE, -1, CLASS_NUM])",
                            "Call"
                        ],
                        [
                            "tf.dynamic_partition(box_scores, index, num_partitions=2, name='dynamic_partition')",
                            "Call"
                        ],
                        [
                            "tf.reshape(selected_scores, [BATCH_SIZE, -1, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_partition_222": {
                "variable": {
                    "value": "(_, selected_objectness)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "selected_objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected_objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(objectness, [BATCH_SIZE, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.dynamic_partition(objectness, index, num_partitions=2, name='dynamic_partition')",
                            "Call"
                        ],
                        [
                            "tf.reshape(selected_objectness, [BATCH_SIZE, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_239": {
                "variable": {
                    "value": "self.yolo3box_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.yolo3obj_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_max(self.yolo3class_probs, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_256": {
                "variable": {
                    "value": "self.retinabw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.retinax2 - self.retinax1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_257": {
                "variable": {
                    "value": "self.retinabh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.retinay1 - self.retinay2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_259": {
                "variable": {
                    "value": "self.retinabox_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.retinaclass_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_364": {
                "variable": {
                    "value": "obj_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss1_1_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.newimgs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_366": {
                "variable": {
                    "value": "loss_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.f3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.newimgs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_106": {
                "x": {
                    "value": "out[..., 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "selected_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([box_xy, box_wh], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batchsize, -1, boxes.shape[-2], boxes.shape[-1]], name='boxes')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "tf.concat([boxes, b], 1, name='xywh')",
                            "Call"
                        ],
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "self.retinanet(images)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, None, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "selected_objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_290": {
                "x": {
                    "value": "self.newimgs - (tf.tanh(self.timgs) * self.boxmul + self.boxplus)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_294": {
                "input_tensor": {
                    "value": "tf.square(self.retinabox_scores - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_297": {
                "input_tensor": {
                    "value": "tf.square(tf.multiply(self.retinabw, self.retinabh))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_192": {
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_203": {
                "variable": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_239": {
                "input_tensor": {
                    "value": "self.yolo3class_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_285": {
                "x": {
                    "value": "perturbations + self.timgs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_294": {
                "x": {
                    "value": "self.retinabox_scores - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_297": {
                "x": {
                    "value": "tf.multiply(self.retinabw, self.retinabh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_205": {
                "variable": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(class_counts, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_206": {
                "variable": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_297": {
                "x": {
                    "value": "self.retinabw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.retinabh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_205": {
                "x": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_290": {
                "x": {
                    "value": "self.timgs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_205": {
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "l2_retinanet.py": {
        "tensorflow": {
            "InteractiveSession_323": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_324": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_351": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_124": {
                "variable": {
                    "value": "perturbations",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, img_shape[0], img_shape[1], img_shape[2]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "perturbations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_129": {
                "variable": {
                    "value": "self.timgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, img_shape[0], img_shape[1], img_shape[2]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.timgs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_133": {
                "variable": {
                    "value": "self.consts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.consts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "self.assign_timgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, img_shape[0], img_shape[1], img_shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "self.assign_consts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_163": {
                "variable": {
                    "value": "self.bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x2 - self.x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_164": {
                "variable": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y1 - self.y2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_166": {
                "variable": {
                    "value": "self.box_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.class_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_169": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.newimgs - (tf.tanh(self.timgs) * self.boxmul + self.boxplus))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_173": {
                "variable": {
                    "value": "self.loss1_1_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.box_scores - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_180": {
                "variable": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.consts * self.loss_adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_188": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_195": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[perturbations] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_89": {
                "variable": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(box_scores, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "box_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bincount_90": {
                "variable": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "arr": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_110": {
                "variable": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(selected_cls, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmin(class_counts)",
                            "Call"
                        ],
                        [
                            "class_names.index(target_class)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_111": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(selected_cls, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmin(class_counts)",
                            "Call"
                        ],
                        [
                            "class_names.index(target_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_112": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_partition_113": {
                "variable": {
                    "value": "(_, selected_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.detection_model(caffe_imgs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, None, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dynamic_partition_114": {
                "variable": {
                    "value": "(_, selected_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "selected_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(boxes, [BATCH_SIZE, -1, 4])",
                            "Call"
                        ],
                        [
                            "tf.dynamic_partition(boxes, index, num_partitions=2, name='dynamic_partition')",
                            "Call"
                        ],
                        [
                            "tf.reshape(selected_boxes, [BATCH_SIZE, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(box_scores, [BATCH_SIZE, -1, CLASS_NUM])",
                            "Call"
                        ],
                        [
                            "tf.dynamic_partition(box_scores, index, num_partitions=2, name='dynamic_partition')",
                            "Call"
                        ],
                        [
                            "tf.reshape(selected_scores, [BATCH_SIZE, -1, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_partition_119": {
                "variable": {
                    "value": "(_, selected_objectness)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objectness",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "selected_objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected_objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(objectness, [BATCH_SIZE, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.dynamic_partition(objectness, index, num_partitions=2, name='dynamic_partition')",
                            "Call"
                        ],
                        [
                            "tf.reshape(selected_objectness, [BATCH_SIZE, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "selected_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.detection_model(caffe_imgs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, None, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "selected_objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objectness",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_169": {
                "x": {
                    "value": "self.newimgs - (tf.tanh(self.timgs) * self.boxmul + self.boxplus)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_173": {
                "x": {
                    "value": "self.box_scores - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_176": {
                "input_tensor": {
                    "value": "tf.square(tf.multiply(self.bw, self.bh))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_100": {
                "variable": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_146": {
                "x": {
                    "value": "perturbations + self.timgs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_176": {
                "x": {
                    "value": "tf.multiply(self.bw, self.bh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_102": {
                "variable": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(class_counts, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_103": {
                "variable": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_176": {
                "x": {
                    "value": "self.bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_102": {
                "x": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_169": {
                "x": {
                    "value": "self.timgs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_102": {
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "l2_yolov3.py": {
        "tensorflow": {
            "sigmoid_78": {
                "variable": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[..., 4:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "objectness",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_79": {
                "variable": {
                    "value": "box_class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "anchors_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([anchors[i] for i in mask])",
                            "Call"
                        ],
                        [
                            "np.repeat(anchors[np.newaxis, :, :], grid_w, axis=0)",
                            "Call"
                        ],
                        [
                            "np.repeat(anchors[np.newaxis, :, :, :], grid_h, axis=0)",
                            "Call"
                        ],
                        [
                            "np.repeat(anchors[np.newaxis, :, :, :, :], batchsize, axis=0)",
                            "Call"
                        ],
                        [
                            "[[10, 13], [16, 30], [33, 23], [30, 61], [62, 45], [59, 119], [116, 90], [156, 198], [373, 326]]",
                            "List"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "anchor_tensors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "box_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[..., 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "box_xy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_89": {
                "variable": {
                    "value": "box_wh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.exp(out[..., 2:4]) * anchors_tensors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "box_wh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[box_xy, box_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([box_xy, box_wh], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batchsize, -1, boxes.shape[-2], boxes.shape[-1]], name='boxes')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "tf.concat([boxes, b], 1, name='xywh')",
                            "Call"
                        ],
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, -1, boxes.shape[-2], boxes.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(out[..., 4:5], name='objectness')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_confidence, [batchsize, -1, box_confidence.shape[-2], box_confidence.shape[-1]], name='box_confidence')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, -1, box_confidence.shape[-2], box_confidence.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "box_confidence",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "box_class_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_class_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(out[..., 5:], name='class_probs')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_class_probs, [batchsize, -1, box_class_probs.shape[-2], box_class_probs.shape[-1]], name='class_probs')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, -1, box_class_probs.shape[-2], box_class_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "xy2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xy * xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_171": {
                "variable": {
                    "value": "bxby",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[bx, by]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "bxby",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bxby",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([bx, by], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bxby, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_188": {
                "variable": {
                    "value": "(x11, y11, w1, h1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs1",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_189": {
                "variable": {
                    "value": "(x21, y21, w2, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bs2",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_194": {
                "variable": {
                    "value": "xA",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(bs1, 4, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(x21)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_195": {
                "variable": {
                    "value": "yA",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(bs1, 4, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(y21)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_196": {
                "variable": {
                    "value": "xB",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x11 + w1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(x22)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_197": {
                "variable": {
                    "value": "yB",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y11 + h1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(y22)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_218": {
                "variable": {
                    "value": "expt",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "IoUs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_IoUs(boxes, boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_232": {
                "variable": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(box_scores, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "box_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bincount_233": {
                "variable": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "arr": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_234": {
                "variable": {
                    "value": "dominating_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_235": {
                "variable": {
                    "value": "dominating_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dominating_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(dominating_cls, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_236": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dominating_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(dominating_cls, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_237": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, dominating_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_partition_238": {
                "variable": {
                    "value": "(others, dominating_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([box_xy, box_wh], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batchsize, -1, boxes.shape[-2], boxes.shape[-1]], name='boxes')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "tf.concat([boxes, b], 1, name='xywh')",
                            "Call"
                        ],
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, dominating_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_493": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_494": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_515": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_162": {
                "input_tensor": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xy2 - 2 * tf.matmul(xy, tf.transpose(xy)) + tf.transpose(xy2)",
                            "BinOp"
                        ],
                        [
                            "self.attack_batch(imgs[i:i + self.batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_300": {
                "variable": {
                    "value": "perturbations",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, img_shape[0], img_shape[1], img_shape[2]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "perturbations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_305": {
                "variable": {
                    "value": "self.timgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, img_shape[0], img_shape[1], img_shape[2]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.timgs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_309": {
                "variable": {
                    "value": "self.consts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.consts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_312": {
                "variable": {
                    "value": "self.assign_timgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, img_shape[0], img_shape[1], img_shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_316": {
                "variable": {
                    "value": "self.assign_consts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_338": {
                "variable": {
                    "value": "self.box_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.obj_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_max(self.class_probs, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_341": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.newimgs - (tf.tanh(self.timgs) * self.boxmul + self.boxplus))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_345": {
                "variable": {
                    "value": "self.loss1_1_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.box_scores - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_349": {
                "variable": {
                    "value": "self.f3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.multiply(self.bw, self.bh))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_354": {
                "variable": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.consts * self.loss_adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_355": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_360": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_362": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_369": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[perturbations] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "xywh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "objecness",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[objecness, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "objectness",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[scores, s]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_161": {
                "a": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_194": {
                "a": {
                    "value": "x21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(bs2, 4, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_195": {
                "a": {
                    "value": "y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(bs2, 4, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_196": {
                "a": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x21 + w2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_197": {
                "a": {
                    "value": "y22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y21 + h2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_199": {
                "x": {
                    "value": "yB - yA + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_232": {
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_265": {
                "variable": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(box_scores, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "box_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bincount_266": {
                "variable": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "arr": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_286": {
                "variable": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(selected_cls, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmin(class_counts)",
                            "Call"
                        ],
                        [
                            "class_names.index(target_class)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_287": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(box_scores, axis=-1), tf.int32, name='box_classes')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(class_counts)",
                            "Call"
                        ],
                        [
                            "tf.cast(selected_cls, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.argmin(class_counts)",
                            "Call"
                        ],
                        [
                            "class_names.index(target_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_288": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, dominating_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_partition_289": {
                "variable": {
                    "value": "(_, selected_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([box_xy, box_wh], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batchsize, -1, boxes.shape[-2], boxes.shape[-1]], name='boxes')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "tf.concat([boxes, b], 1, name='xywh')",
                            "Call"
                        ],
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, dominating_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dynamic_partition_290": {
                "variable": {
                    "value": "(_, selected_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, dominating_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "variable": {
                    "value": "selected_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(boxes, [BATCH_SIZE, -1, 4])",
                            "Call"
                        ],
                        [
                            "tf.dynamic_partition(boxes, index, num_partitions=2, name='dynamic_partition')",
                            "Call"
                        ],
                        [
                            "tf.reshape(selected_boxes, [BATCH_SIZE, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_292": {
                "variable": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(box_scores, [BATCH_SIZE, -1, CLASS_NUM])",
                            "Call"
                        ],
                        [
                            "tf.dynamic_partition(box_scores, index, num_partitions=2, name='dynamic_partition')",
                            "Call"
                        ],
                        [
                            "tf.reshape(selected_scores, [BATCH_SIZE, -1, CLASS_NUM])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_partition_295": {
                "variable": {
                    "value": "(_, selected_objectness)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(box_classes, dominating_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.equal(box_classes, selected_cls)",
                            "Call"
                        ],
                        [
                            "tf.cast(index, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "variable": {
                    "value": "selected_objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "selected_objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(objectness, [BATCH_SIZE, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.dynamic_partition(objectness, index, num_partitions=2, name='dynamic_partition')",
                            "Call"
                        ],
                        [
                            "tf.reshape(selected_objectness, [BATCH_SIZE, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_89": {
                "x": {
                    "value": "out[..., 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "selected_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([box_xy, box_wh], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batchsize, -1, boxes.shape[-2], boxes.shape[-1]], name='boxes')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "b",
                            "variable"
                        ],
                        [
                            "tf.concat([boxes, b], 1, name='xywh')",
                            "Call"
                        ],
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_270": {
                "variable": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, CLASS_NUM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "selected_objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_output(outs)",
                            "Call"
                        ],
                        [
                            "select_class(self.target_class, boxes, objectness, classprobs, mode=self.attack_mode)",
                            "Call"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[BATCH_SIZE, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_338": {
                "input_tensor": {
                    "value": "self.class_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_341": {
                "x": {
                    "value": "self.newimgs - (tf.tanh(self.timgs) * self.boxmul + self.boxplus)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_345": {
                "x": {
                    "value": "self.box_scores - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_349": {
                "x": {
                    "value": "tf.multiply(self.bw, self.bh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "a": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xy",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(xy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_204": {
                "a": {
                    "value": "boxBArea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x22 - x21 + 1) * (y22 - y21 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_265": {
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores",
                            "Method Argument"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_276": {
                "variable": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_322": {
                "x": {
                    "value": "perturbations + self.timgs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_349": {
                "x": {
                    "value": "self.bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_278": {
                "variable": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(class_counts, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_279": {
                "variable": {
                    "value": "selected_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_278": {
                "x": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_341": {
                "x": {
                    "value": "self.timgs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_278": {
                "input": {
                    "value": "class_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.bincount(box_classes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(class_counts, 0), int(1000000.0) * tf.ones_like(class_counts, dtype=tf.int32), class_counts)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}