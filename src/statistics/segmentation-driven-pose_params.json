{
    "darknet.py": {
        "torch": {
            "max_pool2d_11": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pad(x, (0, 1, 0, 1), mode='replicate')",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_60": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(F.pad(x, (0, 1, 0, 1), mode='replicate'), 2, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, int(H / hs), hs, int(W / ws), ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, int(H / hs * W / ws), hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, int(H / hs), int(W / ws)).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, int(H / hs), int(W / ws))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, outputs[layers[i]]), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "models",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_272": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "pad_11": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(F.pad(x, (0, 1, 0, 1), mode='replicate'), 2, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, int(H / hs), hs, int(W / ws), ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, int(H / hs * W / ws), hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, int(H / hs), int(W / ws)).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, int(H / hs), int(W / ws))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, outputs[layers[i]]), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_269": {
                "f": {
                    "value": "weightfile",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MaxPool2d_185": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_173": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_197": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, outputs[layers[i]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_114": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(F.pad(x, (0, 1, 0, 1), mode='replicate'), 2, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, int(H / hs), hs, int(W / ws), ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, int(H / hs * W / ws), hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, int(H / hs), int(W / ws)).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, int(H / hs), int(W / ws))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, outputs[layers[i]]), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels",
                            "Attribute"
                        ],
                        [
                            "filters",
                            "Name"
                        ],
                        [
                            "int(stride * stride * prev_filters)",
                            "Call"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "prev_filters + out_filters[layers[i]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2) if is_pad else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "num_features": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels",
                            "Attribute"
                        ],
                        [
                            "filters",
                            "Name"
                        ],
                        [
                            "int(stride * stride * prev_filters)",
                            "Call"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "prev_filters + out_filters[layers[i]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2) if is_pad else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ReLU_175": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_116": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(F.pad(x, (0, 1, 0, 1), mode='replicate'), 2, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, int(H / hs), hs, int(W / ws), ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, int(H / hs * W / ws), hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, int(H / hs), int(W / ws)).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, int(H / hs), int(W / ws))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, outputs[layers[i]]), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_166": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels",
                            "Attribute"
                        ],
                        [
                            "filters",
                            "Name"
                        ],
                        [
                            "int(stride * stride * prev_filters)",
                            "Call"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "prev_filters + out_filters[layers[i]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2) if is_pad else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "num_features": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_170": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels",
                            "Attribute"
                        ],
                        [
                            "filters",
                            "Name"
                        ],
                        [
                            "int(stride * stride * prev_filters)",
                            "Call"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "prev_filters + out_filters[layers[i]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2) if is_pad else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_203": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "L1Loss_205": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_207": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_250": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "prev_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels",
                            "Attribute"
                        ],
                        [
                            "filters",
                            "Name"
                        ],
                        [
                            "int(stride * stride * prev_filters)",
                            "Call"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "prev_filters + out_filters[layers[i]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(prev_filters, filters)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(prev_filters, filters)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_253": {
                "in_features": {
                    "value": "prev_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels",
                            "Attribute"
                        ],
                        [
                            "filters",
                            "Name"
                        ],
                        [
                            "int(stride * stride * prev_filters)",
                            "Call"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "prev_filters + out_filters[layers[i]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_254": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_257": {
                "in_features": {
                    "value": "prev_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels",
                            "Attribute"
                        ],
                        [
                            "filters",
                            "Name"
                        ],
                        [
                            "int(stride * stride * prev_filters)",
                            "Call"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "prev_filters + out_filters[layers[i]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_258": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pose_2d_layer.py": {
        "torch": {}
    },
    "pose_seg_layer.py": {
        "torch": {
            "softmax_35": {
                "input": {
                    "value": "cls",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output[0:nC].transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "segpose_net.py": {
        "torch": {
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "m.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_69": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "self.coreModel.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weightfile",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_56": {
                "f": {
                    "value": "weightfile",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "CrossEntropyLoss_59": {
                "variable": {
                    "value": "seg_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_60": {
                "variable": {
                    "value": "pos_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_62": {
                "variable": {
                    "value": "conf_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_103": {
                "variable": {
                    "value": "seg_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "median_balancing_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_dataset.weight_cross_entropy.cuda() if use_gpu else train_dataset.weight_cross_entropy",
                            "IfExp"
                        ]
                    ]
                }
            },
            "L1Loss_104": {
                "variable": {
                    "value": "pos_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_106": {
                "variable": {
                    "value": "conf_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_116": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_116": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ycb_dataset.py": {
        "torch": {
            "from_numpy_208": {
                "variable": {
                    "value": "self.weight_cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "ndarray": {
                    "value": "seg_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seg_img[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(seg_label, (self.target_h, self.target_w), interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_158": {
                "input": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "kp_gt_map_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((self.target_h, self.target_w, self.n_kp))",
                            "Call"
                        ],
                        [
                            "np.zeros((self.target_h, self.target_w, self.n_kp))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_160": {
                "ndarray": {
                    "value": "mask_front[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_243": {
                "ndarray": {
                    "value": "img.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_243": {
                "input": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_244": {
                "ndarray": {
                    "value": "label_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cv2.imread(prefix + '-label.png')[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(label_img, (self.target_h, self.target_w), interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "cv2.imread(prefix + '-label.png')[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(label_img, (self.target_h, self.target_w), interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_245": {
                "ndarray": {
                    "value": "kp_gt_map_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((self.target_h, self.target_w, self.n_kp))",
                            "Call"
                        ],
                        [
                            "np.zeros((self.target_h, self.target_w, self.n_kp))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_246": {
                "ndarray": {
                    "value": "mask_front",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ma.getmaskarray(ma.masked_not_equal(seg_img, 0)).astype(int)",
                            "Call"
                        ],
                        [
                            "cv2.resize(mask_front, (self.target_h, self.target_w), interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "ma.getmaskarray(ma.masked_not_equal(label_img, 0)).astype(int)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}