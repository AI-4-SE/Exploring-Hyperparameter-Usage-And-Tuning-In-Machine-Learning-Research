{
    "datasets/datasets.py": {
        "torch": {
            "randperm_17": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Generator().manual_seed(seed)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(seed)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "row.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Generator().manual_seed(seed)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(seed)",
                            "Call"
                        ],
                        [
                            "torch.Generator().manual_seed(seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_51": {
                "variable": {
                    "value": "data.val_pos_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "data.test_pos_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "data.train_pos_edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Generator_139": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum([ord(c) for c in dataset_name])",
                            "Call"
                        ],
                        [
                            "sum([ord(c) for c in 'musae'])",
                            "Call"
                        ],
                        [
                            "sum([ord(c) for c in 'bitcoin'])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_152": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "df.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_197": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "df.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "df.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_204": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Generator_212": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_212": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum([ord(c) for c in dataset_name])",
                            "Call"
                        ],
                        [
                            "sum([ord(c) for c in 'musae'])",
                            "Call"
                        ],
                        [
                            "sum([ord(c) for c in 'bitcoin'])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_215": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.size(0)",
                            "Call"
                        ],
                        [
                            "y.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.size(0)",
                            "Call"
                        ],
                        [
                            "y.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.size(0)",
                            "Call"
                        ],
                        [
                            "y.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Generator_259": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_259": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum([ord(c) for c in dataset_name])",
                            "Call"
                        ],
                        [
                            "sum([ord(c) for c in 'musae'])",
                            "Call"
                        ],
                        [
                            "sum([ord(c) for c in 'bitcoin'])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_116": {
                "obj": {
                    "value": "self.collate(data_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "self.collate(data_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y.to_numpy(dtype=np.int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_207": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pd.read_csv(file)['target']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(y.to_numpy(dtype=np.int))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(df.to_numpy()).view(-1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_index.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_130": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/st_datasets.py": {
        "torch": {
            "from_numpy_49": {
                "variable": {
                    "value": "adj_mx_ts",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "adj_mx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_scaler.transform(raw_data[name]['y'][..., FEATURE_START:FEATURE_END])",
                            "Call"
                        ],
                        [
                            "y[:, :, 0:1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "ndarray": {
                    "value": "x_attr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attr_scaler.transform(raw_data[name]['x'][..., ATTR_START:ATTR_END])",
                            "Call"
                        ],
                        [
                            "x_attr[:, :, 0:1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_109": {
                "ndarray": {
                    "value": "y_attr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attr_scaler.transform(raw_data[name]['y'][..., ATTR_START:ATTR_END])",
                            "Call"
                        ],
                        [
                            "y_attr[:, :, 0:1, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "models/base_models/DCRNN.py": {
        "torch": {
            "sparse_coo_tensor_126": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "L.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "L.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_141": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fn(inputs, hx, output_size, bias_start=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(fn(inputs, hx, output_size, bias_start=1.0))",
                            "Call"
                        ],
                        [
                            "torch.reshape(value, (-1, self._num_nodes, output_size))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(torch.matmul(inputs_and_state, weights))",
                            "Call"
                        ],
                        [
                            "value + biases",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self._num_nodes, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_143": {
                "variable": {
                    "value": "(r, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(fn(inputs, hx, output_size, bias_start=1.0))",
                            "Call"
                        ],
                        [
                            "torch.reshape(value, (-1, self._num_nodes, output_size))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(torch.matmul(inputs_and_state, weights))",
                            "Call"
                        ],
                        [
                            "value + biases",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(r, (-1, self._num_nodes * self._num_units))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self._num_nodes * self._num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(u, (-1, self._num_nodes * self._num_units))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self._num_nodes * self._num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(inputs, (batch_size * self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(inputs, (batch_size, self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "data['x'].permute(1, 0, 2, 3).flatten(2, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * self._num_nodes, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(state, (batch_size * self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(state, (batch_size, self._num_nodes, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * self._num_nodes, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "inputs_and_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(inputs_and_state, weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(inputs, (batch_size * self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(inputs, (batch_size, self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "data['x'].permute(1, 0, 2, 3).flatten(2, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, self._num_nodes, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(state, (batch_size * self._num_nodes, -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(state, (batch_size, self._num_nodes, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, self._num_nodes, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "inputs_and_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x0, shape=[self._num_nodes, input_size * batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._num_nodes, input_size * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_185": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x0, shape=[self._num_nodes, input_size * batch_size])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_and_state",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(x0, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[num_matrices, self._num_nodes, input_size, batch_size])",
                            "Call"
                        ],
                        [
                            "x.permute(3, 1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[batch_size * self._num_nodes, input_size * num_matrices])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "x + biases",
                            "BinOp"
                        ],
                        [
                            "self._concat(x, x1)",
                            "Call"
                        ],
                        [
                            "self._concat(x, x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_matrices, self._num_nodes, input_size, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_202": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_and_state",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(x0, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[num_matrices, self._num_nodes, input_size, batch_size])",
                            "Call"
                        ],
                        [
                            "x.permute(3, 1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[batch_size * self._num_nodes, input_size * num_matrices])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "x + biases",
                            "BinOp"
                        ],
                        [
                            "self._concat(x, x1)",
                            "Call"
                        ],
                        [
                            "self._concat(x, x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * self._num_nodes, input_size * num_matrices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_and_state",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(x0, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[num_matrices, self._num_nodes, input_size, batch_size])",
                            "Call"
                        ],
                        [
                            "x.permute(3, 1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[batch_size * self._num_nodes, input_size * num_matrices])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "x + biases",
                            "BinOp"
                        ],
                        [
                            "self._concat(x, x1)",
                            "Call"
                        ],
                        [
                            "self._concat(x, x2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_params.get_weights((input_size, output_size), device=inputs.device)",
                            "Call"
                        ],
                        [
                            "self._gconv_params.get_weights((input_size * num_matrices, output_size), device=inputs.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_232": {
                "variable": {
                    "value": "self.dcgru_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DCGRUCell(self.rnn_units, adj_mx, self.max_diffusion_step, self.num_nodes, filter_type=self.filter_type) for _ in range(self.num_rnn_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_268": {
                "variable": {
                    "value": "self.dcgru_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DCGRUCell(self.rnn_units, adj_mx, self.max_diffusion_step, self.num_nodes, filter_type=self.filter_type) for _ in range(self.num_rnn_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_332": {
                "variable": {
                    "value": "go_symbol",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.num_nodes * self.decoder_model.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "encoder_hidden_state.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_348": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "self.decoder(encoder_hidden_state, labels, batches_seen=batches_seen)",
                            "Call"
                        ],
                        [
                            "outputs.view(self.decoder_model.horizon, outputs.shape[1], self.num_nodes, -1)",
                            "Call"
                        ],
                        [
                            "outputs.permute(1, 0, 2, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "nn_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(*shape, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(length, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "[x, x_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_and_state",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(x0, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[num_matrices, self._num_nodes, input_size, batch_size])",
                            "Call"
                        ],
                        [
                            "x.permute(3, 1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[batch_size * self._num_nodes, input_size * num_matrices])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, weights)",
                            "Call"
                        ],
                        [
                            "x + biases",
                            "BinOp"
                        ],
                        [
                            "self._concat(x, x1)",
                            "Call"
                        ],
                        [
                            "self._concat(x, x2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, self._num_nodes * output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_rnn_layers, batch_size, self.hidden_state_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "input": {
                    "value": "inputs_and_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([inputs, state], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([inputs, state], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_params.get_weights((input_size, output_size), device=inputs.device)",
                            "Call"
                        ],
                        [
                            "self._gconv_params.get_weights((input_size * num_matrices, output_size), device=inputs.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_191": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "supports",
                            "Name"
                        ],
                        [
                            "self._supports",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x0, shape=[self._num_nodes, input_size * batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_257": {
                "tensors": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_292": {
                "tensors": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_64": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_73": {
                "*size": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_195": {
                "input": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "supports",
                            "Name"
                        ],
                        [
                            "self._supports",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(support, x0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/base_models/GCN.py": {
        "torch": {
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_22": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index, edge_weight)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_models/GRUSeq2Seq.py": {
        "torch": {
            "GRU_21": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "gru_num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ],
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ],
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_52": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_52": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_113": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "gru_num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ],
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ],
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['output_size']",
                            "Subscript"
                        ],
                        [
                            "kwargs['output_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_135": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_135": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_135": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "h_encode",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_encode, graph_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GRU_193": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "gru_num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ],
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ],
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['output_size']",
                            "Subscript"
                        ],
                        [
                            "kwargs['output_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_227": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_227": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_227": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_233": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_233": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "h_encode",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_encode, graph_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GRU_26": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "gru_num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ],
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ],
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['output_size']",
                            "Subscript"
                        ],
                        [
                            "kwargs['output_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "GRU_31": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "gru_num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ],
                        [
                            "kwargs['gru_num_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ],
                        [
                            "kwargs['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "kwargs['hidden_size']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs['output_size']",
                            "Subscript"
                        ],
                        [
                            "kwargs['output_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_56": {
                "variable": {
                    "value": "h_encode",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_encode, graph_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, y_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_58": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_58": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_input[-1:], y_input[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, y_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_147": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_147": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_input[-1:], y_input[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, y_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_247": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_247": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_input[-1:], y_input[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "last_input_from_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "last_input_from_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_input[t:t + 1], y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "last_input_from_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "last_input_from_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_input[t:t + 1], y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "last_input_from_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "last_input_from_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_input[t:t + 1], y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_78": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_167": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_267": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_models/GraphNets.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src, dest, edge_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, received_msg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[agg_node, agg_edge, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_119": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.node_out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_node_input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "node_input_size",
                            "Name"
                        ],
                        [
                            "last_node_input_size + updated_node_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "node_output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, u[batch]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, u[batch]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[updated_x, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[updated_edge_attr, edge_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[updated_u, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "last_layer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "last_layer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/base_models/MLP.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "last_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_models/NRIDecoder.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.message_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.update_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_72": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_72": {
                "variable": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_49": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, y_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_74": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_74": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_input[-1:], y_input[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "2 * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "(x_i, x_j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "last_input_from_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "last_input_from_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_input[t:t + 1], y_attr_input[t:t + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_105": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/node_classifiers/federated.py": {
        "torch": {
            "ModuleList_236": {
                "variable": {
                    "value": "self.clients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.clients",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_269": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/node_classifiers/split.py": {
        "torch": {
            "ModuleList_169": {
                "variable": {
                    "value": "self.clients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.clients",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.prop_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "base_models.GCN(input_size=self.hparams.hidden_size, hidden_size=self.hparams.hidden_size, output_size=self.hparams.hidden_size, dropout=self.hparams.dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_181": {
                "variable": {
                    "value": "self.prop_model_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.prop_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encodings, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encodings, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encodings, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "hiddens_msg_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens_msg_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hiddens_msg_grad, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encodings, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encodings, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encodings, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encodings, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encodings, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encodings, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_179": {
                "p": {
                    "value": "self.hparams.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/node_classifiers/standalone.py": {
        "torch": {
            "Adam_63": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_67": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_95": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_109": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/st_prediction/federated.py": {
        "torch": {
            "empty_cache_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_151": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(cuda_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_157": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(cuda_id))",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_156": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_234": {
                "variable": {
                    "value": "client_datasets[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data[name]['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/st_prediction/federated_mtl.py": {
        "torch": {
            "cat_70": {
                "variable": {
                    "value": "flattend_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[1].flatten() for x in named_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_cache_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_177": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(cuda_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_183": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(cuda_id))",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_291": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_182": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_261": {
                "variable": {
                    "value": "client_datasets[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data[name]['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_cache_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/st_prediction/split.py": {
        "torch": {
            "Conv1d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['train']['x'].shape[-1] + self.data['train']['x_attr'].shape[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['train']['y'].shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "self.val_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "self.test_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_280": {
                "variable": {
                    "value": "self.clients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.clients",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_301": {
                "variable": {
                    "value": "self.prop_model_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.prop_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "hiddens_msg_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens_msg_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hiddens_msg_grad, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_num, n, -1, ts).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_191": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(cuda_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_196": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(cuda_id))",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_305": {
                "variable": {
                    "value": "temp_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.graph_dataset['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "EdgeDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_315": {
                "dataset": {
                    "value": "self.graph_dataset['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "EdgeDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_318": {
                "dataset": {
                    "value": "self.graph_dataset['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "EdgeDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_321": {
                "dataset": {
                    "value": "self.graph_dataset['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "EdgeDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "stacked_encodings[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc[k] for enc in encodings]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_470": {
                "variable": {
                    "value": "stacked_encodings[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc[k] for enc in encodings]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "stacked_encodings[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc[k] for enc in encodings]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "(x, x_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "(y, y_attr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_195": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorDataset_256": {
                "variable": {
                    "value": "self.graph_dataset[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.zeros_like(self.data[name]['y'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_261": {
                "variable": {
                    "value": "client_datasets[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data[name]['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_256": {
                "input": {
                    "value": "self.data[name]['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/st_prediction/split_fed_gnn.py": {
        "torch": {
            "cat_332": {
                "variable": {
                    "value": "updated_graph_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "updated_graph_encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(updated_graph_encoding, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(updated_graph_encoding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "updated_graph_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "updated_graph_encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(updated_graph_encoding, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(updated_graph_encoding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_155": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(cuda_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_275": {
                "variable": {
                    "value": "self.server_datasets[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.data[name]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "enable_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_157": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(cuda_id))",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_161": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorDataset_236": {
                "variable": {
                    "value": "client_datasets[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data[name]['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "enable_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_452": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_159": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(cuda_id))",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_241": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "data[name]['x'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hparams.gru_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.hparams.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_241": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_338": {
                "*tensors": {
                    "value": "self.data['train']['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_379": {
                "*tensors": {
                    "value": "self.data[name]['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MSELoss_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/st_prediction/split_fed_gnn_hetero.py": {
        "torch": {
            "cat_70": {
                "variable": {
                    "value": "flattend_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[1].flatten() for x in named_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_430": {
                "variable": {
                    "value": "updated_graph_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "updated_graph_encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(updated_graph_encoding, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(updated_graph_encoding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_485": {
                "variable": {
                    "value": "updated_graph_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "updated_graph_encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(updated_graph_encoding, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(updated_graph_encoding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(cuda_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_295": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_323": {
                "variable": {
                    "value": "self.server_datasets[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.data[name]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "enable_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_181": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(cuda_id))",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_185": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorDataset_264": {
                "variable": {
                    "value": "client_datasets[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data[name]['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "enable_grad_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_567": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_183": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(cuda_id))",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_475": {
                "variable": {
                    "value": "h_encode",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_encode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_model.forward_encoder(data).detach()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_encode, dim=1).to(device)",
                            "Call"
                        ],
                        [
                            "h_encode.view(h_encode.shape[0], batch_num, node_num, h_encode.shape[2])",
                            "Call"
                        ],
                        [
                            "self.base_model.forward_encoder(data).detach()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_encode, dim=1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_269": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "data[name]['x'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hparams.gru_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.hparams.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_269": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "h_encode",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_encode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_model.forward_encoder(data).detach()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_encode, dim=1).to(device)",
                            "Call"
                        ],
                        [
                            "h_encode.view(h_encode.shape[0], batch_num, node_num, h_encode.shape[2])",
                            "Call"
                        ],
                        [
                            "self.base_model.forward_encoder(data).detach()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_encode, dim=1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_432": {
                "*tensors": {
                    "value": "self.data['train']['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_489": {
                "*tensors": {
                    "value": "self.data[name]['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MSELoss_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/st_prediction/split_gnn.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "self.val_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "self.test_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_240": {
                "variable": {
                    "value": "self.clients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.clients",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_255": {
                "variable": {
                    "value": "self.prop_model_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.prop_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_285": {
                "variable": {
                    "value": "stacked_encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "hiddens_msg_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens_msg_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hiddens_msg_grad, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_423": {
                "variable": {
                    "value": "stacked_encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_461": {
                "variable": {
                    "value": "stacked_encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_259": {
                "dataset": {
                    "value": "self.graph_dataset['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "EdgeDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_262": {
                "dataset": {
                    "value": "self.graph_dataset['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "EdgeDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_265": {
                "dataset": {
                    "value": "self.graph_dataset['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "EdgeDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_216": {
                "variable": {
                    "value": "self.graph_dataset[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.zeros_like(self.data[name]['y'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_221": {
                "variable": {
                    "value": "client_datasets[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data[name]['x'][:, :, client_i:client_i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_216": {
                "input": {
                    "value": "self.data[name]['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/st_prediction/standalone.py": {
        "torch": {
            "abs_26": {
                "variable": {
                    "value": "mae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "mae",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_28": {
                "variable": {
                    "value": "mape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y_pred - y) / y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_28": {
                "variable": {
                    "value": "mape",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_138": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=self.hparams.lr, eps=0.001, weight_decay=self.hparams.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[20, 30, 40, 50]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_143": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_102": {
                "*tensors": {
                    "value": "self.data[name]['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/callbacks.py": {
        "torch": {}
    },
    "utils/dcov.py": {
        "torch": {
            "zeros_44": {
                "variable": {
                    "value": "distance_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils/diff_privacy.py": {
        "torch": {
            "Laplace_27": {
                "variable": {
                    "value": "y_star",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones_like(self.x) * (self.delta / self.eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bernoulli_37": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.x - self.alpha) / self.delta",
                            "BinOp"
                        ],
                        [
                            "p * (exp - 1) / (exp + 1) + 1 / (exp + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.x - self.alpha) / self.delta",
                            "BinOp"
                        ],
                        [
                            "2 * t - 1",
                            "BinOp"
                        ],
                        [
                            "mask_left * (torch.rand_like(t) * (L + C) - C)",
                            "BinOp"
                        ],
                        [
                            "t + mask_right * (torch.rand_like(t) * (C - R) + R)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_26": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_66": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.x - self.alpha) / self.delta",
                            "BinOp"
                        ],
                        [
                            "2 * t - 1",
                            "BinOp"
                        ],
                        [
                            "mask_left * (torch.rand_like(t) * (L + C) - C)",
                            "BinOp"
                        ],
                        [
                            "t + mask_right * (torch.rand_like(t) * (C - R) + R)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_67": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.x - self.alpha) / self.delta",
                            "BinOp"
                        ],
                        [
                            "2 * t - 1",
                            "BinOp"
                        ],
                        [
                            "mask_left * (torch.rand_like(t) * (L + C) - C)",
                            "BinOp"
                        ],
                        [
                            "t + mask_right * (torch.rand_like(t) * (C - R) + R)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_68": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.x - self.alpha) / self.delta",
                            "BinOp"
                        ],
                        [
                            "2 * t - 1",
                            "BinOp"
                        ],
                        [
                            "mask_left * (torch.rand_like(t) * (L + C) - C)",
                            "BinOp"
                        ],
                        [
                            "t + mask_right * (torch.rand_like(t) * (C - R) + R)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}