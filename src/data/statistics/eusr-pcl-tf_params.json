{
    "test/test.py": {
        "tensorflow": {
            "placeholder_25": {
                "variable": {
                    "value": "model_input_path",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "read_file_26": {
                "variable": {
                    "value": "decoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "model_input_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_png_27": {
                "variable": {
                    "value": "decoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "decoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(model_input_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(decoded_image, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(decoded_image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "decoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(model_input_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(decoded_image, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(decoded_image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "flag_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_41": {
                "variable": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.import_graph_def(model_graph_def, name='model', input_map={'sr_input:0': [model_input], 'sr_flag_scale:0': flag_scale}, return_elements=['sr_output:0'])[0]",
                            "Subscript"
                        ],
                        [
                            "model_output[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.round(model_output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(model_output, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(model_output, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_42": {
                "variable": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.import_graph_def(model_graph_def, name='model', input_map={'sr_input:0': [model_input], 'sr_flag_scale:0': flag_scale}, return_elements=['sr_output:0'])[0]",
                            "Subscript"
                        ],
                        [
                            "model_output[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.round(model_output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(model_output, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(model_output, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.import_graph_def(model_graph_def, name='model', input_map={'sr_input:0': [model_input], 'sr_flag_scale:0': flag_scale}, return_elements=['sr_output:0'])[0]",
                            "Subscript"
                        ],
                        [
                            "model_output[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.round(model_output)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(model_output, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(model_output, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "model_output_path",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "encode_target_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "encode_png_48": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "encode_target_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, [None, None, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "write_file_49": {
                "variable": {
                    "value": "write_op",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "model_output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, [])",
                            "Call"
                        ]
                    ]
                },
                "contents": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.encode_png(encode_target_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_51": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_53": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(log_device_placement=False, allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_35": {
                "variable": {
                    "value": "model_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_34": {
                "name": {
                    "value": "args.model_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_38": {
                "graph_def": {
                    "value": "model_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'sr_input:0': [model_input], 'sr_flag_scale:0': flag_scale}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "['sr_output:0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_53": {
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}