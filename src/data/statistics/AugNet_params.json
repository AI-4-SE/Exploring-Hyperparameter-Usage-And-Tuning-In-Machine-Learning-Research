{
    "lib/utils_torch.py": {
        "sklearn": {},
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.cnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.cnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTM_55": {
                "variable": {
                    "value": "self.BiLSTM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_58": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "nn.Conv2d(channels[0], channels[1], kernel_size, strides, padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.seq0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nin_block([3, 192, 160, 96], kernel_size=5, strides=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.seq1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nin_block([96, 192, 192, 192], kernel_size=5, strides=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.seq0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nin_block([3, 192, 160, 96], kernel_size=5, strides=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.seq1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nin_block([96, 192, 192, 192], kernel_size=5, strides=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.seq0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nin_block([3, 192, 160, 96], kernel_size=5, strides=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.seq1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nin_block([96, 192, 192, 192], kernel_size=5, strides=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_174": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_194": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_262": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_271": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn1(x)",
                            "Call"
                        ],
                        [
                            "self.cnn2(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_177": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_197": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.seq2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features * k_size * k_size, n_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_260": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_276": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(np.arange(x.size(0)).repeat(x.size(1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_80": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_84": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_90": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_111": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_119": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_137": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_141": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_151": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_210": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.seq2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features * k_size * k_size, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cdist_272": {
                "x1": {
                    "value": "x.reshape([-1, x.size(-1)])",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, 1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_282": {
                "variable": {
                    "value": "sims_clone",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.cdist(x.reshape([-1, x.size(-1)]), centers, p=2)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_288": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ce(sims, labels)",
                            "Call"
                        ],
                        [
                            "loss_others - loss_self",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_171": {
                "f": {
                    "value": "path_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_191": {
                "f": {
                    "value": "path_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "in_features * k_size * k_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_221": {
                "in_features": {
                    "value": "in_features * k_size * k_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_222": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_225": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_285": {
                "input": {
                    "value": "sims_clone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clone(sims)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "res34_model_training_with_STL.py": {
        "sklearn": {},
        "torch": {
            "Adam_59": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "my_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(gpus[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "my_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "my_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net34().to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(my_model, gpus)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_augs.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_model(Xs)",
                            "Call"
                        ],
                        [
                            "torch.reshape(hs, [n_pics, n_samples, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_pics, n_samples, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_98": {
                "obj": {
                    "value": "my_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./models/res34_model_training_with_STL_' + str(time.time()).replace('.', '') + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {}
    },
    "res50_model_training_with_ImageNet.py": {
        "torch": {
            "DataParallel_135": {
                "variable": {
                    "value": "my_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "my_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net().to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(my_model, gpus)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "my_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                }
            },
            "device_125": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(gpus[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.pre.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_51": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_65": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_augs.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_model(Xs)",
                            "Call"
                        ],
                        [
                            "torch.reshape(hs, [n_pics, n_samples, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_pics, n_samples, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_54": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_63": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(np.arange(x.size(0)).repeat(x.size(1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cdist_75": {
                "x1": {
                    "value": "x.reshape([-1, x.size(-1)])",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, 1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_85": {
                "variable": {
                    "value": "sims_clone",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.cdist(x.reshape([-1, x.size(-1)]), centers, p=2)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_91": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(hs, mode='contrast', optimizer=optimizer)",
                            "Call"
                        ],
                        [
                            "self.ce(sims, labels)",
                            "Call"
                        ],
                        [
                            "loss_others - loss_self",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_48": {
                "f": {
                    "value": "path_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_195": {
                "obj": {
                    "value": "my_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./models/final_res50_model_training_with_ImageNet.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "max_88": {
                "input": {
                    "value": "sims_clone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clone(sims)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}