{
    "oaag-dy/run_summarization.py": {
        "sklearn": {
            "precision_recall_fscore_support_282": {
                "variable": {
                    "value": "(p_class, r_class, f_class, support_micro)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1, 2]",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "DEFINE_string_36": {
                "name": {
                    "value": "data_path",
                    "possible_values": []
                },
                "default": {
                    "value": "data/sport/chunked/train_*",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to tf.Example datafiles. Can include wildcards to access multiple datafiles.",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "valid_path",
                    "possible_values": []
                },
                "default": {
                    "value": "data/sport/chunked/test_*",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to tf.Example validation datafiles. Can include wildcards to access multiple datafiles.",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "vocab_path",
                    "possible_values": []
                },
                "default": {
                    "value": "data/sport/vocab",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to text vocabulary file.",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "mode",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "possible_values": []
                },
                "help": {
                    "value": "must be one of train/eval/decode",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "log_root",
                    "possible_values": []
                },
                "default": {
                    "value": "model",
                    "possible_values": []
                },
                "help": {
                    "value": "Root directory for all logging.",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "exp_name",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "Name for experiment. Logs will be saved in a directory with this name, under log_root.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "possible_values": []
                },
                "help": {
                    "value": "dimension of RNN hidden states",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "emb_dim",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "dimension of word embeddings",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "possible_values": []
                },
                "help": {
                    "value": "minibatch size",
                    "possible_values": []
                }
            },
            "DEFINE_integer_52": {
                "name": {
                    "value": "max_enc_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of encoder (max source text tokens)",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "max_dec_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of decoder (max summary tokens)",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "review_num",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "possible_values": []
                },
                "help": {
                    "value": "max number of reviews for each question.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "beam_size",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "possible_values": []
                },
                "help": {
                    "value": "beam size for beam search decoding.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_56": {
                "name": {
                    "value": "min_dec_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "possible_values": []
                },
                "help": {
                    "value": "Minimum sequence length of generated summary. Applies only for beam search decoding mode",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "vocab_size",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of vocabulary. These will be read from the vocabulary file in order. If the vocabulary file contains fewer words than this number, or if this number is set to 0, will take all words in the vocabulary file.",
                    "possible_values": []
                }
            },
            "DEFINE_float_58": {
                "name": {
                    "value": "lr",
                    "possible_values": []
                },
                "default": {
                    "value": "0.15",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate",
                    "possible_values": []
                }
            },
            "DEFINE_float_59": {
                "name": {
                    "value": "adagrad_init_acc",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "initial accumulator value for Adagrad",
                    "possible_values": []
                }
            },
            "DEFINE_float_60": {
                "name": {
                    "value": "rand_unif_init_mag",
                    "possible_values": []
                },
                "default": {
                    "value": "0.02",
                    "possible_values": []
                },
                "help": {
                    "value": "magnitude for lstm cells random uniform inititalization",
                    "possible_values": []
                }
            },
            "DEFINE_float_61": {
                "name": {
                    "value": "trunc_norm_init_std",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "help": {
                    "value": "std of trunc norm init, used for initializing everything else",
                    "possible_values": []
                }
            },
            "DEFINE_float_62": {
                "name": {
                    "value": "max_grad_norm",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "possible_values": []
                },
                "help": {
                    "value": "for gradient clipping",
                    "possible_values": []
                }
            },
            "DEFINE_float_70": {
                "name": {
                    "value": "cov_loss_wt",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "possible_values": []
                },
                "help": {
                    "value": "Weight of coverage loss (lambda in the paper). If zero, then no incentive to minimize coverage loss.",
                    "possible_values": []
                }
            },
            "DEFINE_float_71": {
                "name": {
                    "value": "sa_loss_wt",
                    "possible_values": []
                },
                "default": {
                    "value": "0.2",
                    "possible_values": []
                },
                "help": {
                    "value": "Weight of opinion mining loss (lambda in the paper). If zero, then no incentive to minimize coverage loss.",
                    "possible_values": []
                }
            },
            "Summary_101": {
                "variable": {
                    "value": "loss_sum",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_114": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.all_variables() if 'Adagrad' not in v.name]",
                    "possible_values": []
                }
            },
            "Saver_128": {
                "variable": {
                    "value": "new_saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_139": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "possible_values": []
                }
            },
            "Saver_144": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if 'coverage' not in v.name and 'Adagrad' not in v.name]",
                    "possible_values": []
                }
            },
            "Saver_152": {
                "variable": {
                    "value": "new_saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Supervisor_171": {
                "variable": {
                    "value": "sv",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.log_root, 'train/model.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "is_chief": {
                    "value": "True",
                    "possible_values": []
                },
                "saver": {
                    "value": "saver",
                    "possible_values": [
                        [
                            "tf.train.Saver([v for v in tf.all_variables() if 'Adagrad' not in v.name])",
                            "Call"
                        ],
                        [
                            "tf.train.Saver([v for v in tf.global_variables() if 'coverage' not in v.name and 'Adagrad' not in v.name])",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(max_to_keep=3)",
                            "Call"
                        ],
                        [
                            "sv.saver",
                            "Attribute"
                        ]
                    ]
                },
                "summary_op": {
                    "value": "None",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "600",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "None",
                    "possible_values": []
                },
                "global_step": {
                    "value": "model.global_step",
                    "possible_values": []
                }
            },
            "info_105": {
                "msg": {
                    "value": "running_avg_loss: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "running_avg_loss",
                    "possible_values": [
                        [
                            "loss",
                            "Name"
                        ],
                        [
                            "running_avg_loss * decay + (1 - decay) * loss",
                            "BinOp"
                        ],
                        [
                            "min(running_avg_loss, 12)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_111": {
                "msg": {
                    "value": "Restoring bestmodel for training...",
                    "possible_values": []
                }
            },
            "info_136": {
                "msg": {
                    "value": "converting non-coverage model to coverage model..",
                    "possible_values": []
                }
            },
            "info_179": {
                "msg": {
                    "value": "Preparing or waiting for session...",
                    "possible_values": []
                }
            },
            "info_181": {
                "msg": {
                    "value": "Created session.",
                    "possible_values": []
                }
            },
            "info_191": {
                "msg": {
                    "value": "starting run_training",
                    "possible_values": []
                }
            },
            "info_264": {
                "msg": {
                    "value": "running validation step...",
                    "possible_values": []
                }
            },
            "info_280": {
                "msg": {
                    "value": "seconds for validation step: %.3f",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "possible_values": []
                }
            },
            "set_verbosity_296": {
                "level": {
                    "value": "tf.compat.v1.logging.INFO",
                    "possible_values": []
                }
            },
            "info_297": {
                "msg": {
                    "value": "Starting seq2seq_attention in %s mode...",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.mode",
                    "possible_values": []
                }
            },
            "set_random_seed_331": {
                "seed": {
                    "value": "111",
                    "possible_values": []
                }
            },
            "run_347": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "initialize_all_variables_116": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_141": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_274": {
                "msg": {
                    "value": "validation batch accuracy: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "accuracy",
                    "possible_values": [
                        [
                            "results['accuracy']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_185": {
                "msg": {
                    "value": "Caught keyboard interrupt on worker. Stopping supervisor...",
                    "possible_values": []
                }
            },
            "info_215": {
                "msg": {
                    "value": "loss: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "results['loss']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "info_224": {
                "msg": {
                    "value": "train_step: %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "train_step",
                    "possible_values": [
                        [
                            "results['global_step']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_variables_119": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_144": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_212": {
                "msg": {
                    "value": "coverage_loss: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "coverage_loss",
                    "possible_values": [
                        [
                            "results['coverage_loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_234": {
                "msg": {
                    "value": "seconds for training step: %.3f",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "possible_values": []
                }
            }
        }
    },
    "oaag-static/run_summarization.py": {
        "sklearn": {
            "precision_recall_fscore_support_282": {
                "variable": {
                    "value": "(p_class, r_class, f_class, support_micro)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1, 2]",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "DEFINE_string_36": {
                "name": {
                    "value": "data_path",
                    "possible_values": []
                },
                "default": {
                    "value": "data/home/chunked/train_*",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to tf.Example datafiles. Can include wildcards to access multiple datafiles.",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "valid_path",
                    "possible_values": []
                },
                "default": {
                    "value": "data/home/chunked/test_*",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to tf.Example validation datafiles. Can include wildcards to access multiple datafiles.",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "vocab_path",
                    "possible_values": []
                },
                "default": {
                    "value": "data/home/vocab",
                    "possible_values": []
                },
                "help": {
                    "value": "Path expression to text vocabulary file.",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "mode",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "possible_values": []
                },
                "help": {
                    "value": "must be one of train/eval/decode",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "log_root",
                    "possible_values": []
                },
                "default": {
                    "value": "model",
                    "possible_values": []
                },
                "help": {
                    "value": "Root directory for all logging.",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "exp_name",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "Name for experiment. Logs will be saved in a directory with this name, under log_root.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "possible_values": []
                },
                "help": {
                    "value": "dimension of RNN hidden states",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "emb_dim",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "dimension of word embeddings",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "possible_values": []
                },
                "help": {
                    "value": "minibatch size",
                    "possible_values": []
                }
            },
            "DEFINE_integer_52": {
                "name": {
                    "value": "max_enc_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of encoder (max source text tokens)",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "max_dec_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "possible_values": []
                },
                "help": {
                    "value": "max timesteps of decoder (max summary tokens)",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "review_num",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "possible_values": []
                },
                "help": {
                    "value": "max number of reviews for each question.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "beam_size",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "possible_values": []
                },
                "help": {
                    "value": "beam size for beam search decoding.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_56": {
                "name": {
                    "value": "min_dec_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "possible_values": []
                },
                "help": {
                    "value": "Minimum sequence length of generated summary. Applies only for beam search decoding mode",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "vocab_size",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of vocabulary. These will be read from the vocabulary file in order. If the vocabulary file contains fewer words than this number, or if this number is set to 0, will take all words in the vocabulary file.",
                    "possible_values": []
                }
            },
            "DEFINE_float_58": {
                "name": {
                    "value": "lr",
                    "possible_values": []
                },
                "default": {
                    "value": "0.15",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate",
                    "possible_values": []
                }
            },
            "DEFINE_float_59": {
                "name": {
                    "value": "adagrad_init_acc",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "initial accumulator value for Adagrad",
                    "possible_values": []
                }
            },
            "DEFINE_float_60": {
                "name": {
                    "value": "rand_unif_init_mag",
                    "possible_values": []
                },
                "default": {
                    "value": "0.02",
                    "possible_values": []
                },
                "help": {
                    "value": "magnitude for lstm cells random uniform inititalization",
                    "possible_values": []
                }
            },
            "DEFINE_float_61": {
                "name": {
                    "value": "trunc_norm_init_std",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "help": {
                    "value": "std of trunc norm init, used for initializing everything else",
                    "possible_values": []
                }
            },
            "DEFINE_float_62": {
                "name": {
                    "value": "max_grad_norm",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "possible_values": []
                },
                "help": {
                    "value": "for gradient clipping",
                    "possible_values": []
                }
            },
            "DEFINE_float_70": {
                "name": {
                    "value": "cov_loss_wt",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "possible_values": []
                },
                "help": {
                    "value": "Weight of coverage loss (lambda in the paper). If zero, then no incentive to minimize coverage loss.",
                    "possible_values": []
                }
            },
            "DEFINE_float_71": {
                "name": {
                    "value": "sa_loss_wt",
                    "possible_values": []
                },
                "default": {
                    "value": "0.2",
                    "possible_values": []
                },
                "help": {
                    "value": "Weight of opinion mining loss (lambda in the paper). If zero, then no incentive to minimize coverage loss.",
                    "possible_values": []
                }
            },
            "Summary_101": {
                "variable": {
                    "value": "loss_sum",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_114": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.all_variables() if 'Adagrad' not in v.name]",
                    "possible_values": []
                }
            },
            "Saver_128": {
                "variable": {
                    "value": "new_saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_139": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "possible_values": []
                }
            },
            "Saver_144": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if 'coverage' not in v.name and 'Adagrad' not in v.name]",
                    "possible_values": []
                }
            },
            "Saver_152": {
                "variable": {
                    "value": "new_saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Supervisor_171": {
                "variable": {
                    "value": "sv",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.log_root, 'train/model.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "is_chief": {
                    "value": "True",
                    "possible_values": []
                },
                "saver": {
                    "value": "saver",
                    "possible_values": [
                        [
                            "tf.train.Saver([v for v in tf.all_variables() if 'Adagrad' not in v.name])",
                            "Call"
                        ],
                        [
                            "tf.train.Saver([v for v in tf.global_variables() if 'coverage' not in v.name and 'Adagrad' not in v.name])",
                            "Call"
                        ],
                        [
                            "tf.train.Saver(max_to_keep=3)",
                            "Call"
                        ],
                        [
                            "sv.saver",
                            "Attribute"
                        ]
                    ]
                },
                "summary_op": {
                    "value": "None",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "600",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "None",
                    "possible_values": []
                },
                "global_step": {
                    "value": "model.global_step",
                    "possible_values": []
                }
            },
            "info_105": {
                "msg": {
                    "value": "running_avg_loss: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "running_avg_loss",
                    "possible_values": [
                        [
                            "loss",
                            "Name"
                        ],
                        [
                            "running_avg_loss * decay + (1 - decay) * loss",
                            "BinOp"
                        ],
                        [
                            "min(running_avg_loss, 12)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_111": {
                "msg": {
                    "value": "Restoring bestmodel for training...",
                    "possible_values": []
                }
            },
            "info_136": {
                "msg": {
                    "value": "converting non-coverage model to coverage model..",
                    "possible_values": []
                }
            },
            "info_179": {
                "msg": {
                    "value": "Preparing or waiting for session...",
                    "possible_values": []
                }
            },
            "info_181": {
                "msg": {
                    "value": "Created session.",
                    "possible_values": []
                }
            },
            "info_191": {
                "msg": {
                    "value": "starting run_training",
                    "possible_values": []
                }
            },
            "info_264": {
                "msg": {
                    "value": "running validation step...",
                    "possible_values": []
                }
            },
            "info_280": {
                "msg": {
                    "value": "seconds for validation step: %.3f",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "possible_values": []
                }
            },
            "set_verbosity_296": {
                "level": {
                    "value": "tf.compat.v1.logging.INFO",
                    "possible_values": []
                }
            },
            "info_297": {
                "msg": {
                    "value": "Starting seq2seq_attention in %s mode...",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.mode",
                    "possible_values": []
                }
            },
            "set_random_seed_331": {
                "seed": {
                    "value": "111",
                    "possible_values": []
                }
            },
            "run_347": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "initialize_all_variables_116": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_141": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_274": {
                "msg": {
                    "value": "validation batch accuracy: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "accuracy",
                    "possible_values": [
                        [
                            "results['accuracy']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_185": {
                "msg": {
                    "value": "Caught keyboard interrupt on worker. Stopping supervisor...",
                    "possible_values": []
                }
            },
            "info_215": {
                "msg": {
                    "value": "loss: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "results['loss']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "info_224": {
                "msg": {
                    "value": "train_step: %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "train_step",
                    "possible_values": [
                        [
                            "results['global_step']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_variables_119": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_144": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_212": {
                "msg": {
                    "value": "coverage_loss: %f",
                    "possible_values": []
                },
                "*args": {
                    "value": "coverage_loss",
                    "possible_values": [
                        [
                            "results['coverage_loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_234": {
                "msg": {
                    "value": "seconds for training step: %.3f",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "possible_values": []
                }
            }
        }
    },
    "oaag-dy/attention_decoder.py": {
        "tensorflow": {
            "reduce_sum_270": {
                "variable": {
                    "value": "masked_sums",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_289": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "logits": {
                    "value": "e",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(v_o * math_ops.tanh(opinion_features + decoder_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_291": {
                "variable": {
                    "value": "review_attention",
                    "possible_values": []
                },
                "input": {
                    "value": "review_attention",
                    "possible_values": [
                        [
                            "tf.expand_dims(review_attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reshape_292": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num, -1]",
                    "possible_values": []
                }
            },
            "multiply_293": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "review_attention",
                    "possible_values": [
                        [
                            "tf.expand_dims(review_attention, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_294": {
                "variable": {
                    "value": "attn_norm",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "divide_295": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_norm",
                    "possible_values": [
                        [
                            "tf.reshape(attn_dist, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1)",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "padding_mask",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padding_mask",
                    "possible_values": [
                        [
                            "tf.reshape(padding_mask, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "reduce_sum_301": {
                "variable": {
                    "value": "masked_sums",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "r_padding_mask",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_padding_mask",
                    "possible_values": [
                        [
                            "tf.reshape(r_padding_mask, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "variable": {
                    "value": "question_states",
                    "possible_values": []
                },
                "input": {
                    "value": "question_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(question_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "expand_dims_62": {
                "variable": {
                    "value": "review_states",
                    "possible_values": []
                },
                "input": {
                    "value": "review_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(review_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "variable": {
                    "value": "opinion_states",
                    "possible_values": []
                },
                "input": {
                    "value": "opinion_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(opinion_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "W_h",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "question_features",
                    "possible_values": []
                },
                "input": {
                    "value": "question_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(question_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_h",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('W_h', [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "W_r",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "variable": {
                    "value": "review_features",
                    "possible_values": []
                },
                "input": {
                    "value": "review_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(review_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_r",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('W_r', [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "W_o",
                    "possible_values": []
                },
                "name": {
                    "value": "W_o",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, o_attn_size, attention_vec_size]",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "opinion_features",
                    "possible_values": []
                },
                "input": {
                    "value": "opinion_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(opinion_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_o",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('W_o', [1, 1, o_attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "v_q",
                    "possible_values": []
                },
                "name": {
                    "value": "v_q",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "variable": {
                    "value": "v_r",
                    "possible_values": []
                },
                "name": {
                    "value": "v_r",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "v_o",
                    "possible_values": []
                },
                "name": {
                    "value": "v_o",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "q_context_vector",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, attn_size]",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "r_context_vector",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, attn_size]",
                    "possible_values": []
                }
            },
            "reshape_302": {
                "tensor": {
                    "value": "masked_sums",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "get_variable_355": {
                "variable": {
                    "value": "bias_term",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "attention_decoder",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "input": {
                    "value": "q_prev_coverage",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(q_prev_coverage, 2), 3)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "expand_dims_95": {
                "input": {
                    "value": "r_prev_coverage",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(r_prev_coverage, 2), 3)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "r_coverage",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_coverage",
                    "possible_values": [
                        [
                            "r_prev_coverage",
                            "Name"
                        ],
                        [
                            "array_ops.reshape(r_coverage, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "q_coverage",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_coverage",
                    "possible_values": [
                        [
                            "q_prev_coverage",
                            "Name"
                        ],
                        [
                            "array_ops.reshape(q_coverage, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "softmax_268": {
                "logits": {
                    "value": "e",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(v_o * math_ops.tanh(opinion_features + decoder_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_271": {
                "tensor": {
                    "value": "masked_sums",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "expand_dims_295": {
                "input": {
                    "value": "tf.reduce_sum(attn_norm, 1)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "possible_values": []
                }
            },
            "get_variable_345": {
                "variable": {
                    "value": "matrix",
                    "possible_values": []
                },
                "name": {
                    "value": "'Matrix' + str(i)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_sizes[i], output_size]",
                    "possible_values": []
                }
            },
            "add_n_357": {
                "inputs": {
                    "value": "res",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "w_q_c",
                    "possible_values": []
                },
                "name": {
                    "value": "w_q_c",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, attention_vec_size]",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "w_r_c",
                    "possible_values": []
                },
                "name": {
                    "value": "w_r_c",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, attention_vec_size]",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_o * math_ops.tanh(opinion_features + decoder_features)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "softmax_101": {
                "variable": {
                    "value": "sent_attention",
                    "possible_values": []
                },
                "logits": {
                    "value": "e",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(v_o * math_ops.tanh(opinion_features + decoder_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_141": {
                "variable": {
                    "value": "context_vector",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * question_states",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "context_vector",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_vector",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * question_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * review_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_size]",
                    "possible_values": []
                }
            },
            "reduce_sum_182": {
                "variable": {
                    "value": "context_vector",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * review_states",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "context_vector",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_vector",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * question_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * review_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_size]",
                    "possible_values": []
                }
            },
            "expand_dims_203": {
                "input": {
                    "value": "decoder_features",
                    "possible_values": [
                        [
                            "linear(initial_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "linear(state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "linear(state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "info_208": {
                "msg": {
                    "value": "Adding attention_decoder timestep %i of %i",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(len(args))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "len(decoder_inputs)",
                    "possible_values": []
                }
            },
            "reduce_sum_295": {
                "input_tensor": {
                    "value": "attn_norm",
                    "possible_values": [
                        [
                            "tf.reshape(attn_dist, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "add_n_354": {
                "inputs": {
                    "value": "res",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "coverage",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "Opinion_Attention",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "Question_Attention",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "coverage_features",
                    "possible_values": []
                },
                "input": {
                    "value": "coverage",
                    "possible_values": [
                        [
                            "coverage + array_ops.reshape(attn_dist, [batch_size, -1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_q_c",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('w_q_c', [1, 1, 1, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_q * math_ops.tanh(question_features + decoder_features + coverage_features)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "reduce_sum_132": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_q * math_ops.tanh(question_features + decoder_features)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "Review_Attention",
                    "possible_values": []
                }
            },
            "conv2d_161": {
                "variable": {
                    "value": "coverage_features",
                    "possible_values": []
                },
                "input": {
                    "value": "coverage",
                    "possible_values": [
                        [
                            "coverage + array_ops.reshape(attn_dist, [batch_size, -1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_r_c",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('w_r_c', [1, 1, 1, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "reduce_sum_164": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_r * math_ops.tanh(review_features + decoder_features + coverage_features)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "reduce_sum_173": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_r * math_ops.tanh(review_features + decoder_features)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "Decoder",
                    "possible_values": []
                }
            },
            "get_variable_scope_210": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "expand_dims_235": {
                "input": {
                    "value": "decoder_features",
                    "possible_values": [
                        [
                            "linear(initial_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "linear(state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "linear(state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "p_gen",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_gen",
                    "possible_values": [
                        [
                            "linear([cell_output] + [q_context_vector] + [r_context_vector], 3, True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p_gen)",
                            "Call"
                        ],
                        [
                            "tf.split(p_gen, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_248": {
                "variable": {
                    "value": "p_gen",
                    "possible_values": []
                },
                "value": {
                    "value": "p_gen",
                    "possible_values": [
                        [
                            "linear([cell_output] + [q_context_vector] + [r_context_vector], 3, True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p_gen)",
                            "Call"
                        ],
                        [
                            "tf.split(p_gen, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "AttnOutputProjection",
                    "possible_values": []
                }
            },
            "constant_initializer_356": {
                "value": {
                    "value": "bias_start",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "possible_values": []
                }
            },
            "expand_dims_138": {
                "input": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "possible_values": []
                }
            },
            "expand_dims_179": {
                "input": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "variable_scope.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "expand_dims_228": {
                "input": {
                    "value": "decoder_features",
                    "possible_values": [
                        [
                            "linear(initial_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "linear(state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "linear(state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Decoder",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "calculate_pgen",
                    "possible_values": []
                }
            },
            "matmul_350": {
                "a": {
                    "value": "arg[0]",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix' + str(i), [total_arg_sizes[i], output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_352": {
                "a": {
                    "value": "tf.concat(axis=1, values=arg)",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix' + str(i), [total_arg_sizes[i], output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_100": {
                "x": {
                    "value": "opinion_features + decoder_features",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "possible_values": []
                }
            },
            "get_variable_scope_225": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "Decoder",
                    "possible_values": []
                }
            },
            "concat_352": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "arg",
                    "possible_values": [
                        [
                            "args",
                            "Name"
                        ],
                        [
                            "[arg]",
                            "List"
                        ],
                        [
                            "args[i]",
                            "Subscript"
                        ],
                        [
                            "[arg]",
                            "List"
                        ]
                    ]
                }
            },
            "tanh_123": {
                "x": {
                    "value": "question_features + decoder_features + coverage_features",
                    "possible_values": []
                }
            },
            "tanh_132": {
                "x": {
                    "value": "question_features + decoder_features",
                    "possible_values": []
                }
            },
            "tanh_164": {
                "x": {
                    "value": "review_features + decoder_features + coverage_features",
                    "possible_values": []
                }
            },
            "tanh_173": {
                "x": {
                    "value": "review_features + decoder_features",
                    "possible_values": []
                }
            }
        }
    },
    "oaag-dy/batcher.py": {
        "tensorflow": {
            "warning_341": {
                "msg": {
                    "value": "Bucket input queue is empty when calling next_batch. Bucket queue size: %i, Input queue size: %i",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._batch_queue.qsize()",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._example_queue.qsize()",
                    "possible_values": []
                }
            },
            "info_344": {
                "msg": {
                    "value": "Finished reading dataset in single_pass mode.",
                    "possible_values": []
                }
            },
            "warning_438": {
                "msg": {
                    "value": "Found an example with empty article text. Skipping it.",
                    "possible_values": []
                }
            },
            "info_360": {
                "msg": {
                    "value": "The example generator for this example queue filling thread has exhausted data.",
                    "possible_values": []
                }
            },
            "error_407": {
                "msg": {
                    "value": "Found example queue thread dead. Restarting.",
                    "possible_values": []
                }
            },
            "error_414": {
                "msg": {
                    "value": "Found batch queue thread dead. Restarting.",
                    "possible_values": []
                }
            },
            "error_435": {
                "msg": {
                    "value": "Failed to get article or abstract from example",
                    "possible_values": []
                }
            },
            "info_362": {
                "msg": {
                    "value": "\"single_pass mode is on, so we've finished reading dataset. This thread is stopping.\"",
                    "possible_values": []
                }
            }
        }
    },
    "oaag-dy/beam_search.py": {
        "tensorflow": {}
    },
    "oaag-dy/data.py": {
        "tensorflow": {}
    },
    "oaag-dy/decode.py": {
        "tensorflow": {
            "Saver_49": {
                "variable": {
                    "value": "self._saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_50": {
                "variable": {
                    "value": "self._sess",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "possible_values": []
                }
            },
            "info_204": {
                "msg": {
                    "value": "ARTICLE:  %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "article",
                    "possible_values": []
                }
            },
            "info_205": {
                "msg": {
                    "value": "REFERENCE SUMMARY: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "abstract",
                    "possible_values": []
                }
            },
            "info_206": {
                "msg": {
                    "value": "GENERATED SUMMARY: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "decoded_output",
                    "possible_values": [
                        [
                            "' '.join(decoded_words)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_207": {
                "msg": {
                    "value": "QUESTION: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "question",
                    "possible_values": []
                }
            },
            "info_208": {
                "msg": {
                    "value": "TARGET#PREDICTION: %s#%s",
                    "possible_values": []
                },
                "*args": {
                    "value": "(target, prediction[1])",
                    "possible_values": []
                }
            },
            "info_171": {
                "msg": {
                    "value": "'Wrote example %i to file' % ex_index",
                    "possible_values": []
                }
            },
            "info_198": {
                "msg": {
                    "value": "Wrote visualization data to %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_fname",
                    "possible_values": [
                        [
                            "os.path.join(self._decode_dir, 'attn_vis_data.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_86": {
                "msg": {
                    "value": "Decoder has finished reading dataset for single_pass.",
                    "possible_values": []
                }
            },
            "info_87": {
                "msg": {
                    "value": "Output has been saved in %s and %s. Now starting ROUGE eval...",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._rouge_ref_dir",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._rouge_dec_dir",
                    "possible_values": []
                }
            },
            "info_125": {
                "msg": {
                    "value": "\"We've been decoding with same checkpoint for %i seconds. Time to load new checkpoint\"",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "possible_values": []
                }
            }
        }
    },
    "oaag-dy/inspect_checkpoint.py": {
        "tensorflow": {
            "NewCheckpointReader_15": {
                "variable": {
                    "value": "reader",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "possible_values": [
                        [
                            "sys.argv[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "oaag-dy/model.py": {
        "tensorflow": {
            "reduce_sum_638": {
                "variable": {
                    "value": "dec_lens",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "padding_mask",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_656": {
                "variable": {
                    "value": "q_coverage",
                    "possible_values": []
                },
                "input": {
                    "value": "q_attn_dists[0]",
                    "possible_values": []
                }
            },
            "zeros_like_663": {
                "variable": {
                    "value": "r_coverage",
                    "possible_values": []
                },
                "input": {
                    "value": "r_attn_dists[0]",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self._r_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_batch",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self._r_lens",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_lens",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self._q_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_batch",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self._q_lens",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lens",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self._rating_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num]",
                    "possible_values": []
                },
                "name": {
                    "value": "rating_batch",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self._r_padding_mask",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_padding_mask",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self._q_padding_mask",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_padding_mask",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self._dec_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_batch",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self._target_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "possible_values": []
                },
                "name": {
                    "value": "target_batch",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self._y_target_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "possible_values": []
                },
                "name": {
                    "value": "y_target_batch",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self._dec_padding_mask",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_padding_mask",
                    "possible_values": []
                }
            },
            "LSTMCell_155": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "units": {
                    "value": "hps.hidden_dim",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "possible_values": []
                }
            },
            "FileWriter_216": {
                "variable": {
                    "value": "summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_227": {
                "variable": {
                    "value": "U",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim1, dim2]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "possible_values": []
                }
            },
            "expand_dims_232": {
                "variable": {
                    "value": "question",
                    "possible_values": []
                },
                "input": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_233": {
                "variable": {
                    "value": "question",
                    "possible_values": []
                },
                "input": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, num, 1, 1)",
                    "possible_values": []
                }
            },
            "expand_dims_234": {
                "variable": {
                    "value": "q_padding_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "self._q_padding_mask",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_235": {
                "variable": {
                    "value": "q_padding_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "q_padding_mask",
                    "possible_values": [
                        [
                            "tf.expand_dims(self._q_padding_mask, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_padding_mask, (1, num, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, num, 1)",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "question",
                    "possible_values": []
                },
                "tensor": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * num, -1, dim1]",
                    "possible_values": []
                }
            },
            "einsum_238": {
                "variable": {
                    "value": "transform_left",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,kl->ijl",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "U",
                    "possible_values": [
                        [
                            "tf.get_variable('U', shape=[dim1, dim2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(sentiment_input, W))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "att_mat",
                    "possible_values": []
                },
                "a": {
                    "value": "transform_left",
                    "possible_values": [
                        [
                            "tf.einsum('ijk,kl->ijl', question, U)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(reviews, [0, 2, 1])",
                    "possible_values": []
                }
            },
            "softmax_241": {
                "variable": {
                    "value": "r_attn",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reduce_max(att_mat, axis=1)",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "masked_sums",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "r_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=1))",
                            "Call"
                        ],
                        [
                            "r_attn * tf.reshape(self._r_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "r_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(r_attn, -1, name='review_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_245": {
                "variable": {
                    "value": "r_attn",
                    "possible_values": []
                },
                "input": {
                    "value": "r_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=1))",
                            "Call"
                        ],
                        [
                            "r_attn * tf.reshape(self._r_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "r_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(r_attn, -1, name='review_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "name": {
                    "value": "review_attention",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "q_attn",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reduce_max(att_mat, axis=2)",
                    "possible_values": []
                }
            },
            "reduce_sum_249": {
                "variable": {
                    "value": "masked_sums",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=2))",
                            "Call"
                        ],
                        [
                            "q_attn * tf.reshape(q_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "q_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q_attn, -1, name='question_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_251": {
                "variable": {
                    "value": "q_attn",
                    "possible_values": []
                },
                "input": {
                    "value": "q_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=2))",
                            "Call"
                        ],
                        [
                            "q_attn * tf.reshape(q_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "q_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q_attn, -1, name='question_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "name": {
                    "value": "question_attention",
                    "possible_values": []
                }
            },
            "multiply_253": {
                "variable": {
                    "value": "dec_review_inputs",
                    "possible_values": []
                },
                "x": {
                    "value": "reviews",
                    "possible_values": []
                },
                "y": {
                    "value": "r_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=1))",
                            "Call"
                        ],
                        [
                            "r_attn * tf.reshape(self._r_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "r_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(r_attn, -1, name='review_attention')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_254": {
                "variable": {
                    "value": "dec_question_inputs",
                    "possible_values": []
                },
                "x": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=2))",
                            "Call"
                        ],
                        [
                            "q_attn * tf.reshape(q_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "q_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q_attn, -1, name='question_attention')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "att_review_outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(dec_review_inputs, 1)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim2]",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "att_question_outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(dec_question_inputs, 1)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim1]",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "dec_question_inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_question_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(question, q_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_question_inputs, [batch_size, num, -1, dim1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dec_question_inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num, -1, dim1]",
                    "possible_values": []
                }
            },
            "reduce_mean_259": {
                "variable": {
                    "value": "dec_question_inputs",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dec_question_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(question, q_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_question_inputs, [batch_size, num, -1, dim1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dec_question_inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "dec_review_inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_review_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(reviews, r_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, num, -1, dim2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, -1, dim2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num, -1, dim2]",
                    "possible_values": []
                }
            },
            "reshape_261": {
                "variable": {
                    "value": "dec_review_inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_review_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(reviews, r_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, num, -1, dim2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, -1, dim2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, dim2]",
                    "possible_values": []
                }
            },
            "concat_262": {
                "variable": {
                    "value": "hidden_output",
                    "possible_values": []
                },
                "values": {
                    "value": "[att_question_outputs, att_review_outputs]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "hidden_output",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_output",
                    "possible_values": [
                        [
                            "tf.concat([att_question_outputs, att_review_outputs], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_output, [batch_size, num, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num, -1]",
                    "possible_values": []
                }
            },
            "expand_dims_269": {
                "variable": {
                    "value": "q_embed",
                    "possible_values": []
                },
                "input": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_270": {
                "variable": {
                    "value": "q_embed",
                    "possible_values": []
                },
                "input": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, num, 1, 1)",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "variable": {
                    "value": "q_embed",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num, -1, emb_dim)",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "r_embed",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_embed",
                    "possible_values": [
                        [
                            "tf.reshape(r_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([r_embed, overlap2], 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num, -1, emb_dim)",
                    "possible_values": []
                }
            },
            "matmul_274": {
                "variable": {
                    "value": "overlap1",
                    "possible_values": []
                },
                "a": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(r_embed, [0, 2, 1])",
                    "possible_values": []
                }
            },
            "expand_dims_275": {
                "variable": {
                    "value": "overlap1",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(overlap1, axis=2)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_277": {
                "variable": {
                    "value": "overlap2",
                    "possible_values": []
                },
                "a": {
                    "value": "r_embed",
                    "possible_values": [
                        [
                            "tf.reshape(r_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([r_embed, overlap2], 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(q_embed, [0, 2, 1])",
                    "possible_values": []
                }
            },
            "expand_dims_278": {
                "variable": {
                    "value": "overlap2",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(overlap2, axis=2)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_279": {
                "variable": {
                    "value": "q_embed",
                    "possible_values": []
                },
                "values": {
                    "value": "[q_embed, overlap1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_280": {
                "variable": {
                    "value": "r_embed",
                    "possible_values": []
                },
                "values": {
                    "value": "[r_embed, overlap2]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "get_variable_288": {
                "variable": {
                    "value": "W",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim1, hidden_size]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "possible_values": []
                }
            },
            "tanh_292": {
                "variable": {
                    "value": "U",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(sentiment_input, W)",
                    "possible_values": []
                }
            },
            "get_variable_293": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size, 1]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "possible_values": []
                }
            },
            "softmax_297": {
                "variable": {
                    "value": "review_attention",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(tf.matmul(U, w), [batch_size, -1])",
                    "possible_values": []
                }
            },
            "multiply_298": {
                "variable": {
                    "value": "dec_opinion_inputs",
                    "possible_values": []
                },
                "x": {
                    "value": "sentiment_input",
                    "possible_values": [
                        [
                            "tf.concat([hidden_output, rating_batch], 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(review_attention, -1)",
                    "possible_values": []
                }
            },
            "reshape_300": {
                "variable": {
                    "value": "decode_in_state",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(dec_opinion_inputs, 1)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "get_variable_311": {
                "variable": {
                    "value": "W_o",
                    "possible_values": []
                },
                "name": {
                    "value": "W_output",
                    "possible_values": []
                },
                "shape": {
                    "value": "[decode_in_state.get_shape()[1], 3]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "possible_values": []
                }
            },
            "get_variable_315": {
                "variable": {
                    "value": "b_o",
                    "possible_values": []
                },
                "name": {
                    "value": "b_output",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "possible_values": []
                }
            },
            "xw_plus_b_316": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "x": {
                    "value": "decode_in_state",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(dec_opinion_inputs, 1), [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W_o",
                    "possible_values": [
                        [
                            "tf.get_variable('W_output', shape=[decode_in_state.get_shape()[1], 3], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_o",
                    "possible_values": [
                        [
                            "tf.get_variable('b_output', [3], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_317": {
                "variable": {
                    "value": "soft_prob",
                    "possible_values": []
                },
                "logits": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(decode_in_state, W_o, b_o)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "distance",
                    "possible_values": []
                }
            },
            "trainable_variables_448": {
                "variable": {
                    "value": "tvars",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gradients_449": {
                "variable": {
                    "value": "gradients",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_to_minimize",
                    "possible_values": [
                        [
                            "self._total_loss if self._hps.coverage else self._loss",
                            "IfExp"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "aggregation_method": {
                    "value": "tf.AggregationMethod.EXPERIMENTAL_TREE",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_459": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._hps.lr",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "self._hps.adagrad_init_acc",
                    "possible_values": []
                }
            },
            "Variable_471": {
                "variable": {
                    "value": "self.global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "merge_all_474": {
                "variable": {
                    "value": "self._summaries",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_528": {
                "variable": {
                    "value": "dec_in_state",
                    "possible_values": []
                },
                "c": {
                    "value": "dec_in_state.c[0]",
                    "possible_values": []
                },
                "h": {
                    "value": "dec_in_state.h[0]",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_560": {
                "variable": {
                    "value": "new_dec_in_state",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_c, w_reduce_c) + bias_reduce_c)",
                            "Call"
                        ],
                        [
                            "np.concatenate(cells, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_h, w_reduce_h) + bias_reduce_h)",
                            "Call"
                        ],
                        [
                            "np.concatenate(hiddens, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_641": {
                "input_tensor": {
                    "value": "values_per_ex",
                    "possible_values": [
                        [
                            "sum(values_per_step) / dec_lens",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_659": {
                "variable": {
                    "value": "covloss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.minimum(a, q_coverage)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "reduce_sum_666": {
                "variable": {
                    "value": "covloss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.minimum(a, r_coverage)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self._r_batch_extend_vocab",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self._q_batch_extend_vocab",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self._max_oovs",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "name": {
                    "value": "max_oovs",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.q_prev_coverage",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_prev_coverage",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.r_prev_coverage",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_prev_coverage",
                    "possible_values": []
                }
            },
            "LSTMCell_104": {
                "variable": {
                    "value": "cell_fw",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DropoutWrapper_105": {
                "variable": {
                    "value": "cell_fw",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_fw",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_fw, output_keep_prob=dropout)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_106": {
                "variable": {
                    "value": "cell_bw",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DropoutWrapper_107": {
                "variable": {
                    "value": "cell_bw",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_bw",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_bw, output_keep_prob=dropout)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_108": {
                "variable": {
                    "value": "(encoder_outputs, (fw_st, bw_st))",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_fw, output_keep_prob=dropout)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_bw, output_keep_prob=dropout)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_len",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "encoder_outputs",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_outputs",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=encoder_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "w_reduce_c",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_c",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim * 2 + op_dim, hidden_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "w_reduce_h",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_h",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim * 2 + op_dim, hidden_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "get_variable_130": {
                "variable": {
                    "value": "bias_reduce_c",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_c",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "get_variable_131": {
                "variable": {
                    "value": "bias_reduce_h",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_h",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "old_c",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.c, bw_st.c, op]",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "old_h",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.h, bw_st.h, op]",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "new_c",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_c, w_reduce_c) + bias_reduce_c",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "new_h",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_h, w_reduce_h) + bias_reduce_h",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "extra_zeros",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self._hps.batch_size, self._max_oovs)",
                    "possible_values": []
                }
            },
            "flatten_189": {
                "variable": {
                    "value": "r_batch_extend_vocab",
                    "possible_values": []
                },
                "structure": {
                    "value": "self._r_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "range_190": {
                "variable": {
                    "value": "batch_nums",
                    "possible_values": []
                },
                "limit": {
                    "value": "self._hps.batch_size",
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "variable": {
                    "value": "batch_nums",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_194": {
                "variable": {
                    "value": "r_batch_nums",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, r_attn_len]",
                    "possible_values": []
                }
            },
            "tile_195": {
                "variable": {
                    "value": "q_batch_nums",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, q_attn_len]",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "r_indices",
                    "possible_values": []
                },
                "values": {
                    "value": "(r_batch_nums, r_batch_extend_vocab)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "q_indices",
                    "possible_values": []
                },
                "values": {
                    "value": "(q_batch_nums, self._q_batch_extend_vocab)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "tensor": {
                    "value": "self._r_padding_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * num, -1]",
                    "possible_values": []
                }
            },
            "reshape_248": {
                "tensor": {
                    "value": "q_padding_mask",
                    "possible_values": [
                        [
                            "tf.expand_dims(self._q_padding_mask, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_padding_mask, (1, num, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * num, -1]",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_331": {
                "variable": {
                    "value": "self.rand_unif_init",
                    "possible_values": []
                },
                "minval": {
                    "value": "-hps.rand_unif_init_mag",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hps.rand_unif_init_mag",
                    "possible_values": []
                },
                "seed": {
                    "value": "123",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_332": {
                "variable": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                },
                "stddev": {
                    "value": "hps.trunc_norm_init_std",
                    "possible_values": []
                }
            },
            "reshape_349": {
                "variable": {
                    "value": "r_lens",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._r_lens",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_350": {
                "variable": {
                    "value": "emb_enc_inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_enc_inputs",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self._r_batch)",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb_enc_inputs, [hps.batch_size * hps.review_num, -1, hps.emb_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[hps.batch_size * hps.review_num, -1, hps.emb_dim]",
                    "possible_values": []
                }
            },
            "top_k_440": {
                "variable": {
                    "value": "(topk_probs, self._topk_ids)",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dists",
                    "possible_values": [
                        [
                            "[vocab_dist + r_copy_dist + q_copy_dist for (vocab_dist, r_copy_dist, q_copy_dist) in zip(vocab_dists_extended, r_attn_dists_projected, q_attn_dists_projected)]",
                            "ListComp"
                        ],
                        [
                            "final_dists[0]",
                            "Subscript"
                        ],
                        [
                            "self._calc_final_dist(vocab_dists, self.q_attn_dists, self.r_attn_dists)",
                            "Call"
                        ],
                        [
                            "vocab_dists",
                            "Name"
                        ]
                    ]
                },
                "k": {
                    "value": "hps.batch_size * 2",
                    "possible_values": []
                }
            },
            "log_441": {
                "variable": {
                    "value": "self._topk_log_probs",
                    "possible_values": []
                },
                "x": {
                    "value": "topk_probs",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_453": {
                "variable": {
                    "value": "(grads, _)",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "possible_values": [
                        [
                            "tf.gradients(loss_to_minimize, tvars, aggregation_method=tf.AggregationMethod.EXPERIMENTAL_TREE)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self._hps.max_grad_norm",
                    "possible_values": []
                }
            },
            "info_466": {
                "msg": {
                    "value": "Building graph...",
                    "possible_values": []
                }
            },
            "info_476": {
                "msg": {
                    "value": "Time to build graph: %i seconds",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "'encoder' + scope",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "reduce_final_st",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_138": {
                "c": {
                    "value": "new_c",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_c, w_reduce_c) + bias_reduce_c)",
                            "Call"
                        ],
                        [
                            "np.concatenate(cells, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_h, w_reduce_h) + bias_reduce_h)",
                            "Call"
                        ],
                        [
                            "np.concatenate(hiddens, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "final_distribution",
                    "possible_values": []
                }
            },
            "transpose_239": {
                "a": {
                    "value": "reviews",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "reduce_max_241": {
                "input_tensor": {
                    "value": "att_mat",
                    "possible_values": [
                        [
                            "tf.matmul(transform_left, tf.transpose(reviews, [0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_244": {
                "tensor": {
                    "value": "masked_sums",
                    "possible_values": [
                        [
                            "tf.reduce_sum(r_attn, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q_attn, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "reduce_max_247": {
                "input_tensor": {
                    "value": "att_mat",
                    "possible_values": [
                        [
                            "tf.matmul(transform_left, tf.transpose(reviews, [0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "tensor": {
                    "value": "masked_sums",
                    "possible_values": [
                        [
                            "tf.reduce_sum(r_attn, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q_attn, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "reduce_sum_255": {
                "input_tensor": {
                    "value": "dec_review_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(reviews, r_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, num, -1, dim2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, -1, dim2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_256": {
                "input_tensor": {
                    "value": "dec_question_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(question, q_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_question_inputs, [batch_size, num, -1, dim1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dec_question_inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_274": {
                "a": {
                    "value": "r_embed",
                    "possible_values": [
                        [
                            "tf.reshape(r_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([r_embed, overlap2], 2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "reduce_max_275": {
                "input_tensor": {
                    "value": "overlap1",
                    "possible_values": [
                        [
                            "tf.matmul(q_embed, tf.transpose(r_embed, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_max(overlap1, axis=2), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "transpose_277": {
                "a": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "reduce_max_278": {
                "input_tensor": {
                    "value": "overlap2",
                    "possible_values": [
                        [
                            "tf.matmul(r_embed, tf.transpose(q_embed, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_max(overlap2, axis=2), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "matmul_292": {
                "a": {
                    "value": "sentiment_input",
                    "possible_values": [
                        [
                            "tf.concat([hidden_output, rating_batch], 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[dim1, hidden_size], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_297": {
                "tensor": {
                    "value": "tf.matmul(U, w)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "expand_dims_298": {
                "input": {
                    "value": "review_attention",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(U, w), [batch_size, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_sum_300": {
                "input_tensor": {
                    "value": "dec_opinion_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(sentiment_input, tf.expand_dims(review_attention, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_329": {
                "name_or_scope": {
                    "value": "seq2seq",
                    "possible_values": []
                }
            },
            "embedding_lookup_342": {
                "variable": {
                    "value": "emb_enc_inputs",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "possible_values": [
                        [
                            "config.embeddings.add()",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', initializer=init_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self._r_batch",
                    "possible_values": []
                }
            },
            "embedding_lookup_344": {
                "variable": {
                    "value": "emb_q_inputs",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "possible_values": [
                        [
                            "config.embeddings.add()",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', initializer=init_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self._q_batch",
                    "possible_values": []
                }
            },
            "one_hot_360": {
                "variable": {
                    "value": "rating_batch",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._rating_batch",
                    "possible_values": []
                },
                "depth": {
                    "value": "5",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_361": {
                "variable": {
                    "value": "sentiment_input",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_output, rating_batch]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_364": {
                "variable": {
                    "value": "losses",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.y_prob",
                    "possible_values": []
                },
                "labels": {
                    "value": "self._y_target_batch",
                    "possible_values": []
                }
            },
            "reduce_mean_365": {
                "variable": {
                    "value": "self._loss_sa",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=self.y_prob, labels=self._y_target_batch)",
                            "Call"
                        ],
                        [
                            "-tf.log(gold_probs)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "cast_376": {
                "variable": {
                    "value": "self.predictions",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.y_pred, 1, name='predictions')",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "equal_377": {
                "variable": {
                    "value": "correct_predictions",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "possible_values": []
                },
                "y": {
                    "value": "self._y_target_batch",
                    "possible_values": []
                }
            },
            "cast_378": {
                "variable": {
                    "value": "self.batch_accuracy",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_predictions",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, self._y_target_batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_mean_379": {
                "variable": {
                    "value": "self.accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.batch_accuracy",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "device_452": {
                "device_name": {
                    "value": "/gpu:0",
                    "possible_values": []
                }
            },
            "device_460": {
                "device_name": {
                    "value": "/gpu:0",
                    "possible_values": []
                }
            },
            "device_469": {
                "device_name": {
                    "value": "/gpu:0",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_599": {
                "c": {
                    "value": "results['states'].c[i, :]",
                    "possible_values": []
                },
                "h": {
                    "value": "results['states'].h[i, :]",
                    "possible_values": []
                }
            },
            "minimum_659": {
                "x": {
                    "value": "a",
                    "possible_values": [
                        [
                            "q_attn_dists",
                            "Name"
                        ],
                        [
                            "r_attn_dists",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "q_coverage",
                    "possible_values": [
                        [
                            "tf.zeros_like(q_attn_dists[0])",
                            "Call"
                        ],
                        [
                            "q_coverage + a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_666": {
                "x": {
                    "value": "a",
                    "possible_values": [
                        [
                            "q_attn_dists",
                            "Name"
                        ],
                        [
                            "r_attn_dists",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "r_coverage",
                    "possible_values": [
                        [
                            "tf.zeros_like(r_attn_dists[0])",
                            "Call"
                        ],
                        [
                            "r_coverage + a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_183": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[dist, extra_zeros]",
                    "possible_values": []
                }
            },
            "shape_193": {
                "input": {
                    "value": "self._q_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "scatter_nd_199": {
                "indices": {
                    "value": "r_indices",
                    "possible_values": [
                        [
                            "tf.stack((r_batch_nums, r_batch_extend_vocab), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "copy_dist",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "[self._hps.batch_size, extended_vsize]",
                            "List"
                        ]
                    ]
                }
            },
            "scatter_nd_200": {
                "indices": {
                    "value": "q_indices",
                    "possible_values": [
                        [
                            "tf.stack((q_batch_nums, self._q_batch_extend_vocab), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "copy_dist",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "[self._hps.batch_size, extended_vsize]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_297": {
                "a": {
                    "value": "U",
                    "possible_values": [
                        [
                            "tf.get_variable('U', shape=[dim1, dim2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(sentiment_input, W))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[hidden_size, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [hps.hidden_dim, vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_315": {
                "value": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "embedding",
                    "possible_values": []
                }
            },
            "get_variable_338": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_embeddings",
                    "possible_values": [
                        [
                            "data.get_init_embeddings(vocab._id_to_word, hps.emb_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_340": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize, hps.emb_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "co-attention",
                    "possible_values": []
                }
            },
            "variable_scope_359": {
                "name_or_scope": {
                    "value": "sentiment_layer",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                }
            },
            "variable_scope_375": {
                "name_or_scope": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "get_variable_384": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.hidden_dim, vsize]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "get_variable_385": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "a": {
                    "value": "old_c",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[fw_st.c, bw_st.c, op])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_c",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_c', [hidden_dim * 2 + op_dim, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_137": {
                "a": {
                    "value": "old_h",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[fw_st.h, bw_st.h, op])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_h",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_h', [hidden_dim * 2 + op_dim, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "self._r_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "embedding_lookup_343": {
                "params": {
                    "value": "embedding",
                    "possible_values": [
                        [
                            "config.embeddings.add()",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', initializer=init_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "argmax_376": {
                "input": {
                    "value": "self.y_pred",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "possible_values": []
                }
            },
            "variable_scope_383": {
                "name_or_scope": {
                    "value": "output_projection",
                    "possible_values": []
                }
            },
            "variable_scope_405": {
                "name_or_scope": {
                    "value": "loss",
                    "possible_values": []
                }
            },
            "range_410": {
                "variable": {
                    "value": "batch_nums",
                    "possible_values": []
                },
                "limit": {
                    "value": "hps.batch_size",
                    "possible_values": []
                }
            },
            "scalar_425": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self._loss",
                    "possible_values": []
                }
            },
            "unstack_343": {
                "value": {
                    "value": "self._dec_batch",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_392": {
                "logits": {
                    "value": "s",
                    "possible_values": []
                }
            },
            "stack_413": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, targets)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_nd_414": {
                "variable": {
                    "value": "gold_probs",
                    "possible_values": []
                },
                "params": {
                    "value": "dist",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, targets), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_434": {
                "name": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self._total_loss",
                    "possible_values": []
                }
            },
            "get_variable_scope_389": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "xw_plus_b_390": {
                "x": {
                    "value": "output",
                    "possible_values": []
                },
                "weights": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[hidden_size, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [hps.hidden_dim, vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "v",
                    "possible_values": [
                        [
                            "tf.get_variable('v', [vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_422": {
                "values": {
                    "value": "vocab_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_429": {
                "name_or_scope": {
                    "value": "coverage_loss",
                    "possible_values": []
                }
            },
            "scalar_432": {
                "name": {
                    "value": "coverage_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self._coverage_loss",
                    "possible_values": []
                }
            },
            "log_415": {
                "x": {
                    "value": "gold_probs",
                    "possible_values": [
                        [
                            "tf.gather_nd(dist, indices)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "oaag-dy/util.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_36": {
                "variable": {
                    "value": "ckpt_state",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, ckpt_dir)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "latest_filename": {
                    "value": "latest_filename",
                    "possible_values": [
                        [
                            "'checkpoint_best' if ckpt_dir == 'eval' else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "info_37": {
                "msg": {
                    "value": "Loading checkpoint %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_state.model_checkpoint_path",
                    "possible_values": []
                }
            },
            "info_41": {
                "msg": {
                    "value": "Failed to load checkpoint from %s. Sleeping for %i secs...",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, ckpt_dir)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "10",
                    "possible_values": []
                }
            }
        }
    },
    "oaag-static/attention_decoder.py": {
        "tensorflow": {
            "reduce_sum_251": {
                "variable": {
                    "value": "masked_sums",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_270": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "logits": {
                    "value": "e",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_272": {
                "variable": {
                    "value": "review_attention",
                    "possible_values": []
                },
                "input": {
                    "value": "review_attention",
                    "possible_values": [
                        [
                            "tf.expand_dims(review_attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num, -1]",
                    "possible_values": []
                }
            },
            "multiply_274": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "review_attention",
                    "possible_values": [
                        [
                            "tf.expand_dims(review_attention, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "attn_norm",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "divide_276": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_norm",
                    "possible_values": [
                        [
                            "tf.reshape(attn_dist, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1)",
                    "possible_values": []
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "padding_mask",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padding_mask",
                    "possible_values": [
                        [
                            "tf.reshape(padding_mask, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "reduce_sum_282": {
                "variable": {
                    "value": "masked_sums",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "r_padding_mask",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_padding_mask",
                    "possible_values": [
                        [
                            "tf.reshape(r_padding_mask, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "expand_dims_59": {
                "variable": {
                    "value": "question_states",
                    "possible_values": []
                },
                "input": {
                    "value": "question_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(question_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "variable": {
                    "value": "review_states",
                    "possible_values": []
                },
                "input": {
                    "value": "review_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(review_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "W_h",
                    "possible_values": []
                },
                "name": {
                    "value": "W_h",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "question_features",
                    "possible_values": []
                },
                "input": {
                    "value": "question_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(question_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_h",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('W_h', [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "W_r",
                    "possible_values": []
                },
                "name": {
                    "value": "W_r",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "review_features",
                    "possible_values": []
                },
                "input": {
                    "value": "review_states",
                    "possible_values": [
                        [
                            "tf.expand_dims(review_states, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_r",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('W_r', [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "v_q",
                    "possible_values": []
                },
                "name": {
                    "value": "v_q",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "v_r",
                    "possible_values": []
                },
                "name": {
                    "value": "v_r",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "q_context_vector",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, attn_size]",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "r_context_vector",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, attn_size]",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "tensor": {
                    "value": "masked_sums",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "get_variable_336": {
                "variable": {
                    "value": "bias_term",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "attention_decoder",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "input": {
                    "value": "q_prev_coverage",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(q_prev_coverage, 2), 3)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "input": {
                    "value": "r_prev_coverage",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(r_prev_coverage, 2), 3)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "r_coverage",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_coverage",
                    "possible_values": [
                        [
                            "r_prev_coverage",
                            "Name"
                        ],
                        [
                            "array_ops.reshape(r_coverage, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "q_coverage",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_coverage",
                    "possible_values": [
                        [
                            "q_prev_coverage",
                            "Name"
                        ],
                        [
                            "array_ops.reshape(q_coverage, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "softmax_249": {
                "logits": {
                    "value": "e",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_q * math_ops.tanh(question_features + decoder_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features + coverage_features), [2, 3])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(v_r * math_ops.tanh(review_features + decoder_features), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_252": {
                "tensor": {
                    "value": "masked_sums",
                    "possible_values": [
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(attn_dist, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "expand_dims_276": {
                "input": {
                    "value": "tf.reduce_sum(attn_norm, 1)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "variable_scope_323": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "possible_values": []
                }
            },
            "get_variable_326": {
                "variable": {
                    "value": "matrix",
                    "possible_values": []
                },
                "name": {
                    "value": "'Matrix' + str(i)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_sizes[i], output_size]",
                    "possible_values": []
                }
            },
            "add_n_338": {
                "inputs": {
                    "value": "res",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "w_q_c",
                    "possible_values": []
                },
                "name": {
                    "value": "w_q_c",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, attention_vec_size]",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "w_r_c",
                    "possible_values": []
                },
                "name": {
                    "value": "w_r_c",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, attention_vec_size]",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "input": {
                    "value": "decoder_features",
                    "possible_values": [
                        [
                            "linear(decoder_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "linear(decoder_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "context_vector",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * question_states",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "context_vector",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_vector",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * question_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * review_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_size]",
                    "possible_values": []
                }
            },
            "expand_dims_150": {
                "input": {
                    "value": "decoder_features",
                    "possible_values": [
                        [
                            "linear(decoder_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ],
                        [
                            "linear(decoder_state, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(decoder_features, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_175": {
                "variable": {
                    "value": "context_vector",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * review_states",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "context_vector",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_vector",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * question_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_sum(array_ops.reshape(attn_dist, [batch_size, -1, 1, 1]) * review_states, [1, 2])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(context_vector, [-1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_size]",
                    "possible_values": []
                }
            },
            "info_197": {
                "msg": {
                    "value": "Adding attention_decoder timestep %i of %i",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(len(args))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "len(decoder_inputs)",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "input_tensor": {
                    "value": "attn_norm",
                    "possible_values": [
                        [
                            "tf.reshape(attn_dist, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "add_n_335": {
                "inputs": {
                    "value": "res",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "coverage",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "Question_Attention",
                    "possible_values": []
                }
            },
            "conv2d_109": {
                "variable": {
                    "value": "coverage_features",
                    "possible_values": []
                },
                "input": {
                    "value": "coverage",
                    "possible_values": [
                        [
                            "coverage + array_ops.reshape(attn_dist, [batch_size, -1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_q_c",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('w_q_c', [1, 1, 1, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_q * math_ops.tanh(question_features + decoder_features + coverage_features)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_q * math_ops.tanh(question_features + decoder_features)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Review_Attention",
                    "possible_values": []
                }
            },
            "conv2d_154": {
                "variable": {
                    "value": "coverage_features",
                    "possible_values": []
                },
                "input": {
                    "value": "coverage",
                    "possible_values": [
                        [
                            "coverage + array_ops.reshape(attn_dist, [batch_size, -1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attn_dist, 2), 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_r_c",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('w_r_c', [1, 1, 1, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_r * math_ops.tanh(review_features + decoder_features + coverage_features)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "reduce_sum_166": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_r * math_ops.tanh(review_features + decoder_features)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "get_variable_scope_199": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "softmax_228": {
                "variable": {
                    "value": "p_gen",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_gen",
                    "possible_values": [
                        [
                            "linear([cell_output] + [q_context_vector] + [r_context_vector], 3, True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p_gen)",
                            "Call"
                        ],
                        [
                            "tf.split(p_gen, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_229": {
                "variable": {
                    "value": "p_gen",
                    "possible_values": []
                },
                "value": {
                    "value": "p_gen",
                    "possible_values": [
                        [
                            "linear([cell_output] + [q_context_vector] + [r_context_vector], 3, True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p_gen)",
                            "Call"
                        ],
                        [
                            "tf.split(p_gen, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "AttnOutputProjection",
                    "possible_values": []
                }
            },
            "constant_initializer_337": {
                "value": {
                    "value": "bias_start",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "possible_values": []
                }
            },
            "expand_dims_127": {
                "input": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "input": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "variable_scope.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "calculate_pgen",
                    "possible_values": []
                }
            },
            "matmul_331": {
                "a": {
                    "value": "arg[0]",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix' + str(i), [total_arg_sizes[i], output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_333": {
                "a": {
                    "value": "tf.concat(axis=1, values=arg)",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix' + str(i), [total_arg_sizes[i], output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_130": {
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_q(e, q_padding_mask)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "masked_attention_r(e, r_padding_mask, sent_attention, batch_size, num)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(e) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "attn_dist / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "nn_ops.softmax(e)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1, 1]",
                    "possible_values": []
                }
            },
            "get_variable_scope_214": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "concat_333": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "arg",
                    "possible_values": [
                        [
                            "args",
                            "Name"
                        ],
                        [
                            "[arg]",
                            "List"
                        ],
                        [
                            "args[i]",
                            "Subscript"
                        ],
                        [
                            "[arg]",
                            "List"
                        ]
                    ]
                }
            },
            "tanh_112": {
                "x": {
                    "value": "question_features + decoder_features + coverage_features",
                    "possible_values": []
                }
            },
            "tanh_121": {
                "x": {
                    "value": "question_features + decoder_features",
                    "possible_values": []
                }
            },
            "tanh_157": {
                "x": {
                    "value": "review_features + decoder_features + coverage_features",
                    "possible_values": []
                }
            },
            "tanh_166": {
                "x": {
                    "value": "review_features + decoder_features",
                    "possible_values": []
                }
            }
        }
    },
    "oaag-static/batcher.py": {
        "tensorflow": {
            "warning_341": {
                "msg": {
                    "value": "Bucket input queue is empty when calling next_batch. Bucket queue size: %i, Input queue size: %i",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._batch_queue.qsize()",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._example_queue.qsize()",
                    "possible_values": []
                }
            },
            "info_344": {
                "msg": {
                    "value": "Finished reading dataset in single_pass mode.",
                    "possible_values": []
                }
            },
            "warning_438": {
                "msg": {
                    "value": "Found an example with empty article text. Skipping it.",
                    "possible_values": []
                }
            },
            "info_360": {
                "msg": {
                    "value": "The example generator for this example queue filling thread has exhausted data.",
                    "possible_values": []
                }
            },
            "error_407": {
                "msg": {
                    "value": "Found example queue thread dead. Restarting.",
                    "possible_values": []
                }
            },
            "error_414": {
                "msg": {
                    "value": "Found batch queue thread dead. Restarting.",
                    "possible_values": []
                }
            },
            "error_435": {
                "msg": {
                    "value": "Failed to get article or abstract from example",
                    "possible_values": []
                }
            },
            "info_362": {
                "msg": {
                    "value": "\"single_pass mode is on, so we've finished reading dataset. This thread is stopping.\"",
                    "possible_values": []
                }
            }
        }
    },
    "oaag-static/beam_search.py": {
        "tensorflow": {}
    },
    "oaag-static/data.py": {
        "tensorflow": {}
    },
    "oaag-static/decode.py": {
        "tensorflow": {
            "Saver_49": {
                "variable": {
                    "value": "self._saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_50": {
                "variable": {
                    "value": "self._sess",
                    "possible_values": []
                },
                "config": {
                    "value": "util.get_config()",
                    "possible_values": []
                }
            },
            "info_204": {
                "msg": {
                    "value": "ARTICLE:  %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "article",
                    "possible_values": []
                }
            },
            "info_205": {
                "msg": {
                    "value": "REFERENCE SUMMARY: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "abstract",
                    "possible_values": []
                }
            },
            "info_206": {
                "msg": {
                    "value": "GENERATED SUMMARY: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "decoded_output",
                    "possible_values": [
                        [
                            "' '.join(decoded_words)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_207": {
                "msg": {
                    "value": "QUESTION: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "question",
                    "possible_values": []
                }
            },
            "info_208": {
                "msg": {
                    "value": "TARGET#PREDICTION: %s#%s",
                    "possible_values": []
                },
                "*args": {
                    "value": "(target, prediction[1])",
                    "possible_values": []
                }
            },
            "info_171": {
                "msg": {
                    "value": "'Wrote example %i to file' % ex_index",
                    "possible_values": []
                }
            },
            "info_198": {
                "msg": {
                    "value": "Wrote visualization data to %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_fname",
                    "possible_values": [
                        [
                            "os.path.join(self._decode_dir, 'attn_vis_data.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_86": {
                "msg": {
                    "value": "Decoder has finished reading dataset for single_pass.",
                    "possible_values": []
                }
            },
            "info_87": {
                "msg": {
                    "value": "Output has been saved in %s and %s. Now starting ROUGE eval...",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._rouge_ref_dir",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._rouge_dec_dir",
                    "possible_values": []
                }
            },
            "info_125": {
                "msg": {
                    "value": "\"We've been decoding with same checkpoint for %i seconds. Time to load new checkpoint\"",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "possible_values": []
                }
            }
        }
    },
    "oaag-static/inspect_checkpoint.py": {
        "tensorflow": {
            "NewCheckpointReader_15": {
                "variable": {
                    "value": "reader",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "possible_values": [
                        [
                            "sys.argv[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "oaag-static/model.py": {
        "tensorflow": {
            "reduce_sum_648": {
                "variable": {
                    "value": "dec_lens",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "padding_mask",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_666": {
                "variable": {
                    "value": "q_coverage",
                    "possible_values": []
                },
                "input": {
                    "value": "q_attn_dists[0]",
                    "possible_values": []
                }
            },
            "zeros_like_673": {
                "variable": {
                    "value": "r_coverage",
                    "possible_values": []
                },
                "input": {
                    "value": "r_attn_dists[0]",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self._r_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_batch",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self._r_lens",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_lens",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self._q_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_batch",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self._q_lens",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lens",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self._rating_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num]",
                    "possible_values": []
                },
                "name": {
                    "value": "rating_batch",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self._r_padding_mask",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_padding_mask",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self._q_padding_mask",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_padding_mask",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self._dec_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_batch",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self._target_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "possible_values": []
                },
                "name": {
                    "value": "target_batch",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self._y_target_batch",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size]",
                    "possible_values": []
                },
                "name": {
                    "value": "y_target_batch",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self._dec_padding_mask",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.max_dec_steps]",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_padding_mask",
                    "possible_values": []
                }
            },
            "LSTMCell_155": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "units": {
                    "value": "hps.hidden_dim",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "possible_values": []
                }
            },
            "FileWriter_216": {
                "variable": {
                    "value": "summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_227": {
                "variable": {
                    "value": "U",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim1, dim2]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "possible_values": []
                }
            },
            "expand_dims_232": {
                "variable": {
                    "value": "question",
                    "possible_values": []
                },
                "input": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_233": {
                "variable": {
                    "value": "question",
                    "possible_values": []
                },
                "input": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, num, 1, 1)",
                    "possible_values": []
                }
            },
            "expand_dims_234": {
                "variable": {
                    "value": "q_padding_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "self._q_padding_mask",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_235": {
                "variable": {
                    "value": "q_padding_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "q_padding_mask",
                    "possible_values": [
                        [
                            "tf.expand_dims(self._q_padding_mask, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_padding_mask, (1, num, 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, num, 1)",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "question",
                    "possible_values": []
                },
                "tensor": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * num, -1, dim1]",
                    "possible_values": []
                }
            },
            "einsum_238": {
                "variable": {
                    "value": "transform_left",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,kl->ijl",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "U",
                    "possible_values": [
                        [
                            "tf.get_variable('U', shape=[dim1, dim2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(sentiment_input, W))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "att_mat",
                    "possible_values": []
                },
                "a": {
                    "value": "transform_left",
                    "possible_values": [
                        [
                            "tf.einsum('ijk,kl->ijl', question, U)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(reviews, [0, 2, 1])",
                    "possible_values": []
                }
            },
            "softmax_241": {
                "variable": {
                    "value": "r_attn",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reduce_max(att_mat, axis=1)",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "masked_sums",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "r_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=1))",
                            "Call"
                        ],
                        [
                            "r_attn * tf.reshape(self._r_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "r_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(r_attn, -1, name='review_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_245": {
                "variable": {
                    "value": "r_attn",
                    "possible_values": []
                },
                "input": {
                    "value": "r_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=1))",
                            "Call"
                        ],
                        [
                            "r_attn * tf.reshape(self._r_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "r_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(r_attn, -1, name='review_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "name": {
                    "value": "review_attention",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "q_attn",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reduce_max(att_mat, axis=2)",
                    "possible_values": []
                }
            },
            "reduce_sum_249": {
                "variable": {
                    "value": "masked_sums",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=2))",
                            "Call"
                        ],
                        [
                            "q_attn * tf.reshape(q_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "q_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q_attn, -1, name='question_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_251": {
                "variable": {
                    "value": "q_attn",
                    "possible_values": []
                },
                "input": {
                    "value": "q_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=2))",
                            "Call"
                        ],
                        [
                            "q_attn * tf.reshape(q_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "q_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q_attn, -1, name='question_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "name": {
                    "value": "question_attention",
                    "possible_values": []
                }
            },
            "multiply_253": {
                "variable": {
                    "value": "dec_review_inputs",
                    "possible_values": []
                },
                "x": {
                    "value": "reviews",
                    "possible_values": []
                },
                "y": {
                    "value": "r_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=1))",
                            "Call"
                        ],
                        [
                            "r_attn * tf.reshape(self._r_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "r_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(r_attn, -1, name='review_attention')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_254": {
                "variable": {
                    "value": "dec_question_inputs",
                    "possible_values": []
                },
                "x": {
                    "value": "question",
                    "possible_values": [
                        [
                            "tf.expand_dims(question, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(question, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(question, [batch_size * num, -1, dim1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_attn",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reduce_max(att_mat, axis=2))",
                            "Call"
                        ],
                        [
                            "q_attn * tf.reshape(q_padding_mask, [batch_size * num, -1])",
                            "BinOp"
                        ],
                        [
                            "q_attn / tf.reshape(masked_sums, [-1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(q_attn, -1, name='question_attention')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "att_review_outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(dec_review_inputs, 1)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim2]",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "att_question_outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(dec_question_inputs, 1)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim1]",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "dec_question_inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_question_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(question, q_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_question_inputs, [batch_size, num, -1, dim1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dec_question_inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num, -1, dim1]",
                    "possible_values": []
                }
            },
            "reduce_mean_259": {
                "variable": {
                    "value": "dec_question_inputs",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dec_question_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(question, q_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_question_inputs, [batch_size, num, -1, dim1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dec_question_inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "dec_review_inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_review_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(reviews, r_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, num, -1, dim2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, -1, dim2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num, -1, dim2]",
                    "possible_values": []
                }
            },
            "reshape_261": {
                "variable": {
                    "value": "dec_review_inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec_review_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(reviews, r_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, num, -1, dim2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, -1, dim2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, dim2]",
                    "possible_values": []
                }
            },
            "concat_262": {
                "variable": {
                    "value": "hidden_output",
                    "possible_values": []
                },
                "values": {
                    "value": "[att_question_outputs, att_review_outputs]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "hidden_output",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_output",
                    "possible_values": [
                        [
                            "tf.concat([att_question_outputs, att_review_outputs], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_output, [batch_size, num, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num, -1]",
                    "possible_values": []
                }
            },
            "expand_dims_269": {
                "variable": {
                    "value": "q_embed",
                    "possible_values": []
                },
                "input": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_270": {
                "variable": {
                    "value": "q_embed",
                    "possible_values": []
                },
                "input": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, num, 1, 1)",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "variable": {
                    "value": "q_embed",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num, -1, emb_dim)",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "r_embed",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_embed",
                    "possible_values": [
                        [
                            "tf.reshape(r_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([r_embed, overlap2], 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num, -1, emb_dim)",
                    "possible_values": []
                }
            },
            "matmul_274": {
                "variable": {
                    "value": "overlap1",
                    "possible_values": []
                },
                "a": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(r_embed, [0, 2, 1])",
                    "possible_values": []
                }
            },
            "expand_dims_275": {
                "variable": {
                    "value": "overlap1",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(overlap1, axis=2)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_277": {
                "variable": {
                    "value": "overlap2",
                    "possible_values": []
                },
                "a": {
                    "value": "r_embed",
                    "possible_values": [
                        [
                            "tf.reshape(r_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([r_embed, overlap2], 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(q_embed, [0, 2, 1])",
                    "possible_values": []
                }
            },
            "expand_dims_278": {
                "variable": {
                    "value": "overlap2",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(overlap2, axis=2)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_279": {
                "variable": {
                    "value": "q_embed",
                    "possible_values": []
                },
                "values": {
                    "value": "[q_embed, overlap1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_280": {
                "variable": {
                    "value": "r_embed",
                    "possible_values": []
                },
                "values": {
                    "value": "[r_embed, overlap2]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "get_variable_288": {
                "variable": {
                    "value": "W",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim1, hidden_size]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "possible_values": []
                }
            },
            "tanh_292": {
                "variable": {
                    "value": "U",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(sentiment_input, W)",
                    "possible_values": []
                }
            },
            "get_variable_293": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size, 1]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "possible_values": []
                }
            },
            "softmax_297": {
                "variable": {
                    "value": "review_attention",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(tf.matmul(U, w), [batch_size, -1])",
                    "possible_values": []
                }
            },
            "matmul_298": {
                "variable": {
                    "value": "decode_in_state",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(sentiment_input, [0, 2, 1])",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(review_attention, [batch_size, -1, 1])",
                    "possible_values": []
                }
            },
            "reshape_299": {
                "variable": {
                    "value": "decode_in_state",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decode_in_state",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(sentiment_input, [0, 2, 1]), tf.reshape(review_attention, [batch_size, -1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(decode_in_state, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "get_variable_310": {
                "variable": {
                    "value": "W_o",
                    "possible_values": []
                },
                "name": {
                    "value": "W_output",
                    "possible_values": []
                },
                "shape": {
                    "value": "[decode_in_state.get_shape()[1], 3]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "possible_values": []
                }
            },
            "get_variable_314": {
                "variable": {
                    "value": "b_o",
                    "possible_values": []
                },
                "name": {
                    "value": "b_output",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "possible_values": []
                }
            },
            "xw_plus_b_315": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "x": {
                    "value": "decode_in_state",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(sentiment_input, [0, 2, 1]), tf.reshape(review_attention, [batch_size, -1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(decode_in_state, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W_o",
                    "possible_values": [
                        [
                            "tf.get_variable('W_output', shape=[decode_in_state.get_shape()[1], 3], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_o",
                    "possible_values": [
                        [
                            "tf.get_variable('b_output', [3], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_316": {
                "variable": {
                    "value": "soft_prob",
                    "possible_values": []
                },
                "logits": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(decode_in_state, W_o, b_o)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "distance",
                    "possible_values": []
                }
            },
            "expand_dims_323": {
                "variable": {
                    "value": "review_attention",
                    "possible_values": []
                },
                "input": {
                    "value": "review_attention",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(U, w), [batch_size, -1]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(review_attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "trainable_variables_458": {
                "variable": {
                    "value": "tvars",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gradients_459": {
                "variable": {
                    "value": "gradients",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_to_minimize",
                    "possible_values": [
                        [
                            "self._total_loss if self._hps.coverage else self._loss",
                            "IfExp"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "aggregation_method": {
                    "value": "tf.AggregationMethod.EXPERIMENTAL_TREE",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_469": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._hps.lr",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "self._hps.adagrad_init_acc",
                    "possible_values": []
                }
            },
            "Variable_481": {
                "variable": {
                    "value": "self.global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "merge_all_484": {
                "variable": {
                    "value": "self._summaries",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_538": {
                "variable": {
                    "value": "dec_in_state",
                    "possible_values": []
                },
                "c": {
                    "value": "dec_in_state.c[0]",
                    "possible_values": []
                },
                "h": {
                    "value": "dec_in_state.h[0]",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_570": {
                "variable": {
                    "value": "new_dec_in_state",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_c, w_reduce_c) + bias_reduce_c)",
                            "Call"
                        ],
                        [
                            "np.concatenate(cells, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_h, w_reduce_h) + bias_reduce_h)",
                            "Call"
                        ],
                        [
                            "np.concatenate(hiddens, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_651": {
                "input_tensor": {
                    "value": "values_per_ex",
                    "possible_values": [
                        [
                            "sum(values_per_step) / dec_lens",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_669": {
                "variable": {
                    "value": "covloss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.minimum(a, q_coverage)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "reduce_sum_676": {
                "variable": {
                    "value": "covloss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.minimum(a, r_coverage)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self._r_batch_extend_vocab",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, hps.review_num, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self._q_batch_extend_vocab",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self._max_oovs",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "name": {
                    "value": "max_oovs",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.q_prev_coverage",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "q_prev_coverage",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.r_prev_coverage",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.batch_size, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "r_prev_coverage",
                    "possible_values": []
                }
            },
            "LSTMCell_104": {
                "variable": {
                    "value": "cell_fw",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DropoutWrapper_105": {
                "variable": {
                    "value": "cell_fw",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_fw",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_fw, output_keep_prob=dropout)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_106": {
                "variable": {
                    "value": "cell_bw",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hps.hidden_dim",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.rand_unif_init",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DropoutWrapper_107": {
                "variable": {
                    "value": "cell_bw",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_bw",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_bw, output_keep_prob=dropout)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_108": {
                "variable": {
                    "value": "(encoder_outputs, (fw_st, bw_st))",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_fw, output_keep_prob=dropout)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self._hps.hidden_dim, initializer=self.rand_unif_init, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_bw, output_keep_prob=dropout)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seq_len",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "encoder_outputs",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_outputs",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=encoder_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "w_reduce_c",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_c",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim * 2 + op_dim, hidden_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "w_reduce_h",
                    "possible_values": []
                },
                "name": {
                    "value": "w_reduce_h",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim * 2 + op_dim, hidden_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "get_variable_130": {
                "variable": {
                    "value": "bias_reduce_c",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_c",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "get_variable_131": {
                "variable": {
                    "value": "bias_reduce_h",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_reduce_h",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "old_c",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.c, bw_st.c, op]",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "old_h",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_st.h, bw_st.h, op]",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "new_c",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_c, w_reduce_c) + bias_reduce_c",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "new_h",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(old_h, w_reduce_h) + bias_reduce_h",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "extra_zeros",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self._hps.batch_size, self._max_oovs)",
                    "possible_values": []
                }
            },
            "flatten_189": {
                "variable": {
                    "value": "r_batch_extend_vocab",
                    "possible_values": []
                },
                "structure": {
                    "value": "self._r_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "range_190": {
                "variable": {
                    "value": "batch_nums",
                    "possible_values": []
                },
                "limit": {
                    "value": "self._hps.batch_size",
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "variable": {
                    "value": "batch_nums",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_194": {
                "variable": {
                    "value": "r_batch_nums",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, r_attn_len]",
                    "possible_values": []
                }
            },
            "tile_195": {
                "variable": {
                    "value": "q_batch_nums",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "possible_values": [
                        [
                            "tf.range(0, limit=self._hps.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=hps.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, q_attn_len]",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "r_indices",
                    "possible_values": []
                },
                "values": {
                    "value": "(r_batch_nums, r_batch_extend_vocab)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "q_indices",
                    "possible_values": []
                },
                "values": {
                    "value": "(q_batch_nums, self._q_batch_extend_vocab)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "tensor": {
                    "value": "self._r_padding_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * num, -1]",
                    "possible_values": []
                }
            },
            "reshape_248": {
                "tensor": {
                    "value": "q_padding_mask",
                    "possible_values": [
                        [
                            "tf.expand_dims(self._q_padding_mask, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_padding_mask, (1, num, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * num, -1]",
                    "possible_values": []
                }
            },
            "reshape_325": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "attn_dists",
                            "Name"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num, -1]",
                    "possible_values": []
                }
            },
            "multiply_326": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "attn_dists",
                            "Name"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "review_attention",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(U, w), [batch_size, -1]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(review_attention, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "attn_norm",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_dist",
                    "possible_values": [
                        [
                            "attn_dists",
                            "Name"
                        ],
                        [
                            "tf.reshape(attn_dist, [batch_size, num, -1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(attn_dist, review_attention)",
                            "Call"
                        ],
                        [
                            "tf.divide(attn_norm, tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "divide_328": {
                "variable": {
                    "value": "attn_dist",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_norm",
                    "possible_values": [
                        [
                            "tf.reshape(attn_dist, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.reduce_sum(attn_norm, 1), -1)",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_341": {
                "variable": {
                    "value": "self.rand_unif_init",
                    "possible_values": []
                },
                "minval": {
                    "value": "-hps.rand_unif_init_mag",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hps.rand_unif_init_mag",
                    "possible_values": []
                },
                "seed": {
                    "value": "123",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_342": {
                "variable": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                },
                "stddev": {
                    "value": "hps.trunc_norm_init_std",
                    "possible_values": []
                }
            },
            "reshape_359": {
                "variable": {
                    "value": "r_lens",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._r_lens",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_360": {
                "variable": {
                    "value": "emb_enc_inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_enc_inputs",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self._r_batch)",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb_enc_inputs, [hps.batch_size * hps.review_num, -1, hps.emb_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[hps.batch_size * hps.review_num, -1, hps.emb_dim]",
                    "possible_values": []
                }
            },
            "top_k_450": {
                "variable": {
                    "value": "(topk_probs, self._topk_ids)",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dists",
                    "possible_values": [
                        [
                            "[vocab_dist + r_copy_dist + q_copy_dist for (vocab_dist, r_copy_dist, q_copy_dist) in zip(vocab_dists_extended, r_attn_dists_projected, q_attn_dists_projected)]",
                            "ListComp"
                        ],
                        [
                            "final_dists[0]",
                            "Subscript"
                        ],
                        [
                            "self._calc_final_dist(vocab_dists, self.q_attn_dists, self.r_attn_dists)",
                            "Call"
                        ],
                        [
                            "vocab_dists",
                            "Name"
                        ]
                    ]
                },
                "k": {
                    "value": "hps.batch_size * 2",
                    "possible_values": []
                }
            },
            "log_451": {
                "variable": {
                    "value": "self._topk_log_probs",
                    "possible_values": []
                },
                "x": {
                    "value": "topk_probs",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_463": {
                "variable": {
                    "value": "(grads, _)",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "possible_values": [
                        [
                            "tf.gradients(loss_to_minimize, tvars, aggregation_method=tf.AggregationMethod.EXPERIMENTAL_TREE)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self._hps.max_grad_norm",
                    "possible_values": []
                }
            },
            "info_476": {
                "msg": {
                    "value": "Building graph...",
                    "possible_values": []
                }
            },
            "info_486": {
                "msg": {
                    "value": "Time to build graph: %i seconds",
                    "possible_values": []
                },
                "*args": {
                    "value": "t1 - t0",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "'encoder' + scope",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "reduce_final_st",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_138": {
                "c": {
                    "value": "new_c",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_c, w_reduce_c) + bias_reduce_c)",
                            "Call"
                        ],
                        [
                            "np.concatenate(cells, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(old_h, w_reduce_h) + bias_reduce_h)",
                            "Call"
                        ],
                        [
                            "np.concatenate(hiddens, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "final_distribution",
                    "possible_values": []
                }
            },
            "transpose_239": {
                "a": {
                    "value": "reviews",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "reduce_max_241": {
                "input_tensor": {
                    "value": "att_mat",
                    "possible_values": [
                        [
                            "tf.matmul(transform_left, tf.transpose(reviews, [0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_244": {
                "tensor": {
                    "value": "masked_sums",
                    "possible_values": [
                        [
                            "tf.reduce_sum(r_attn, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q_attn, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "reduce_max_247": {
                "input_tensor": {
                    "value": "att_mat",
                    "possible_values": [
                        [
                            "tf.matmul(transform_left, tf.transpose(reviews, [0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "tensor": {
                    "value": "masked_sums",
                    "possible_values": [
                        [
                            "tf.reduce_sum(r_attn, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(q_attn, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "reduce_sum_255": {
                "input_tensor": {
                    "value": "dec_review_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(reviews, r_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, num, -1, dim2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_review_inputs, [batch_size, -1, dim2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_256": {
                "input_tensor": {
                    "value": "dec_question_inputs",
                    "possible_values": [
                        [
                            "tf.multiply(question, q_attn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec_question_inputs, [batch_size, num, -1, dim1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dec_question_inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_274": {
                "a": {
                    "value": "r_embed",
                    "possible_values": [
                        [
                            "tf.reshape(r_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([r_embed, overlap2], 2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "reduce_max_275": {
                "input_tensor": {
                    "value": "overlap1",
                    "possible_values": [
                        [
                            "tf.matmul(q_embed, tf.transpose(r_embed, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_max(overlap1, axis=2), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "transpose_277": {
                "a": {
                    "value": "q_embed",
                    "possible_values": [
                        [
                            "tf.expand_dims(q_embed, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_embed, (1, num, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(q_embed, (batch_size * num, -1, emb_dim))",
                            "Call"
                        ],
                        [
                            "tf.concat([q_embed, overlap1], 2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "reduce_max_278": {
                "input_tensor": {
                    "value": "overlap2",
                    "possible_values": [
                        [
                            "tf.matmul(r_embed, tf.transpose(q_embed, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_max(overlap2, axis=2), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "matmul_292": {
                "a": {
                    "value": "sentiment_input",
                    "possible_values": [
                        [
                            "tf.concat([hidden_output, rating_batch], 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[dim1, hidden_size], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_297": {
                "tensor": {
                    "value": "tf.matmul(U, w)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "possible_values": []
                }
            },
            "transpose_298": {
                "a": {
                    "value": "sentiment_input",
                    "possible_values": [
                        [
                            "tf.concat([hidden_output, rating_batch], 2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "tensor": {
                    "value": "review_attention",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.reshape(tf.matmul(U, w), [batch_size, -1]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(review_attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1]",
                    "possible_values": []
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "seq2seq",
                    "possible_values": []
                }
            },
            "embedding_lookup_352": {
                "variable": {
                    "value": "emb_enc_inputs",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "possible_values": [
                        [
                            "config.embeddings.add()",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', initializer=init_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self._r_batch",
                    "possible_values": []
                }
            },
            "embedding_lookup_354": {
                "variable": {
                    "value": "emb_q_inputs",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "possible_values": [
                        [
                            "config.embeddings.add()",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', initializer=init_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self._q_batch",
                    "possible_values": []
                }
            },
            "one_hot_370": {
                "variable": {
                    "value": "rating_batch",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._rating_batch",
                    "possible_values": []
                },
                "depth": {
                    "value": "5",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_371": {
                "variable": {
                    "value": "sentiment_input",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_output, rating_batch]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_374": {
                "variable": {
                    "value": "losses",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.y_prob",
                    "possible_values": []
                },
                "labels": {
                    "value": "self._y_target_batch",
                    "possible_values": []
                }
            },
            "reduce_mean_375": {
                "variable": {
                    "value": "self._loss_sa",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=self.y_prob, labels=self._y_target_batch)",
                            "Call"
                        ],
                        [
                            "-tf.log(gold_probs)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "cast_386": {
                "variable": {
                    "value": "self.predictions",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.y_pred, 1, name='predictions')",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "equal_387": {
                "variable": {
                    "value": "correct_predictions",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "possible_values": []
                },
                "y": {
                    "value": "self._y_target_batch",
                    "possible_values": []
                }
            },
            "cast_388": {
                "variable": {
                    "value": "self.batch_accuracy",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_predictions",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, self._y_target_batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_mean_389": {
                "variable": {
                    "value": "self.accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.batch_accuracy",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "device_462": {
                "device_name": {
                    "value": "/gpu:0",
                    "possible_values": []
                }
            },
            "device_470": {
                "device_name": {
                    "value": "/gpu:0",
                    "possible_values": []
                }
            },
            "device_479": {
                "device_name": {
                    "value": "/gpu:0",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_609": {
                "c": {
                    "value": "results['states'].c[i, :]",
                    "possible_values": []
                },
                "h": {
                    "value": "results['states'].h[i, :]",
                    "possible_values": []
                }
            },
            "minimum_669": {
                "x": {
                    "value": "a",
                    "possible_values": [
                        [
                            "q_attn_dists",
                            "Name"
                        ],
                        [
                            "r_attn_dists",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "q_coverage",
                    "possible_values": [
                        [
                            "tf.zeros_like(q_attn_dists[0])",
                            "Call"
                        ],
                        [
                            "q_coverage + a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_676": {
                "x": {
                    "value": "a",
                    "possible_values": [
                        [
                            "q_attn_dists",
                            "Name"
                        ],
                        [
                            "r_attn_dists",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "r_coverage",
                    "possible_values": [
                        [
                            "tf.zeros_like(r_attn_dists[0])",
                            "Call"
                        ],
                        [
                            "r_coverage + a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_183": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[dist, extra_zeros]",
                    "possible_values": []
                }
            },
            "shape_193": {
                "input": {
                    "value": "self._q_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "scatter_nd_199": {
                "indices": {
                    "value": "r_indices",
                    "possible_values": [
                        [
                            "tf.stack((r_batch_nums, r_batch_extend_vocab), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "copy_dist",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "[self._hps.batch_size, extended_vsize]",
                            "List"
                        ]
                    ]
                }
            },
            "scatter_nd_200": {
                "indices": {
                    "value": "q_indices",
                    "possible_values": [
                        [
                            "tf.stack((q_batch_nums, self._q_batch_extend_vocab), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "copy_dist",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "[self._hps.batch_size, extended_vsize]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_297": {
                "a": {
                    "value": "U",
                    "possible_values": [
                        [
                            "tf.get_variable('U', shape=[dim1, dim2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(sentiment_input, W))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[hidden_size, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [hps.hidden_dim, vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_314": {
                "value": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "expand_dims_328": {
                "input": {
                    "value": "tf.reduce_sum(attn_norm, 1)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "variable_scope_345": {
                "name_or_scope": {
                    "value": "embedding",
                    "possible_values": []
                }
            },
            "get_variable_348": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_embeddings",
                    "possible_values": [
                        [
                            "data.get_init_embeddings(vocab._id_to_word, hps.emb_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_350": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize, hps.emb_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "co-attention",
                    "possible_values": []
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "sentiment_layer",
                    "possible_values": []
                }
            },
            "variable_scope_381": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "get_variable_394": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.hidden_dim, vsize]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "get_variable_395": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vsize]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.trunc_norm_init",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "a": {
                    "value": "old_c",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[fw_st.c, bw_st.c, op])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_c",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_c', [hidden_dim * 2 + op_dim, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_137": {
                "a": {
                    "value": "old_h",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[fw_st.h, bw_st.h, op])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reduce_h",
                    "possible_values": [
                        [
                            "tf.get_variable('w_reduce_h', [hidden_dim * 2 + op_dim, hidden_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "self._r_batch_extend_vocab",
                    "possible_values": []
                }
            },
            "reduce_sum_328": {
                "input_tensor": {
                    "value": "attn_norm",
                    "possible_values": [
                        [
                            "tf.reshape(attn_dist, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "embedding_lookup_353": {
                "params": {
                    "value": "embedding",
                    "possible_values": [
                        [
                            "config.embeddings.add()",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', initializer=init_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [vsize, hps.emb_dim], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "argmax_386": {
                "input": {
                    "value": "self.y_pred",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "possible_values": []
                }
            },
            "variable_scope_393": {
                "name_or_scope": {
                    "value": "output_projection",
                    "possible_values": []
                }
            },
            "variable_scope_415": {
                "name_or_scope": {
                    "value": "loss",
                    "possible_values": []
                }
            },
            "range_420": {
                "variable": {
                    "value": "batch_nums",
                    "possible_values": []
                },
                "limit": {
                    "value": "hps.batch_size",
                    "possible_values": []
                }
            },
            "scalar_435": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self._loss",
                    "possible_values": []
                }
            },
            "unstack_353": {
                "value": {
                    "value": "self._dec_batch",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_402": {
                "logits": {
                    "value": "s",
                    "possible_values": []
                }
            },
            "stack_423": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, targets)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_nd_424": {
                "variable": {
                    "value": "gold_probs",
                    "possible_values": []
                },
                "params": {
                    "value": "dist",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, targets), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_444": {
                "name": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self._total_loss",
                    "possible_values": []
                }
            },
            "get_variable_scope_399": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "xw_plus_b_400": {
                "x": {
                    "value": "output",
                    "possible_values": []
                },
                "weights": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[hidden_size, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [hps.hidden_dim, vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "v",
                    "possible_values": [
                        [
                            "tf.get_variable('v', [vsize], dtype=tf.float32, initializer=self.trunc_norm_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_432": {
                "values": {
                    "value": "vocab_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_439": {
                "name_or_scope": {
                    "value": "coverage_loss",
                    "possible_values": []
                }
            },
            "scalar_442": {
                "name": {
                    "value": "coverage_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self._coverage_loss",
                    "possible_values": []
                }
            },
            "log_425": {
                "x": {
                    "value": "gold_probs",
                    "possible_values": [
                        [
                            "tf.gather_nd(dist, indices)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "oaag-static/util.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_36": {
                "variable": {
                    "value": "ckpt_state",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, ckpt_dir)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "latest_filename": {
                    "value": "latest_filename",
                    "possible_values": [
                        [
                            "'checkpoint_best' if ckpt_dir == 'eval' else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "info_37": {
                "msg": {
                    "value": "Loading checkpoint %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_state.model_checkpoint_path",
                    "possible_values": []
                }
            },
            "info_41": {
                "msg": {
                    "value": "Failed to load checkpoint from %s. Sleeping for %i secs...",
                    "possible_values": []
                },
                "*args": {
                    "value": "ckpt_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_root, ckpt_dir)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "10",
                    "possible_values": []
                }
            }
        }
    }
}