{
    "model.py": {
        "sklearn": {
            "recall_score_55": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.argmax(class_probs) for class_probs in prediction]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_56": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.argmax(class_probs) for class_probs in prediction]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "dropout_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_62": {
                "variable": {
                    "value": "lstm_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x1, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', [None, None, n_input], name='x1')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x2, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', [None, None, n_input], name='x2')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_81": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x3, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', [None, None, n_input], name='x3')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_82": {
                "variable": {
                    "value": "lstm_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_83": {
                "variable": {
                    "value": "lstm_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "z3",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_129": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_137": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_net(x1, z1, hidden_units, weights, biases, keep_prob, bidirectional, concat)",
                            "Call"
                        ],
                        [
                            "create_inception_like(x1, x2, x3, z1, z2, z3, hidden_units, weights, biases, keep_prob, concat)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', [None, n_classes], name='y')",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_141": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_64": {
                "variable": {
                    "value": "lstm_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_65": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "lstm_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "lstm_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_67": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outputs[0][:, -1], outputs[1][:, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[outputs1[0][:, -1], outputs1[1][:, -1], outputs2[0][:, -1], outputs2[1][:, -1], outputs3[0][:, -1], outputs3[1][:, -1]]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_99": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([outputs[0][:, -1], outputs[1][:, -1]], axis=1)",
                            "Call"
                        ],
                        [
                            "(outputs[0][:, -1] + outputs[1][:, -1]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "outputs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.mean(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_124": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([2 * 3 * hidden_units, n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([outputs[0][:, -1], outputs[1][:, -1]], axis=1)",
                            "Call"
                        ],
                        [
                            "(outputs[0][:, -1] + outputs[1][:, -1]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "outputs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.mean(output)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([2 * 3 * hidden_units, n_classes]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([2 * hidden_units, n_classes]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_units, n_classes]))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "siamese_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_86": {
                "variable": {
                    "value": "(outputs1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "lstm_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "lstm_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x1, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', [None, None, n_input], name='x1')",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_89": {
                "variable": {
                    "value": "(outputs2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "lstm_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "lstm_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x2, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', [None, None, n_input], name='x2')",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_92": {
                "variable": {
                    "value": "(outputs3, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "lstm_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "lstm_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(hidden_units, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(x3, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', [None, None, n_input], name='x3')",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "z3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([outputs[0][:, -1], outputs[1][:, -1]], axis=1)",
                            "Call"
                        ],
                        [
                            "(outputs[0][:, -1] + outputs[1][:, -1]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "outputs[:, -1]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.mean(output)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([2 * 3 * hidden_units, n_classes]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([2 * hidden_units, n_classes]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_units, n_classes]))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_126": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([2 * hidden_units, n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_128": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_units, n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "input_tensor": {
                    "value": "tf.nn.l2_loss(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "input_tensor": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_141": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', [None, n_classes], name='y')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_142": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_146": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "net_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_87": {
                "name": {
                    "value": "net_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "net_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_136": {
                "t": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([2 * 3 * hidden_units, n_classes]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([2 * hidden_units, n_classes]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_units, n_classes]))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_146": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}