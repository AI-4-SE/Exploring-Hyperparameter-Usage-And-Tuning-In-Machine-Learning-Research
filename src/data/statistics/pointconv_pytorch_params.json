{
    "utils/pointconv_util.py": {
        "sklearn": {},
        "torch": {
            "arange_56": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "npoint",
                            "Method Argument"
                        ],
                        [
                            "npoint",
                            "Method Argument"
                        ],
                        [
                            "npoint",
                            "Method Argument"
                        ],
                        [
                            "npoint",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "farthest",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_75": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_98": {
                "variable": {
                    "value": "group_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_117": {
                "variable": {
                    "value": "(_, group_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sqrdists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "square_distance(new_xyz, xyz)",
                            "Call"
                        ],
                        [
                            "square_distance(new_xyz, xyz)",
                            "Call"
                        ],
                        [
                            "square_distance(xyz, xyz)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nsample",
                            "Method Argument"
                        ],
                        [
                            "nsample",
                            "Method Argument"
                        ],
                        [
                            "nsample",
                            "Method Argument"
                        ],
                        [
                            "nsample",
                            "Method Argument"
                        ],
                        [
                            "nsample",
                            "Method Argument"
                        ],
                        [
                            "nsample",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, points.view(B, 1, N, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_241": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_242": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_270": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_271": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * mlp[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_280": {
                "variable": {
                    "value": "self.bn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_310": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weights.permute(0, 3, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_313": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "variable"
                        ],
                        [
                            "sample_and_group_all(xyz, points)",
                            "Call"
                        ],
                        [
                            "sample_and_group(self.npoint, self.nsample, xyz, points)",
                            "Call"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, inverse_density.view(B, N, 1))",
                            "Call"
                        ],
                        [
                            "sample_and_group(self.npoint, self.nsample, xyz, points, inverse_density.view(B, N, 1))",
                            "Call"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "new_points * density_scale",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_323": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_324": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_332": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * mlp[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_333": {
                "variable": {
                    "value": "self.bn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_374": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weights.permute(0, 3, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_377": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "variable"
                        ],
                        [
                            "sample_and_group_all(xyz, points)",
                            "Call"
                        ],
                        [
                            "sample_and_group(self.npoint, self.nsample, xyz, points)",
                            "Call"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, inverse_density.view(B, N, 1))",
                            "Call"
                        ],
                        [
                            "sample_and_group(self.npoint, self.nsample, xyz, points, inverse_density.view(B, N, 1))",
                            "Call"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "new_points * density_scale",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_36": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_206": {
                "input": {
                    "value": "-sqrdists / (2.0 * bandwidth * bandwidth)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_261": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(weights))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_306": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_365": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_82": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_217": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_218": {
                "num_features": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "in_channels": {
                    "value": "hidden_unit[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_223": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_230": {
                "variable": {
                    "value": "density_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "density_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn(conv(density_scale))",
                            "Call"
                        ],
                        [
                            "F.sigmoid(density_scale)",
                            "Call"
                        ],
                        [
                            "F.relu(density_scale)",
                            "Call"
                        ],
                        [
                            "grouped_density / inverse_max_density",
                            "BinOp"
                        ],
                        [
                            "self.densitynet(density_scale.permute(0, 3, 2, 1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "density_scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_232": {
                "variable": {
                    "value": "density_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "density_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn(conv(density_scale))",
                            "Call"
                        ],
                        [
                            "F.sigmoid(density_scale)",
                            "Call"
                        ],
                        [
                            "F.relu(density_scale)",
                            "Call"
                        ],
                        [
                            "grouped_density / inverse_max_density",
                            "BinOp"
                        ],
                        [
                            "self.densitynet(density_scale.permute(0, 3, 2, 1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "density_scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "hidden_unit[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_221": {
                "num_features": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_245": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_248": {
                "num_features": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "hidden_unit[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_253": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_274": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_275": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_328": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_250": {
                "in_channels": {
                    "value": "hidden_unit[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_251": {
                "num_features": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils/ModelNetDataLoader.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "DataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNetDataLoader('./data/modelnet40_normal_resampled/', split='train', uniform=False, normal_channel=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "eval_cls_conv.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "testDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNetDataLoader(root=DATA_PATH, npoint=args.num_point, split='test', normal_channel=args.normal)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_69": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/pointconv.py": {
        "torch": {
            "randn_43": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(8, 3, 2048)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_44": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l3_points.view(B, 1024)",
                            "Call"
                        ],
                        [
                            "self.drop1(F.relu(self.bn1(self.fc1(x))))",
                            "Call"
                        ],
                        [
                            "self.drop2(F.relu(self.bn2(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_33": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_cls_conv.py": {
        "torch": {
            "DataLoader_67": {
                "variable": {
                    "value": "trainDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TRAIN_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNetDataLoader(root=DATA_PATH, npoint=args.num_point, split='train', normal_channel=args.normal)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "testDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNetDataLoader(root=DATA_PATH, npoint=args.num_point, split='test', normal_channel=args.normal)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_102": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(classifier.parameters(), lr=0.01, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(classifier.parameters(), lr=args.learning_rate, betas=(0.9, 0.999), eps=1e-08, weight_decay=args.decay_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nll_loss_133": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(points[:, :3, :], points[:, 3:, :])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target.long()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "max_24": {
                "variable": {
                    "value": "(_, y_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(y_pred, -1)",
                            "Call"
                        ],
                        [
                            "y_pred.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_43": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'train_accuracy': train_accuracy, 'test_accuracy': test_accuracy, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path + '/%s-%f-%04d.pth' % (modelnet, test_accuracy, epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_14": {
                "n": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "13",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}