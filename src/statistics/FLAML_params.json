{
    "flaml/automl.py": {
        "sklearn": {
            "AutoML_469": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "self._settings": {
                    "value": "settings",
                    "possible_values": []
                }
            },
            "GroupKFold_1406": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        [
                            "int(y_train_all.size / period - 1)",
                            "Call"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_1215": {
                "variable": {
                    "value": "(X_train_all, y_train_all, self._state.sample_weight_all)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_all",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train_all",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "self._sample_weight_full",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "shuffle_1227": {
                "variable": {
                    "value": "(X_train_all, y_train_all)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_all",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train_all",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "RepeatedStratifiedKFold_1418": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        [
                            "int(y_train_all.size / period - 1)",
                            "Call"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_repeats": {
                    "value": "1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "GroupShuffleSplit_1283": {
                "variable": {
                    "value": "gss",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "1",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_ratio",
                    "possible_values": [
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "train_test_split_1266": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val, self._state.fit_kwargs[sample_weight], self._state.weight_val)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_all",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train_all",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "self._state.fit_kwargs['sample_weight']",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_ratio",
                    "possible_values": [
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "train_test_split_1276": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_all",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train_all",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_ratio",
                    "possible_values": [
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "TimeSeriesSplit_1434": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        [
                            "int(y_train_all.size / period - 1)",
                            "Call"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "test_size": {
                    "value": "period",
                    "possible_values": [
                        [
                            "self._state.fit_kwargs['period']",
                            "Subscript"
                        ],
                        [
                            "self._state.fit_kwargs['period']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TimeSeriesSplit_1436": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        [
                            "int(y_train_all.size / period - 1)",
                            "Call"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RepeatedKFold_1439": {
                "variable": {
                    "value": "self._state.kf",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "possible_values": [
                        [
                            "int(y_train_all.size / period - 1)",
                            "Call"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "n_splits or self._settings.get('n_splits')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_repeats": {
                    "value": "1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "train_test_split_1322": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val, weight_train, weight_val)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_rest",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_rest",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "self._state.fit_kwargs['sample_weight'][rest]",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_ratio",
                    "possible_values": [
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "train_test_split_1341": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_rest",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_rest",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_ratio",
                    "possible_values": [
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "stratify",
                    "possible_values": [
                        [
                            "y_rest if self._split_type == 'stratified' else None",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "train_test_split_1373": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val, self._state.fit_kwargs[sample_weight], self._state.weight_val)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_all",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train_all",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "self._state.fit_kwargs['sample_weight']",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_ratio",
                    "possible_values": [
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            },
            "train_test_split_1383": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_all",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train_all",
                    "possible_values": []
                },
                "test_size": {
                    "value": "split_ratio",
                    "possible_values": [
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "split_ratio or self._settings.get('split_ratio')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/data.py": {
        "sklearn": {
            "train_test_split_107": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fetch_openml_106": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "data_id": {
                    "value": "dataset_id",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LabelEncoder_380": {
                "variable": {
                    "value": "self.label_transformer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ColumnTransformer_357": {
                "variable": {
                    "value": "self.transformer",
                    "possible_values": []
                },
                "transformers": {
                    "value": "[('continuous', SimpleImputer(missing_values=np.nan, strategy='median'), X_num.columns)]",
                    "possible_values": []
                }
            },
            "SimpleImputer_361": {
                "missing_values": {
                    "value": "np.nan",
                    "possible_values": []
                },
                "strategy": {
                    "value": "median",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/default/estimator.py": {
        "sklearn": {}
    },
    "flaml/default/greedy.py": {
        "sklearn": {
            "RobustScaler_33": {
                "variable": {
                    "value": "scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "pairwise_distances_40": {
                "X": {
                    "value": "meta_features.loc[t].to_numpy().reshape(1, -1)",
                    "possible_values": []
                },
                "Y": {
                    "value": "other_meta_features",
                    "possible_values": [
                        [
                            "meta_features.drop(t)",
                            "Call"
                        ]
                    ]
                },
                "metric": {
                    "value": "l2",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/default/portfolio.py": {
        "sklearn": {
            "RobustScaler_24": {
                "variable": {
                    "value": "scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/default/suggest.py": {
        "sklearn": {
            "NearestNeighbors_86": {
                "variable": {
                    "value": "nn",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/ml.py": {
        "sklearn": {
            "confusion_matrix_686": {
                "variable": {
                    "value": "conf_mat",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "[[labels[p] if 0 <= p < label_len else -1 for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ],
                        [
                            "y_pred_classes[:, 1] if y_pred_classes.ndim > 1 else y_pred_classes",
                            "IfExp"
                        ],
                        [
                            "estimator.predict_proba(X)",
                            "Call"
                        ],
                        [
                            "estimator.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "label_binarize_709": {
                "variable": {
                    "value": "y_true_binary",
                    "possible_values": []
                },
                "y": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "classes": {
                    "value": "classes",
                    "possible_values": [
                        [
                            "np.unique(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_279": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_absolute_error_285": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_squared_error_282": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_squared_error_287": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "accuracy_score_289": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "roc_auc_score_291": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "roc_auc_score_293": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "multi_class": {
                    "value": "ovr",
                    "possible_values": []
                }
            },
            "log_loss_301": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "np.unique(y_train_all)",
                            "Call"
                        ],
                        [
                            "fit_kwargs.get('label_list')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "roc_auc_score_297": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "multi_class": {
                    "value": "ovo",
                    "possible_values": []
                }
            },
            "mean_absolute_percentage_error_304": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                }
            },
            "f1_score_308": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "possible_values": []
                }
            },
            "f1_score_312": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            },
            "f1_score_316": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "average_precision_score_318": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "y_true.to_list() if type(y_true) == pd.Series else list(y_true)",
                            "IfExp"
                        ],
                        [
                            "[[labels[l] for (p, l) in each_list] for each_list in zip_pred_true]",
                            "ListComp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_predict",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ndcg_score_328": {
                "y_true": {
                    "value": "np.asarray([y_true[psum:psum + c]])",
                    "possible_values": []
                },
                "y_score": {
                    "value": "np.asarray([y_predict[psum:psum + c]])",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "possible_values": [
                        [
                            "int(metric_name.split('@', 1)[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ndcg_score_337": {
                "y_true": {
                    "value": "[y_true]",
                    "possible_values": []
                },
                "y_score": {
                    "value": "[y_predict]",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/model.py": {
        "sklearn": {
            "r2_score_1809": {
                "y_true": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "self.predict(X_val, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.predict(X_val)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_val",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DummyClassifier_197": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DummyRegressor_199": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "flaml/onlineml/trial.py": {
        "sklearn": {}
    },
    "test/automl/test_classification.py": {
        "sklearn": {
            "load_breast_cancer_169": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_breast_cancer_254": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "train_test_split_255": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_constraints.py": {
        "sklearn": {
            "train_test_split_35": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "log_loss_87": {
                "variable": {
                    "value": "val_loss",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "estimator.predict_proba(X_val)",
                            "Call"
                        ],
                        [
                            "estimator.predict_proba(X_train)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "weight_val",
                    "possible_values": []
                }
            },
            "log_loss_89": {
                "variable": {
                    "value": "train_loss",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "estimator.predict_proba(X_val)",
                            "Call"
                        ],
                        [
                            "estimator.predict_proba(X_train)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "weight_train",
                    "possible_values": []
                }
            },
            "train_test_split_128": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "fetch_openml_30": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "name": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "'credit-g'",
                            "Constant"
                        ]
                    ]
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "fetch_openml_123": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "name": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "'credit-g'",
                            "Constant"
                        ]
                    ]
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_wine_34": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_wine_127": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_custom_hp.py": {
        "sklearn": {
            "load_iris_37": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_multiclass.py": {
        "sklearn": {
            "log_loss_117": {
                "variable": {
                    "value": "val_loss",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "estimator.predict_proba(X_val)",
                            "Call"
                        ],
                        [
                            "estimator.predict_proba(X_train)",
                            "Call"
                        ],
                        [
                            "estimator.predict(X_train)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "weight_val",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_loss_119": {
                "variable": {
                    "value": "train_loss",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "possible_values": [
                        [
                            "np.random.randint(3, size=1554)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "estimator.predict_proba(X_val)",
                            "Call"
                        ],
                        [
                            "estimator.predict_proba(X_train)",
                            "Call"
                        ],
                        [
                            "estimator.predict(X_train)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "weight_train",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_wine_132": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_wine_152": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_iris_172": {
                "variable": {
                    "value": "(df, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_iris_234": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "as_frame",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_iris_273": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_iris_293": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_iris_318": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_iris_356": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_iris_379": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_iris_400": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "as_frame",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_iris_458": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "as_frame",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "test/automl/test_python_log.py": {
        "sklearn": {
            "fetch_california_housing_41": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_regression.py": {
        "sklearn": {
            "make_regression_220": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "n_targets": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "train_test_split_223": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.3",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "MultiOutputRegressor_228": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "estimator": {
                    "value": "AutoML(task='regression', time_budget=1)",
                    "possible_values": []
                }
            },
            "RegressorChain_235": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "AutoML(task='regression', time_budget=1)",
                    "possible_values": []
                }
            },
            "fetch_california_housing_46": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "fetch_california_housing_142": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_score.py": {
        "sklearn": {
            "fetch_california_housing_149": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "fetch_openml_186": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "name": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "'credit-g'",
                            "Constant"
                        ]
                    ]
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_wine_191": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_split.py": {
        "sklearn": {
            "accuracy_score_42": {
                "variable": {
                    "value": "acc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "automl.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "TestKFold_136": {
                "base_class_0": {
                    "value": "sklearn.model_selection.KFold",
                    "possible_values": []
                }
            },
            "fetch_openml_26": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "name": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "'credit-g'",
                            "Constant"
                        ]
                    ]
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "train_test_split_32": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_36": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "fetch_openml_59": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "name": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "'credit-g'",
                            "Constant"
                        ]
                    ]
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "fetch_openml_88": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "name": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "'credit-g'",
                            "Constant"
                        ]
                    ]
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "fetch_openml_128": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "name": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "'credit-g'",
                            "Constant"
                        ]
                    ]
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_wine_30": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_wine_63": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_wine_93": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_wine_132": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_training_log.py": {
        "sklearn": {
            "fetch_california_housing_36": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_warmstart.py": {
        "sklearn": {
            "load_iris_22": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "as_frame",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_iris_122": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_xgboost2d.py": {
        "sklearn": {
            "train_test_split_52": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "fetch_openml_47": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "name": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "'credit-g'",
                            "Constant"
                        ]
                    ]
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_wine_51": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/automl/test_xgboost2d_sample_size.py": {
        "sklearn": {
            "fetch_openml_33": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "name": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "'credit-g'",
                            "Constant"
                        ]
                    ]
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "train_test_split_34": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            }
        }
    },
    "test/default/test_defaults.py": {
        "sklearn": {
            "load_iris_43": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "as_frame",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fetch_california_housing_60": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "as_frame",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_breast_cancer_71": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_iris_85": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "train_test_split_86": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "fetch_california_housing_129": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_breast_cancer_149": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "fetch_california_housing_157": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_iris_167": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "fetch_california_housing_175": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_breast_cancer_185": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "fetch_california_housing_195": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_breast_cancer_205": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "fetch_california_housing_214": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/object_store.py": {
        "sklearn": {
            "fetch_california_housing_9": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "False",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "train_test_split_11": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "mean_squared_error_28": {
                "variable": {
                    "value": "mse",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/rank.py": {
        "sklearn": {
            "fetch_openml_4": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "name": {
                    "value": "credit-g",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "test/ray/distribute_automl.py": {
        "sklearn": {
            "make_classification_8": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "possible_values": []
                },
                "n_features": {
                    "value": "10",
                    "possible_values": []
                }
            }
        }
    },
    "test/ray/distribute_tune.py": {
        "sklearn": {
            "load_breast_cancer_25": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "train_test_split_26": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                }
            },
            "accuracy_score_18": {
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_labels",
                    "possible_values": [
                        [
                            "np.rint(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/reg.py": {
        "sklearn": {
            "fetch_california_housing_13": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_autovw.py": {
        "sklearn": {
            "mean_squared_error_303": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "y_true": {
                    "value": "[y_pred]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "[y_true]",
                    "possible_values": []
                }
            },
            "mean_absolute_error_305": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "y_true": {
                    "value": "[y_pred]",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "[y_true]",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_conda_distribution.py": {
        "sklearn": {
            "load_iris_18": {
                "variable": {
                    "value": "(X_train, y_train)",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_gpu.py": {
        "sklearn": {
            "make_moons_26": {
                "variable": {
                    "value": "(train, label)",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "300000",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.3",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_model.py": {
        "sklearn": {
            "make_classification_21": {
                "variable": {
                    "value": "(X, y)",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "100000",
                    "possible_values": []
                },
                "n_features": {
                    "value": "1000",
                    "possible_values": []
                }
            }
        }
    },
    "test/tune/test_tune.py": {
        "sklearn": {
            "train_test_split_27": {
                "variable": {
                    "value": "(train_x, val_x, y_train, y_val)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                }
            },
            "train_test_split_59": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                }
            },
            "PCA_36": {
                "variable": {
                    "value": "pca",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "possible_values": [
                        [
                            "config['n_components']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "test/tune_example.py": {
        "sklearn": {
            "fetch_california_housing_8": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "False",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "train_test_split_10": {
                "variable": {
                    "value": "(df_train, _, X_train, X_test, _, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "y",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "mean_squared_error_33": {
                "variable": {
                    "value": "mse",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flaml/nlp/huggingface/data_collator.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "batch[labels]",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[feature.pop(label_name) for feature in features] if label_name in features[0] else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            }
        }
    },
    "test/nni/mnist.py": {
        "torch": {
            "Net_25": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_28": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "20",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_29": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "20",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "50",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_30": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "4 * 4 * 50",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "hidden_size",
                        "possible_values": [
                            [
                                "args['hidden_size']",
                                "Subscript"
                            ]
                        ]
                    }
                },
                "Linear_31": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "hidden_size",
                        "possible_values": [
                            [
                                "args['hidden_size']",
                                "Subscript"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "10",
                        "possible_values": []
                    }
                }
            },
            "device_99": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(data_dir, train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1000",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SGD_134": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                }
            },
            "max_pool2d_35": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "possible_values": []
                }
            },
            "max_pool2d_37": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "nll_loss_52": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                }
            },
            "manual_seed_97": {
                "seed": {
                    "value": "args['seed']",
                    "possible_values": []
                }
            },
            "log_softmax_41": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "nll_loss_76": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            }
        }
    },
    "test/tune/test_pytorch_cifar10.py": {
        "torch": {
            "Net_25": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_28": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "6",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    }
                },
                "MaxPool2d_29": {
                    "variable": {
                        "value": "self.pool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "2",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    }
                },
                "Conv2d_30": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "6",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    }
                },
                "Linear_31": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "16 * 5 * 5",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "l1",
                        "possible_values": [
                            [
                                "120",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Linear_32": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "l1",
                        "possible_values": [
                            [
                                "120",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "l2",
                        "possible_values": [
                            [
                                "84",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Linear_33": {
                    "variable": {
                        "value": "self.fc3",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "l2",
                        "possible_values": [
                            [
                                "84",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "10",
                        "possible_values": []
                    }
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_83": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['lr']",
                    "possible_values": [
                        [
                            "{'l1': tune.randint(2, 8), 'l2': tune.randint(2, 8), 'lr': tune.loguniform(0.0001, 0.1), 'num_epochs': tune.qloguniform(1, max_num_epochs, q=1), 'batch_size': tune.randint(1, 4)}",
                            "Dict"
                        ],
                        [
                            "{'l1': tune.randint(2, 9), 'l2': tune.randint(2, 9), 'lr': tune.loguniform(0.0001, 0.1), 'num_epochs': tune.loguniform(1, max_num_epochs), 'batch_size': tune.randint(1, 5)}",
                            "Dict"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_subset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(2 ** config['batch_size'])",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "valloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_subset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(2 ** config['batch_size'])",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "load_318": {
                "variable": {
                    "value": "(model_state, optimizer_state)",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "os.path.join(best_trial.checkpoint.value, 'checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "(model_state, optimizer_state)",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_310": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "possible_values": [
                        [
                            "Net(2 ** config['l1'], 2 ** config['l2'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "(_, predicted)",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "possible_values": []
                }
            },
            "DataParallel_313": {
                "variable": {
                    "value": "best_trained_model",
                    "possible_values": []
                },
                "module": {
                    "value": "best_trained_model",
                    "possible_values": [
                        [
                            "Net(2 ** best_trial.config['l1'], 2 ** best_trial.config['l2'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(best_trained_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_78": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_155": {
                "variable": {
                    "value": "(_, predicted)",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "(net.state_dict(), optimizer.state_dict())",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_36": {
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                }
            },
            "relu_37": {
                "input": {
                    "value": "self.conv2(x)",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}