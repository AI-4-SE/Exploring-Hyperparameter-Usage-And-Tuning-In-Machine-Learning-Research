{
    "core/learnable_priors/trip.py": {
        "sklearn": {
            "GaussianMixture_328": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "var_descr[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.distr_descr",
                            "Attribute"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "zeros_130": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_objects",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_132": {
                "variable": {
                    "value": "pref",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.tt_cores[0].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_134": {
                "variable": {
                    "value": "norm_pref",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.tt_cores[0].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_215": {
                "variable": {
                    "value": "cur_suf",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.tt_cores[-1].shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ParameterList_374": {
                "variable": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + [mean, log_std]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_89": {
                "variable": {
                    "value": "missed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "contr_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "var[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_156": {
                "variable": {
                    "value": "pref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.tt_cores[0].shape[1])",
                            "Call"
                        ],
                        [
                            "pref[None, :, :].repeat(num_objects, 1, 1)",
                            "Call"
                        ],
                        [
                            "pref.to(x.device)",
                            "Call"
                        ],
                        [
                            "torch.bmm(pref, cond_core)",
                            "Call"
                        ],
                        [
                            "pref / cur_norm_const",
                            "BinOp"
                        ],
                        [
                            "pref / cur_prob_addition[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.eye(self.tt_cores[0].shape[1])[None, :, :]",
                            "Subscript"
                        ],
                        [
                            "pref.repeat(num_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "pref.to(self.tt_cores[0])",
                            "Call"
                        ],
                        [
                            "torch.bmm(pref, cond_core) + self.eps",
                            "BinOp"
                        ],
                        [
                            "pref / norm_const",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cond_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "core.sum(dim=0)[None, :, :]",
                            "Subscript"
                        ],
                        [
                            "cond_core.repeat(num_objects, 1, 1)",
                            "Call"
                        ],
                        [
                            "core[None, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "cond_core * cur_contr_vect[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cond_core.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "core[None, :, :, :] * contr_vect[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cond_core.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "core[None, :, :, :] * contr_vect[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cond_core.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_228": {
                "variable": {
                    "value": "cur_suf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cond_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "core.sum(dim=0)[None, :, :]",
                            "Subscript"
                        ],
                        [
                            "cond_core.repeat(num_objects, 1, 1)",
                            "Call"
                        ],
                        [
                            "core[None, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "cond_core * cur_contr_vect[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cond_core.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "core[None, :, :, :] * contr_vect[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cond_core.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "core[None, :, :, :] * contr_vect[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cond_core.sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cur_suf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.tt_cores[-1].shape[-1])",
                            "Call"
                        ],
                        [
                            "cur_suf[None, :, :].repeat(num_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "cur_suf.to(self.tt_cores[0])",
                            "Call"
                        ],
                        [
                            "torch.bmm(cond_core, cur_suf)",
                            "Call"
                        ],
                        [
                            "cur_suf / norm_const",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_230": {
                "variable": {
                    "value": "norm_const",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_suf + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_231": {
                "variable": {
                    "value": "norm_const",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_const",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(cur_suf + self.eps, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm_const, dim=-2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(pref + self.eps, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm_const, dim=-2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_288": {
                "variable": {
                    "value": "norm_const",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pref + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_289": {
                "variable": {
                    "value": "norm_const",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_const",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(cur_suf + self.eps, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm_const, dim=-2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(pref + self.eps, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm_const, dim=-2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_293": {
                "tensors": {
                    "value": "[s.float()[:, None] for s in samples_list if s is not None]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_311": {
                "variable": {
                    "value": "cur_core",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "var_descr[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tt_int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tt_int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_357": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(self.tt_cores[r].data ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_47": {
                "variable": {
                    "value": "cur_core",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "var_descr[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tt_int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tt_int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_101": {
                "variable": {
                    "value": "contr_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * contr_vect ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_168": {
                "n": {
                    "value": "self.tt_cores[-1].shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_173": {
                "input": {
                    "value": "cur_prob_addition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pref * eye).sum(dim=-1).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "cur_prob_addition / cur_div",
                            "BinOp"
                        ],
                        [
                            "pref.sum(dim=-1).sum(dim=-1) + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_239": {
                "n": {
                    "value": "self.tt_cores[0].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_253": {
                "variable": {
                    "value": "part_to_contract",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "suf",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.tt_cores[0].shape[1])",
                            "Call"
                        ],
                        [
                            "pref[None, :, :].repeat(num_objects, 1, 1)",
                            "Call"
                        ],
                        [
                            "pref.to(x.device)",
                            "Call"
                        ],
                        [
                            "torch.bmm(pref, cond_core)",
                            "Call"
                        ],
                        [
                            "pref / cur_norm_const",
                            "BinOp"
                        ],
                        [
                            "pref / cur_prob_addition[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.eye(self.tt_cores[0].shape[1])[None, :, :]",
                            "Subscript"
                        ],
                        [
                            "pref.repeat(num_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "pref.to(self.tt_cores[0])",
                            "Call"
                        ],
                        [
                            "torch.bmm(pref, cond_core) + self.eps",
                            "BinOp"
                        ],
                        [
                            "pref / norm_const",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_253": {
                "variable": {
                    "value": "part_to_contract",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_260": {
                "variable": {
                    "value": "discr_comp_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "part_to_contract * core[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "weights.sum(dim=-1).sum(dim=-1) + self.eps",
                            "BinOp"
                        ],
                        [
                            "weights / torch.sum(weights, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "cur_core",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "var_descr[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tt_int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tt_int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "data": {
                    "value": "cur_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(var_descr[1], self.tt_int, self.tt_int)",
                            "Call"
                        ],
                        [
                            "cur_core / (self.tt_int ** 2 * var_descr[1])",
                            "BinOp"
                        ],
                        [
                            "torch.ones(var_descr[1], self.tt_int, self.tt_int)",
                            "Call"
                        ],
                        [
                            "torch.randn(var_descr[1], self.tt_int, self.tt_int)",
                            "Call"
                        ],
                        [
                            "cur_core / (self.tt_int ** 2 * var_descr[1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_159": {
                "input": {
                    "value": "norm_pref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.tt_cores[0].shape[1])",
                            "Call"
                        ],
                        [
                            "norm_pref.to(x.device)",
                            "Call"
                        ],
                        [
                            "norm_pref @ norm_core",
                            "BinOp"
                        ],
                        [
                            "norm_pref / cur_norm_const",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_164": {
                "input": {
                    "value": "cur_prob_addition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pref * eye).sum(dim=-1).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "cur_prob_addition / cur_div",
                            "BinOp"
                        ],
                        [
                            "pref.sum(dim=-1).sum(dim=-1) + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_257": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "part_to_contract * core[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "weights.sum(dim=-1).sum(dim=-1) + self.eps",
                            "BinOp"
                        ],
                        [
                            "weights / torch.sum(weights, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_286": {
                "input": {
                    "value": "pref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.tt_cores[0].shape[1])",
                            "Call"
                        ],
                        [
                            "pref[None, :, :].repeat(num_objects, 1, 1)",
                            "Call"
                        ],
                        [
                            "pref.to(x.device)",
                            "Call"
                        ],
                        [
                            "torch.bmm(pref, cond_core)",
                            "Call"
                        ],
                        [
                            "pref / cur_norm_const",
                            "BinOp"
                        ],
                        [
                            "pref / cur_prob_addition[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.eye(self.tt_cores[0].shape[1])[None, :, :]",
                            "Subscript"
                        ],
                        [
                            "pref.repeat(num_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "pref.to(self.tt_cores[0])",
                            "Call"
                        ],
                        [
                            "torch.bmm(pref, cond_core) + self.eps",
                            "BinOp"
                        ],
                        [
                            "pref / norm_const",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cond_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "core.sum(dim=0)[None, :, :]",
                            "Subscript"
                        ],
                        [
                            "cond_core.repeat(num_objects, 1, 1)",
                            "Call"
                        ],
                        [
                            "core[None, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "cond_core * cur_contr_vect[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cond_core.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "core[None, :, :, :] * contr_vect[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cond_core.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "core[None, :, :, :] * contr_vect[:, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "cond_core.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_313": {
                "data": {
                    "value": "cur_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(var_descr[1], self.tt_int, self.tt_int)",
                            "Call"
                        ],
                        [
                            "cur_core / (self.tt_int ** 2 * var_descr[1])",
                            "BinOp"
                        ],
                        [
                            "torch.ones(var_descr[1], self.tt_int, self.tt_int)",
                            "Call"
                        ],
                        [
                            "torch.randn(var_descr[1], self.tt_int, self.tt_int)",
                            "Call"
                        ],
                        [
                            "cur_core / (self.tt_int ** 2 * var_descr[1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_315": {
                "input": {
                    "value": "torch.isnan(data[:, i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_339": {
                "variable": {
                    "value": "cur_means",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.means_[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_341": {
                "variable": {
                    "value": "cur_log_stds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm.covariances_[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_356": {
                "input": {
                    "value": "self.tt_cores[r].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_357": {
                "input": {
                    "value": "self.tt_cores[r].data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_94": {
                "start": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_97": {
                "input": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_315": {
                "input": {
                    "value": "data[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_75": {
                "input": {
                    "value": "torch.ones(var_descr[1]) * (rb - lb) / var_descr[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "data": {
                    "value": "cur_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(var_descr[1]) * (rb - lb) + lb",
                            "BinOp"
                        ],
                        [
                            "torch.arange(var_descr[1]).float() / (var_descr[1] - 1) * (rb - lb) + lb",
                            "BinOp"
                        ],
                        [
                            "means[None, :]",
                            "Subscript"
                        ],
                        [
                            "self.means[i][discr_comp_sample]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gmm.means_[:, 0])",
                            "Call"
                        ],
                        [
                            "cur_means.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_80": {
                "data": {
                    "value": "cur_log_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * torch.log(torch.ones(var_descr[1]) * (rb - lb) / var_descr[1])",
                            "BinOp"
                        ],
                        [
                            "self.log_stds[i][discr_comp_sample]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gmm.covariances_[:, 0, 0])",
                            "Call"
                        ],
                        [
                            "torch.log(cur_log_stds.float() + self.eps) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_210": {
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "var[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_342": {
                "input": {
                    "value": "cur_log_stds.float() + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_344": {
                "data": {
                    "value": "cur_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(var_descr[1]) * (rb - lb) + lb",
                            "BinOp"
                        ],
                        [
                            "torch.arange(var_descr[1]).float() / (var_descr[1] - 1) * (rb - lb) + lb",
                            "BinOp"
                        ],
                        [
                            "means[None, :]",
                            "Subscript"
                        ],
                        [
                            "self.means[i][discr_comp_sample]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gmm.means_[:, 0])",
                            "Call"
                        ],
                        [
                            "cur_means.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_345": {
                "data": {
                    "value": "cur_log_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * torch.log(torch.ones(var_descr[1]) * (rb - lb) / var_descr[1])",
                            "BinOp"
                        ],
                        [
                            "self.log_stds[i][discr_comp_sample]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gmm.covariances_[:, 0, 0])",
                            "Call"
                        ],
                        [
                            "torch.log(cur_log_stds.float() + self.eps) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_70": {
                "*size": {
                    "value": "var_descr[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_270": {
                "input": {
                    "value": "cur_log_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * torch.log(torch.ones(var_descr[1]) * (rb - lb) / var_descr[1])",
                            "BinOp"
                        ],
                        [
                            "self.log_stds[i][discr_comp_sample]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gmm.covariances_[:, 0, 0])",
                            "Call"
                        ],
                        [
                            "torch.log(cur_log_stds.float() + self.eps) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_271": {
                "input": {
                    "value": "cur_log_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * torch.log(torch.ones(var_descr[1]) * (rb - lb) / var_descr[1])",
                            "BinOp"
                        ],
                        [
                            "self.log_stds[i][discr_comp_sample]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gmm.covariances_[:, 0, 0])",
                            "Call"
                        ],
                        [
                            "torch.log(cur_log_stds.float() + self.eps) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_76": {
                "*size": {
                    "value": "var_descr[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_72": {
                "start": {
                    "value": "var_descr[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "core/custom_datasets/celeba_dataset.py": {
        "torch": {
            "ones_101": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "core/generative_models/gans/wgan.py": {
        "torch": {
            "Adam_80": {
                "variable": {
                    "value": "gen_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "discr_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discr.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "lp_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.prior.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lp_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_37": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "lp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_58": {
                "variable": {
                    "value": "lp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_44": {
                "outputs": {
                    "value": "int_points_discr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discr(int_points)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "int_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas * sampled_images + (1 - alphas) * x",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(int_points_discr.size()).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "int_points_discr.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "core/generative_models/vaes/vae.py": {
        "torch": {
            "split_25": {
                "variable": {
                    "value": "(means, log_stds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "enc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "enc_output.shape[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "enc_dec_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nn.ParameterList(list(self.enc.parameters()) + list(self.dec.parameters()))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "lp_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lp.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lp_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ParameterList_53": {
                "parameters": {
                    "value": "list(self.enc.parameters()) + list(self.dec.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_28": {
                "input": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_29": {
                "input": {
                    "value": "0.5 * log_stds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_35": {
                "input": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "core/learnable_priors/gmm_lp.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_components, num_vars) * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "log_std * torch.ones(num_components, num_vars)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.log_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_components)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_27": {
                "variable": {
                    "value": "weight_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Multinomial_35": {
                "variable": {
                    "value": "comp_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.log_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_29": {
                "input": {
                    "value": "weight_log_prob.unsqueeze(0) + norm_comps_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "num_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_15": {
                "*size": {
                    "value": "num_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_13": {
                "*size": {
                    "value": "num_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_39": {
                "input": {
                    "value": "self.log_std / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_25": {
                "input": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "core/learnable_priors/normal_prior.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(num_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_15": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultivariateNormal_19": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_11": {
                "*size": {
                    "value": "num_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_12": {
                "n": {
                    "value": "num_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "core/learnable_priors/realnvp.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.s_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.num_vars, self.hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.t_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.num_vars, self.hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultivariateNormal_102": {
                "variable": {
                    "value": "norm_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(self.num_vars).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(self.num_vars).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_113": {
                "variable": {
                    "value": "norm_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(self.num_vars).to(self.s_net.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(self.num_vars).to(self.s_net.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "self.num_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "self.num_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_70": {
                "input": {
                    "value": "-s_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "self.num_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_103": {
                "n": {
                    "value": "self.num_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "self.num_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_114": {
                "n": {
                    "value": "self.num_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask[None, :]",
                            "Subscript"
                        ],
                        [
                            "self.mask[None, :]",
                            "Subscript"
                        ],
                        [
                            "masks",
                            "variable"
                        ]
                    ]
                }
            },
            "exp_52": {
                "input": {
                    "value": "s_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s_net(z_) * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.s_net(z_) * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "core/networks/gan_cnn_gendiscr.py": {
        "torch": {
            "LayerNorm_75": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, dim * 8 * 4 * 4, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.l2_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dconv_bn_relu(dim * 8, dim * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.ls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, dim, 5, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_8": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_dim, out_dim, 5, 2, padding=2, output_padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, dim * 4 * 4 * 4, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.l2_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dconv_bn_relu(dim * 4, dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "nn.Conv2d(in_dim, out_dim, 5, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.ls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, dim, 5, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_9": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 8 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_21": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_48": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 4 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_30": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "core/networks/vae_encdec.py": {
        "torch": {
            "LeakyReLU_68": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_69": {
                "variable": {
                    "value": "self.fin_activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_17": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_52": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_53": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_55": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_56": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_60": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_62": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_64": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_66": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 4 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/train_vaes.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=args.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CelebaDataset(data_dir=args.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_65": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=args.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CelebaDataset(data_dir=args.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_model_dir + model_name + '_latest.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_model_dir + model_name + '_{}.model'.format(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_163": {
                "variable": {
                    "value": "(means, log_stds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "enc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.enc(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "enc_output.shape[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "latvar_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(latvar_samples, cur_latvar_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_166": {
                "input": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_167": {
                "input": {
                    "value": "0.5 * log_stds",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_scripts/train_wgan.py": {
        "torch": {
            "manual_seed_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=args.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CelebaDataset(data_dir=args.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_70": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=args.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CelebaDataset(data_dir=args.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_model_dir + model_name + '_latest.model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}