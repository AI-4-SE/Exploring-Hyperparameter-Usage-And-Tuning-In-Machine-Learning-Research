{
    "skmultilearn/adapt/brknn.py": {
        "sklearn": {
            "NearestNeighbors_39": {
                "variable": {
                    "value": "self.knn_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/adapt/mlknn.py": {
        "sklearn": {
            "NearestNeighbors_165": {
                "variable": {
                    "value": "self.knn_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/base/base.py": {
        "sklearn": {}
    },
    "skmultilearn/base/tests/test_base.py": {
        "sklearn": {
            "GridSearchCV_26": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LabelSpacePartitioningClassifier()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'classifier': [LabelPowerset(), BinaryRelevance()], 'clusterer': [RandomLabelSpaceClusterer(None, None, False)], 'clusterer__cluster_size': list(range(2, 3)), 'clusterer__cluster_count': [3], 'clusterer__allow_overlap': [False], 'classifier__classifier': [MultinomialNB()], 'classifier__classifier__alpha': [0.7, 1.0]}",
                            "Dict"
                        ]
                    ]
                },
                "scoring": {
                    "value": "f1_macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultinomialNB_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/cluster/base.py": {
        "sklearn": {}
    },
    "skmultilearn/cluster/tests/test_matrix.py": {
        "sklearn": {
            "KMeans_10": {
                "n_clusters": {
                    "value": "cluster_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "skmultilearn/embedding/_mdsw.py": {
        "sklearn": {
            "check_symmetric_68": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_symmetric(similarities, raise_exception=True)",
                            "Call"
                        ],
                        [
                            "check_array(similarities)",
                            "Call"
                        ]
                    ]
                },
                "raise_exception": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_random_state_71": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "IsotonicRegression_104": {
                "variable": {
                    "value": "ir",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_array_256": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_symmetric(similarities, raise_exception=True)",
                            "Call"
                        ],
                        [
                            "check_array(similarities)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_random_state_257": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "euclidean_distances_107": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_state.rand(n_samples * n_components)",
                            "Call"
                        ],
                        [
                            "X.reshape((n_samples, n_components))",
                            "Call"
                        ],
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "np.dot(Vp, np.dot(_B, X))",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_array_422": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_state.rand(n_samples * n_components)",
                            "Call"
                        ],
                        [
                            "X.reshape((n_samples, n_components))",
                            "Call"
                        ],
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "np.dot(Vp, np.dot(_B, X))",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "euclidean_distances_432": {
                "variable": {
                    "value": "self.dissimilarity_matrix_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_state.rand(n_samples * n_components)",
                            "Call"
                        ],
                        [
                            "X.reshape((n_samples, n_components))",
                            "Call"
                        ],
                        [
                            "init",
                            "Name"
                        ],
                        [
                            "np.dot(Vp, np.dot(_B, X))",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "skmultilearn/embedding/clems.py": {
        "sklearn": {
            "NearestNeighbors_103": {
                "variable": {
                    "value": "self.knn_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NearestNeighbors_127": {
                "variable": {
                    "value": "knn_to_extend_embeddings_to_other_combinations",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/embedding/skembeddings.py": {
        "sklearn": {}
    },
    "skmultilearn/embedding/unit_tests/test_classifier.py": {
        "sklearn": {
            "LinearRegression_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SpectralEmbedding_47": {
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/ensemble/tests/test_partition.py": {
        "sklearn": {
            "SVC_36": {
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GaussianNB_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/ensemble/tests/test_rakeld.py": {
        "sklearn": {
            "SVC_16": {
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GaussianNB_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/ensemble/tests/test_rakelo.py": {
        "sklearn": {
            "SVC_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNB_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/ext/keras.py": {
        "sklearn": {}
    },
    "skmultilearn/model_selection/iterative_stratification.py": {
        "sklearn": {
            "check_random_state_338": {
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/problem_transform/cc.py": {
        "sklearn": {}
    },
    "skmultilearn/problem_transform/tests/test_br.py": {
        "sklearn": {
            "SVC_13": {
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SVC_20": {
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GaussianNB_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNB_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNB_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/problem_transform/tests/test_cc.py": {
        "sklearn": {
            "SVC_13": {
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SVC_20": {
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GaussianNB_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNB_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNB_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNB_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNB_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/problem_transform/tests/test_lp.py": {
        "sklearn": {
            "SVC_13": {
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SVC_20": {
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GaussianNB_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNB_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNB_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/tests/classifier_basetest.py": {
        "sklearn": {
            "train_test_split_19": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ShuffleSplit_29": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_val_score_31": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_selection.ShuffleSplit(n_splits=n_iterations, test_size=0.5, random_state=0)",
                            "Call"
                        ]
                    ]
                },
                "scoring": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "train_test_split_38": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "skmultilearn/tests/test_base.py": {
        "sklearn": {}
    },
    "skmultilearn/embedding/openne.py": {
        "tensorflow": {
            "reset_default_graph_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}