{
    "L2O-Scale/l2o-scale-regularize-train/problems/datasets.py": {
        "sklearn": {
            "make_classification_135": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "class_sep": {
                    "value": "sep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(MAX_SEED) if random_seed is None else random_seed",
                            "IfExp"
                        ],
                        [
                            "np.random.randint(MAX_SEED) if random_seed is None else random_seed",
                            "IfExp"
                        ],
                        [
                            "np.random.randint(MAX_SEED) if random_seed is None else random_seed",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {}
    },
    "L2O-Scale/learned_optimizer/problems/datasets.py": {
        "sklearn": {
            "make_classification_134": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "class_sep": {
                    "value": "sep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(MAX_SEED) if random_seed is None else random_seed",
                            "IfExp"
                        ],
                        [
                            "np.random.randint(MAX_SEED) if random_seed is None else random_seed",
                            "IfExp"
                        ],
                        [
                            "np.random.randint(MAX_SEED) if random_seed is None else random_seed",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {}
    },
    "L2O-DM & RNNProp/data_generator.py": {
        "tensorflow": {
            "variables_initializer_32": {
                "var_list": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[opt.get_slot(var, name) for name in opt.get_slot_names() for var in var_list if var is not None]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_46": {
                "variable": {
                    "value": "self.gradients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variables_initializer_49": {
                "variable": {
                    "value": "self.reset_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "x + constants",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "var_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "var_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_51": {
                "variable": {
                    "value": "self.adam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_55": {
                "variable": {
                    "value": "self.rmsprop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_59": {
                "variable": {
                    "value": "self.nag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_66": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(var, shape=(-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.squeeze(tf.reshape(var, shape=(-1, 1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/evaluate_dm.py": {
        "tensorflow": {
            "ConfigProto_76": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_60": {
                "variable": {
                    "value": "problem_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_61": {
                "variable": {
                    "value": "problem_reset",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "problem_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_64": {
                "variable": {
                    "value": "optimizer_reset",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer.get_slot_names()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_52": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MonitoredSession_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/evaluate_rnnprop.py": {
        "tensorflow": {
            "ConfigProto_79": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_63": {
                "variable": {
                    "value": "problem_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_64": {
                "variable": {
                    "value": "problem_reset",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "problem_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_67": {
                "variable": {
                    "value": "optimizer_reset",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer.get_slot_names()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_55": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MonitoredSession_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/meta.py": {
        "tensorflow": {
            "TensorArray_362": {
                "variable": {
                    "value": "fx_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "len_unroll + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_364": {
                "variable": {
                    "value": "(_, fx_array, x_final, s_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda t, *_: t < len_unroll",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "time_step",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(0, fx_array, x, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "unroll",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_376": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fx_array.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_412": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_57": {
                "ref": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "initial_value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['trainable']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_125": {
                "name": {
                    "value": "unused_graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "vars_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "vars_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_310": {
                "name": {
                    "value": "states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_322": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_with_custom_variables(make_loss, x)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_372": {
                "name": {
                    "value": "fx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_379": {
                "name": {
                    "value": "reset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_387": {
                "name": {
                    "value": "update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_321": {
                "name": {
                    "value": "gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_331": {
                "name": {
                    "value": "deltas",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_343": {
                "name": {
                    "value": "fx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_347": {
                "name": {
                    "value": "dx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_356": {
                "name": {
                    "value": "t_next",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variables_initializer_383": {
                "var_list": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "collections.deque(variables)",
                            "Call"
                        ],
                        [
                            "nest.flatten(state) + x + constants",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_388": {
                "structure": {
                    "value": "_nested_assign(x, x_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_389": {
                "structure": {
                    "value": "_nested_assign(state, s_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_313": {
                "name": {
                    "value": "'state_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_380": {
                "structure": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stop_gradient_329": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/meta_dm_train.py": {
        "tensorflow": {
            "TensorArray_404": {
                "variable": {
                    "value": "fx_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "len_unroll + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_406": {
                "variable": {
                    "value": "(_, fx_array, x_final, s_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda t, *_: t < len_unroll",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "time_step",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(0, fx_array, x, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "unroll",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_419": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fx_array.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_545": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_58": {
                "ref": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_78": {
                "initial_value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['trainable']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_126": {
                "name": {
                    "value": "unused_graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "while_loop_487": {
                "variable": {
                    "value": "(_, loss_array, state_reshape_final_mti)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda t, *_: t < len_unroll",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "time_step_mt(mti)",
                    "type": "Call",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(0, loss_array, state_reshape[mti])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "unroll_mt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "vars_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "vars_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_286": {
                "variable": {
                    "value": "self.restore_pl[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_{}_pl'.format(module_name, variable_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_287": {
                "variable": {
                    "value": "self.assigns[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "self.restore_pl[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_350": {
                "name": {
                    "value": "states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_362": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_with_custom_variables(make_loss, scaled_x)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_414": {
                "name": {
                    "value": "fx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorArray_482": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "len_unroll",
                    "type": "variable",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_498": {
                "input_tensor": {
                    "value": "loss_array.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'loss_mt{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_502": {
                "name": {
                    "value": "reset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_515": {
                "name": {
                    "value": "update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "append_301": {
                "arr": {
                    "value": "self.assigns[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_with_default_338": {
                "input": {
                    "value": "tf.ones(shape=k.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "k.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "k.name[:-2] + '_scale'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_361": {
                "name": {
                    "value": "gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_371": {
                "name": {
                    "value": "deltas",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_383": {
                "name": {
                    "value": "fx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_388": {
                "name": {
                    "value": "dx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_398": {
                "name": {
                    "value": "t_next",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_433": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[st_x[li][0] for st_x in state_subset]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_434": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[st_x[li][1] for st_x in state_subset]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_435": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([st_x[li][0] for st_x in state_subset], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Variable(h, name='state_reshape_h', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "state_reshape_h",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_436": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([st_x[li][1] for st_x in state_subset], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Variable(c, name='state_reshape_c', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "state_reshape_c",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_469": {
                "variable": {
                    "value": "g_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mt_inputs[mti][si]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_470": {
                "variable": {
                    "value": "g_label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mt_labels[mti][si]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variables_initializer_506": {
                "var_list": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "collections.deque(variables)",
                            "Call"
                        ],
                        [
                            "nest.flatten(state) + x + constants",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_509": {
                "structure": {
                    "value": "state_reshape[mti]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_516": {
                "structure": {
                    "value": "_nested_assign(x, x_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_517": {
                "structure": {
                    "value": "_nested_assign(state, s_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_518": {
                "structure": {
                    "value": "_nested_assign(state_reshape[mti], state_reshape_final[mti])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_552": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_338": {
                "shape": {
                    "value": "k.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_353": {
                "name": {
                    "value": "'state_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_452": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(len_unroll, shapes[j])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'mt{}_label_subset{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_457": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(len_unroll, shapes[j])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'mt{}_input_subset{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_503": {
                "structure": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variables_initializer_510": {
                "var_list": {
                    "value": "variables_mt[mti]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_369": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_472": {
                "input_tensor": {
                    "value": "(g_label - delta) * (g_label - delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/meta_rnnprop_eval.py": {
        "tensorflow": {
            "placeholder_341": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "step",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_426": {
                "variable": {
                    "value": "fx_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "len_unroll + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_428": {
                "variable": {
                    "value": "(_, fx_array, x_final, s_final, mt_final, vt_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda t, *_: t < len_unroll",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "time_step",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(0, fx_array, x, state, state_mt, state_vt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "unroll",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_441": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fx_array.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_482": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_59": {
                "ref": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "initial_value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['trainable']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_127": {
                "name": {
                    "value": "unused_graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "vars_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "vars_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_288": {
                "variable": {
                    "value": "self.restore_pl[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_{}_pl'.format(module_name, variable_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_289": {
                "variable": {
                    "value": "self.assigns[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "self.restore_pl[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_353": {
                "name": {
                    "value": "states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_374": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_with_custom_variables(make_loss, scaled_x)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_436": {
                "name": {
                    "value": "fx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_444": {
                "name": {
                    "value": "reset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_455": {
                "name": {
                    "value": "update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "append_303": {
                "arr": {
                    "value": "self.assigns[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_with_default_340": {
                "input": {
                    "value": "tf.ones(shape=k.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "k.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "k.name[:-2] + '_scale'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_366": {
                "initial_value": {
                    "value": "tf.zeros(shape=x[j].shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "x[j].name[:-2] + '_mt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_367": {
                "initial_value": {
                    "value": "tf.zeros(shape=x[j].shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "x[j].name[:-2] + '_vt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_373": {
                "name": {
                    "value": "gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_390": {
                "name": {
                    "value": "deltas",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_404": {
                "name": {
                    "value": "fx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_409": {
                "name": {
                    "value": "dx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_420": {
                "name": {
                    "value": "t_next",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_447": {
                "ref": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros(shape=m.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_448": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(shape=v.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_459": {
                "structure": {
                    "value": "_nested_assign(state_vt, vt_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_340": {
                "shape": {
                    "value": "k.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_356": {
                "name": {
                    "value": "'state_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "shape": {
                    "value": "x[j].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_367": {
                "shape": {
                    "value": "x[j].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_445": {
                "structure": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_447": {
                "shape": {
                    "value": "m.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_448": {
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_458": {
                "structure": {
                    "value": "_nested_assign(state_mt, mt_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_381": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variables_initializer_451": {
                "var_list": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "collections.deque(variables)",
                            "Call"
                        ],
                        [
                            "nest.flatten(state) + x + constants",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_456": {
                "structure": {
                    "value": "_nested_assign(x, x_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_457": {
                "structure": {
                    "value": "_nested_assign(state, s_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_384": {
                "x": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(step + t, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_386": {
                "x": {
                    "value": "self.beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(step + t, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_387": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                }
            },
            "sqrt_388": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                }
            },
            "cast_384": {
                "x": {
                    "value": "step + t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_386": {
                "x": {
                    "value": "step + t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/meta_rnnprop_train.py": {
        "tensorflow": {
            "placeholder_341": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "step",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_426": {
                "variable": {
                    "value": "fx_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "len_unroll + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_428": {
                "variable": {
                    "value": "(_, fx_array, x_final, s_final, mt_final, vt_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda t, *_: t < len_unroll",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "time_step",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(0, fx_array, x, state, state_mt, state_vt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "unroll",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_441": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fx_array.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_611": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_59": {
                "ref": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "initial_value": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['trainable']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_127": {
                "name": {
                    "value": "unused_graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "while_loop_541": {
                "variable": {
                    "value": "(_, loss_array, state_reshape_final_mti, state_mt_reshape_final_mti, state_vt_reshape_final_mti)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda t, *_: t < len_unroll",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "time_step_mt(mti)",
                    "type": "Call",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(0, loss_array, state_reshape[mti], state_mt_reshape[mti], state_vt_reshape[mti])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'unroll_mt_{}'.format(mti)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "vars_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "vars_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_288": {
                "variable": {
                    "value": "self.restore_pl[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_{}_pl'.format(module_name, variable_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_289": {
                "variable": {
                    "value": "self.assigns[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "self.restore_pl[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_352": {
                "name": {
                    "value": "states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_374": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_with_custom_variables(make_loss, scaled_x)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_436": {
                "name": {
                    "value": "fx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_478": {
                "variable": {
                    "value": "mt",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=(shapes[i],))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'state_mt_{}_{}'.format(mti, i)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_479": {
                "variable": {
                    "value": "vt",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=(shapes[i],))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'state_vt_{}_{}'.format(mti, i)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_534": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "len_unroll",
                    "type": "variable",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_554": {
                "input_tensor": {
                    "value": "loss_array.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'loss_mt{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_559": {
                "name": {
                    "value": "reset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_576": {
                "name": {
                    "value": "update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "append_303": {
                "arr": {
                    "value": "self.assigns[k][module_name][variable_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_with_default_340": {
                "input": {
                    "value": "tf.ones(shape=k.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "k.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "k.name[:-2] + '_scale'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_364": {
                "initial_value": {
                    "value": "tf.zeros(shape=x[j].shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "x[j].name[:-2] + '_mt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_366": {
                "initial_value": {
                    "value": "tf.zeros(shape=x[j].shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "x[j].name[:-2] + '_vt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_373": {
                "name": {
                    "value": "gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_390": {
                "name": {
                    "value": "deltas",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_404": {
                "name": {
                    "value": "fx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_409": {
                "name": {
                    "value": "dx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_420": {
                "name": {
                    "value": "t_next",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_455": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[st_x[li][0] for st_x in state_subset]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_456": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[st_x[li][1] for st_x in state_subset]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_457": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([st_x[li][0] for st_x in state_subset], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Variable(h, name='state_reshape_h', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "state_reshape_h",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_458": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([st_x[li][1] for st_x in state_subset], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Variable(c, name='state_reshape_c', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "state_reshape_c",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_509": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mt_inputs[mti][si]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_510": {
                "variable": {
                    "value": "g_label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mt_labels[mti][si]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_562": {
                "ref": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros(shape=m.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_563": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(shape=v.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_568": {
                "structure": {
                    "value": "state_reshape[mti]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_580": {
                "structure": {
                    "value": "_nested_assign(state_vt, vt_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_618": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_340": {
                "shape": {
                    "value": "k.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_355": {
                "name": {
                    "value": "'state_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_364": {
                "shape": {
                    "value": "x[j].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "shape": {
                    "value": "x[j].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_478": {
                "shape": {
                    "value": "(shapes[i],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_479": {
                "shape": {
                    "value": "(shapes[i],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_490": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(len_unroll, shapes[j])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'mt{}_label_subset{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_495": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(len_unroll, shapes[j])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'mt{}_input_subset{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_560": {
                "structure": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_562": {
                "shape": {
                    "value": "m.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_563": {
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_569": {
                "ref": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros(shape=m.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_570": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(shape=v.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_579": {
                "structure": {
                    "value": "_nested_assign(state_mt, mt_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_584": {
                "structure": {
                    "value": "_nested_assign(state_vt_reshape[mti], state_vt_reshape_final[mti])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_381": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(mt_inputs[mti][si], indices=t, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_522": {
                "input_tensor": {
                    "value": "(g_label - delta) * (g_label - delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variables_initializer_565": {
                "var_list": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "collections.deque(variables)",
                            "Call"
                        ],
                        [
                            "nest.flatten(state) + x + constants",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_569": {
                "shape": {
                    "value": "m.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_570": {
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_577": {
                "structure": {
                    "value": "_nested_assign(x, x_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_578": {
                "structure": {
                    "value": "_nested_assign(state, s_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_582": {
                "structure": {
                    "value": "_nested_assign(state_reshape[mti], state_reshape_final[mti])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_583": {
                "structure": {
                    "value": "_nested_assign(state_mt_reshape[mti], state_mt_reshape_final[mti])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_384": {
                "x": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(step + t, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_386": {
                "x": {
                    "value": "self.beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(step + t, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_387": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                }
            },
            "sqrt_388": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "vars",
                            "variable"
                        ]
                    ]
                }
            },
            "pow_514": {
                "x": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(step + t, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_516": {
                "x": {
                    "value": "self.beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(step + t, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_517": {
                "x": {
                    "value": "vt_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v / (1 - tf.pow(self.beta2, tf.cast(step + t, dtype=tf.float32))) for v in vt_next]",
                            "ListComp"
                        ],
                        [
                            "vt_next / (1 - tf.pow(self.beta2, tf.cast(step + t, dtype=tf.float32)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_518": {
                "x": {
                    "value": "vt_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v / (1 - tf.pow(self.beta2, tf.cast(step + t, dtype=tf.float32))) for v in vt_next]",
                            "ListComp"
                        ],
                        [
                            "vt_next / (1 - tf.pow(self.beta2, tf.cast(step + t, dtype=tf.float32)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variables_initializer_571": {
                "var_list": {
                    "value": "variables_mt[mti]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_384": {
                "x": {
                    "value": "step + t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_386": {
                "x": {
                    "value": "step + t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_514": {
                "x": {
                    "value": "step + t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_516": {
                "x": {
                    "value": "step + t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/networks.py": {
        "tensorflow": {
            "reshape_224": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(self._preprocess(inputs))",
                            "Call"
                        ],
                        [
                            "self._preprocess(tf.expand_dims(inputs, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(m, -1), tf.expand_dims(g, -1)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[inputs.get_shape().as_list()[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_289": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(m, -1), tf.expand_dims(g, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "reshaped_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(self._preprocess(inputs))",
                            "Call"
                        ],
                        [
                            "self._preprocess(tf.expand_dims(inputs, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(m, -1), tf.expand_dims(g, -1)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_324": {
                "variable": {
                    "value": "transposed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(self._preprocess(inputs))",
                            "Call"
                        ],
                        [
                            "self._preprocess(tf.expand_dims(inputs, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(m, -1), tf.expand_dims(g, -1)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 3, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_342": {
                "variable": {
                    "value": "transposed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_400": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, (-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_417": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_418": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_419": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "elu_219": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._preprocess(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(self._preprocess(inputs))",
                            "Call"
                        ],
                        [
                            "self._preprocess(tf.expand_dims(inputs, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(m, -1), tf.expand_dims(g, -1)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(self._preprocess(inputs))",
                            "Call"
                        ],
                        [
                            "self._preprocess(tf.expand_dims(inputs, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(m, -1), tf.expand_dims(g, -1)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_325": {
                "tensor": {
                    "value": "transposed_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, perm=[2, 3, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + self._kernel_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_93": {
                "value": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "self._template.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_295": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_345": {
                "tensor": {
                    "value": "transposed_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_379": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((), dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_409": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_413": {
                "tensor": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self._learning_rate * m_hat / (tf.sqrt(v_hat) + self._epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "g_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "self._template.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_221": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(self._preprocess(inputs))",
                            "Call"
                        ],
                        [
                            "self._preprocess(tf.expand_dims(inputs, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [inputs.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(m, -1), tf.expand_dims(g, -1)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_289": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, (-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_412": {
                "x": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_debias_adam_estimate(v_next, b2, t_next)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_230": {
                "x": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._linear(output)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "L2O-DM & RNNProp/preprocess.py": {
        "tensorflow": {
            "log_66": {
                "variable": {
                    "value": "log",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(gradients) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_36": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.maximum(output, self._min)",
                            "Call"
                        ],
                        [
                            "tf.minimum(output, self._max)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_38": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.maximum(output, self._min)",
                            "Call"
                        ],
                        [
                            "tf.minimum(output, self._max)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_70": {
                "values": {
                    "value": "[clamped_log, sign]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "ndims - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_66": {
                "x": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/problems.py": {
        "tensorflow": {
            "sparse_softmax_cross_entropy_with_logits_137": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(batch_images)",
                            "Call"
                        ],
                        [
                            "network(batch_images)",
                            "Call"
                        ],
                        [
                            "network(image_batch)",
                            "Call"
                        ],
                        [
                            "network(image_batch)",
                            "Call"
                        ],
                        [
                            "network(image_batch)",
                            "Call"
                        ],
                        [
                            "vgg._build_model(image_batch)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data.labels, dtype=tf.int64, name='MNIST_labels')",
                            "Call"
                        ],
                        [
                            "tf.constant(data.labels, dtype=tf.int64, name='MNIST_labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_159": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MNIST_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data.images, dtype=tf.float32, name='MNIST_images')",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data.images, dtype=tf.float32, name='MNIST_images')",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_161": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MNIST_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_186": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MNIST_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data.images, dtype=tf.float32, name='MNIST_images')",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data.images, dtype=tf.float32, name='MNIST_images')",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MNIST_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLengthRecordReader_280": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_282": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_284": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_285": {
                "variable": {
                    "value": "raw_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_286": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(raw_image, [depth, height, width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_288": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_289": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomShuffleQueue_291": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[image.get_shape(), label.get_shape()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLengthRecordReader_374": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_376": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_378": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_379": {
                "variable": {
                    "value": "raw_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_380": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(raw_image, [depth, height, width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_382": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_383": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomShuffleQueue_385": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[image.get_shape(), label.get_shape()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLengthRecordReader_453": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_455": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_457": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_458": {
                "variable": {
                    "value": "raw_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_459": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(raw_image, [depth, height, width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_461": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_462": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomShuffleQueue_464": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[image.get_shape(), label.get_shape()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLengthRecordReader_555": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_557": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_559": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_560": {
                "variable": {
                    "value": "raw_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_561": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(raw_image, [depth, height, width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_563": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_564": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.div(image, 255)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(raw_image, [depth, height, width]), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.math.divide(image, 255)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomShuffleQueue_566": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[image.get_shape(), label.get_shape()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_36": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_37": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(c, 0) for c in coordinates]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_dims, num_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_91": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(w, tf.expand_dims(x, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + loss_p",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=output, labels=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_171": {
                "variable": {
                    "value": "batch_images",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data.images, dtype=tf.float32, name='MNIST_images')",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data.images, dtype=tf.float32, name='MNIST_images')",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([batch_size], 0, data.num_examples, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batch_size], 0, data.num_examples, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_172": {
                "variable": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data.labels, dtype=tf.int64, name='MNIST_labels')",
                            "Call"
                        ],
                        [
                            "tf.constant(data.labels, dtype=tf.int64, name='MNIST_labels')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([batch_size], 0, data.num_examples, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batch_size], 0, data.num_examples, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_218": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc_shape2, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_222": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_230": {
                "variable": {
                    "value": "batch_images",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data.images, dtype=tf.float32, name='MNIST_images')",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(data.images, dtype=tf.float32, name='MNIST_images')",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([batch_size], 0, data.num_examples, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batch_size], 0, data.num_examples, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_231": {
                "variable": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data.labels, dtype=tf.int64, name='MNIST_labels')",
                            "Call"
                        ],
                        [
                            "tf.constant(data.labels, dtype=tf.int64, name='MNIST_labels')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([batch_size], 0, data.num_examples, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batch_size], 0, data.num_examples, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_queue_runner_296": {
                "qr": {
                    "value": "tf.train.QueueRunner(queue, enqueue_ops)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_325": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_327": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc_shape2, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_331": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_queue_runner_390": {
                "qr": {
                    "value": "tf.train.QueueRunner(queue, enqueue_ops)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_420": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_queue_runner_469": {
                "qr": {
                    "value": "tf.train.QueueRunner(queue, enqueue_ops)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_502": {
                "variable": {
                    "value": "node_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(node3, [batch_size, -1, 16])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_505": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc_shape2, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_509": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_517": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_queue_runner_571": {
                "qr": {
                    "value": "tf.train.QueueRunner(queue, enqueue_ops)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_576": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_852": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_859": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_dims, num_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_864": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_870": {
                "variable": {
                    "value": "wcos",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wcos",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_dims, num_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_876": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(w, tf.expand_dims(x, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_877": {
                "variable": {
                    "value": "product2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(wcos, tf.expand_dims(10 * tf.math.cos(2 * 3.1415926 * x), -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', shape=[], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(c, 0) for c in coordinates], 0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "x_squared",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "name": {
                    "value": "'x_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "tf.square(x, name='x_squared')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "input_tensor": {
                    "value": "tf.reduce_sum((product - y) ** 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_207": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights1', shape=[c_h, c_w, n_channels, output_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights1', shape=[c_h, c_w, n_channels, output_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights1', shape=[c_h, c_w, n_channels, output_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bias_add_208": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases1', [output_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases1', [output_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases1', [output_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_226": {
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(inputs, weights), bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "string_input_producer_281": {
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_284": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_286": {
                "tensor": {
                    "value": "raw_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[depth, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "QueueRunner_296": {
                "queue": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "enqueue_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "conv2d_316": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights1', shape=[c_h, c_w, n_channels, output_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights1', shape=[c_h, c_w, n_channels, output_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights1', shape=[c_h, c_w, n_channels, output_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bias_add_317": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases1', [output_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases1', [output_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases1', [output_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_336": {
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(inputs, weights), bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "string_input_producer_375": {
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_378": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_380": {
                "tensor": {
                    "value": "raw_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[depth, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "QueueRunner_390": {
                "queue": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "enqueue_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "max_pool_394": {
                "input": {
                    "value": "tf.sigmoid(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "string_input_producer_454": {
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_457": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_459": {
                "tensor": {
                    "value": "raw_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[depth, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "QueueRunner_469": {
                "queue": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "enqueue_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "conv2d_483": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights1', shape=[c_h, c_w, n_channels, output_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights1', shape=[c_h, c_w, n_channels, output_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights1', shape=[c_h, c_w, n_channels, output_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bias_add_484": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases1', [output_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases1', [output_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases1', [output_channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_487": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_513": {
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(node_final, weights), bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "string_input_producer_556": {
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'data_batch_{}.bin'.format(i)) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(path, CIFAR10_FOLDER, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_559": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ],
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(record, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_561": {
                "tensor": {
                    "value": "raw_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ],
                        [
                            "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[depth, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "QueueRunner_571": {
                "queue": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ],
                        [
                            "tf.RandomShuffleQueue(capacity=min_queue_examples + 3 * batch_size, min_after_dequeue=min_queue_examples, dtypes=[tf.float32, tf.int32], shapes=[image.get_shape(), label.get_shape()])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "enqueue_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ],
                        [
                            "[queue.enqueue([image, label]) for _ in xrange(num_threads)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "add_n_674": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[point_spread_function_3d([I_var[i], x_var[i], y_var[i], z_var[i], sigmaxy_var[i], sigmaz_var[i]]) for i in range(num_points)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_variable_678": {
                "variable": {
                    "value": "bg_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bg_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_684": {
                "variable": {
                    "value": "img_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, ROI[0] * ROI[1] * ROI[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_685": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.reduce_sum((y_pred + bg_var - tf.math.l2_normalize(img_placeholder, axis=1)) ** 2, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_822": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[point_spread_function_3d([I_var[i], x_var[i], y_var[i], z_var[i], sigmaxy_var[i], sigmaz_var[i]]) for i in range(num_points)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_826": {
                "variable": {
                    "value": "y_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[point_spread_function_3d([I_sim[i], x_sim[i], y_sim[i], z_sim[i], sigmaxy_sim[i], sigmaz_sim[i]]) for i in range(num_points)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_variable_830": {
                "variable": {
                    "value": "bg_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bg_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_836": {
                "variable": {
                    "value": "bg_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bg_sim",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_842": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.reduce_sum((y_pred + bg_var - tf.math.l2_normalize(y_sim + bg_sim, axis=1)) ** 2, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_880": {
                "input_tensor": {
                    "value": "product3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum((product - y) ** 2, 1) - tf.reduce_sum(product2, 1) + 10 * num_dims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_67": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', shape=[], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(c, 0) for c in coordinates], 0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "x_squared",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[batch_size, num_dims, num_dims], dtype=dtype, initializer=tf.random_uniform_initializer(), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', shape=[batch_size, num_dims, num_dims], dtype=dtype, initializer=tf.random_uniform_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(x, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "(product - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool_193": {
                "input": {
                    "value": "tf.nn.relu(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_200": {
                "variable": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c_h, c_w, n_channels, output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_206": {
                "variable": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_210": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_226": {
                "value": {
                    "value": "tf.matmul(inputs, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc_bias', shape=[10], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_bias', shape=[10], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_bias', shape=[10], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_301": {
                "input": {
                    "value": "tf.nn.relu(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_309": {
                "variable": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c_h, c_w, n_channels, output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_315": {
                "variable": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_319": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_336": {
                "value": {
                    "value": "tf.matmul(inputs, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc_bias', shape=[10], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_bias', shape=[10], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_bias', shape=[10], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_394": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', shape=[], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(c, 0) for c in coordinates], 0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_409": {
                "x": {
                    "value": "snt.BatchNorm()(x, is_training=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_476": {
                "variable": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c_h, c_w, n_channels, output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_482": {
                "variable": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_486": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_491": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', shape=[], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(c, 0) for c in coordinates], 0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_502": {
                "tensor": {
                    "value": "node3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node2 + node1_onto_node3 + node0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_513": {
                "value": {
                    "value": "tf.matmul(node_final, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc_bias', shape=[10], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_bias', shape=[10], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_bias', shape=[10], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_653": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "float(ROI[0] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "ROI[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_654": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "float(ROI[1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "ROI[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_655": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "float(ROI[2] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "ROI[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_656": {
                "variable": {
                    "value": "(X, Y, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, float(ROI[0] - 1), ROI[0])",
                            "Call"
                        ],
                        [
                            "tf.linspace(0.0, float(ROI[0] - 1), ROI[0])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, float(ROI[1] - 1), ROI[1])",
                            "Call"
                        ],
                        [
                            "tf.linspace(0.0, float(ROI[1] - 1), ROI[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_665": {
                "variable": {
                    "value": "xk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_666": {
                "variable": {
                    "value": "yk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_667": {
                "variable": {
                    "value": "zk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_801": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "float(ROI[0] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "ROI[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_802": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "float(ROI[1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "ROI[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_803": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "float(ROI[2] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "ROI[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_804": {
                "variable": {
                    "value": "(X, Y, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, float(ROI[0] - 1), ROI[0])",
                            "Call"
                        ],
                        [
                            "tf.linspace(0.0, float(ROI[0] - 1), ROI[0])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, float(ROI[1] - 1), ROI[1])",
                            "Call"
                        ],
                        [
                            "tf.linspace(0.0, float(ROI[1] - 1), ROI[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_813": {
                "variable": {
                    "value": "xk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_814": {
                "variable": {
                    "value": "yk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_815": {
                "variable": {
                    "value": "zk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_876": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[batch_size, num_dims, num_dims], dtype=dtype, initializer=tf.random_uniform_initializer(), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', shape=[batch_size, num_dims, num_dims], dtype=dtype, initializer=tf.random_uniform_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(x, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_877": {
                "a": {
                    "value": "wcos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wcos', shape=[batch_size, num_dims, num_dims], dtype=dtype, initializer=tf.random_uniform_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(10 * tf.math.cos(2 * 3.1415926 * x), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_83": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', shape=[], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(c, 0) for c in coordinates], 0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "'problem_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_193": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', shape=[], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(c, 0) for c in coordinates], 0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_normal_initializer_221": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_225": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_226": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc_weights', shape=[fc_shape2, 10], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_weights', shape=[fc_shape2, 10], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_weights', shape=[fc_shape2, 10], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_301": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', shape=[], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(c, 0) for c in coordinates], 0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_normal_initializer_330": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_334": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_336": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(inputs, 1, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 1, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 3, 3, 16, 'VALID', 'conv_layer1')",
                            "Call"
                        ],
                        [
                            "conv_layer(inputs, 2, 5, 5, 32, 'VALID', 'conv_layer2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "_conv_activation(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel1, [1, strides, strides, 1], padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(inputs, biases1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc_weights', shape=[fc_shape2, 10], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_weights', shape=[fc_shape2, 10], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_weights', shape=[fc_shape2, 10], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_475": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_normal_initializer_508": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_512": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_513": {
                "a": {
                    "value": "node_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reshape(node3, [batch_size, -1, 16]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('fc_weights', shape=[fc_shape2, 10], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_weights', shape=[fc_shape2, 10], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('fc_weights', shape=[fc_shape2, 10], dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_685": {
                "input_tensor": {
                    "value": "(y_pred + bg_var - tf.math.l2_normalize(img_placeholder, axis=1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_842": {
                "input_tensor": {
                    "value": "(y_pred + bg_var - tf.math.l2_normalize(y_sim + bg_sim, axis=1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_856": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_862": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_867": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_873": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_876": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', shape=[], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(c, 0) for c in coordinates], 0)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('x', shape=[batch_size, num_dims], dtype=dtype, initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_877": {
                "input": {
                    "value": "10 * tf.math.cos(2 * 3.1415926 * x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_878": {
                "input_tensor": {
                    "value": "product2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.matmul(wcos, tf.expand_dims(10 * tf.math.cos(2 * 3.1415926 * x), -1)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_602": {
                "name": {
                    "value": "'I_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_608": {
                "name": {
                    "value": "'x_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_614": {
                "name": {
                    "value": "'y_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_620": {
                "name": {
                    "value": "'z_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_626": {
                "name": {
                    "value": "'sigmaxy_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_632": {
                "name": {
                    "value": "'sigmaz_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_658": {
                "tensor": {
                    "value": "theta[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[0].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_659": {
                "tensor": {
                    "value": "theta[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[1].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_660": {
                "tensor": {
                    "value": "theta[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[2].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_661": {
                "tensor": {
                    "value": "theta[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[3].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_662": {
                "tensor": {
                    "value": "theta[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[4].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_663": {
                "tensor": {
                    "value": "theta[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[5].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_682": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_699": {
                "name": {
                    "value": "'I_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_705": {
                "name": {
                    "value": "'x_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_711": {
                "name": {
                    "value": "'y_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_717": {
                "name": {
                    "value": "'z_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_723": {
                "name": {
                    "value": "'sigmaxy_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_729": {
                "name": {
                    "value": "'sigmaz_var_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_744": {
                "name": {
                    "value": "'I_sim_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_751": {
                "name": {
                    "value": "'x_sim_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_758": {
                "name": {
                    "value": "'y_sim%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_765": {
                "name": {
                    "value": "'z_sim_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_772": {
                "name": {
                    "value": "'sigmaxy_sim_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_779": {
                "name": {
                    "value": "'sigmaz_sim_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_806": {
                "tensor": {
                    "value": "theta[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[0].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_807": {
                "tensor": {
                    "value": "theta[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[1].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_808": {
                "tensor": {
                    "value": "theta[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[2].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_809": {
                "tensor": {
                    "value": "theta[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[3].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_810": {
                "tensor": {
                    "value": "theta[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[4].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_811": {
                "tensor": {
                    "value": "theta[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[theta[5].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_834": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_840": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_203": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_206": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_312": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_315": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_479": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_482": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cos_877": {
                "x": {
                    "value": "2 * 3.1415926 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_606": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_612": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_618": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_624": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_630": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_normalize_685": {
                "x": {
                    "value": "img_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, shape=(batch_size, ROI[0] * ROI[1] * ROI[2]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_703": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_709": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_715": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_721": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_727": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_733": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_748": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_755": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_762": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_769": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_776": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_783": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_normalize_842": {
                "x": {
                    "value": "y_sim + bg_sim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "erf_671": {
                "x": {
                    "value": "(-0.5 - z0 + zk) / (tf.math.sqrt(2.0) * sigmaz)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_819": {
                "x": {
                    "value": "(-0.5 - z0 + zk) / (tf.math.sqrt(2.0) * sigmaz)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_669": {
                "x": {
                    "value": "(-0.5 - x0 + xk) / (tf.math.sqrt(2.0) * sigmaxy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_670": {
                "x": {
                    "value": "(-0.5 - y0 + yk) / (tf.math.sqrt(2.0) * sigmaxy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_817": {
                "x": {
                    "value": "(-0.5 - x0 + xk) / (tf.math.sqrt(2.0) * sigmaxy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_818": {
                "x": {
                    "value": "(-0.5 - y0 + yk) / (tf.math.sqrt(2.0) * sigmaxy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_671": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_819": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_669": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_670": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_817": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_818": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/train_dm.py": {
        "tensorflow": {
            "ConfigProto_104": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_102": {
                "ref": {
                    "value": "var_x[k_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "p_val_x[k_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MonitoredSession_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "k.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/train_rnnprop.py": {
        "tensorflow": {
            "ConfigProto_107": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_105": {
                "ref": {
                    "value": "var_x[k_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "p_val_x[k_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MonitoredSession_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "k.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-DM & RNNProp/vgg16.py": {
        "tensorflow": {
            "conv2d_12": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[filter_height, filter_width, input_channels, num_filters], initializer=tf.random_normal_initializer(mean=0, stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[input_size, output_size], initializer=tf.random_normal_initializer(mean=0, stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_14": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', shape=[num_filters], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', shape=[output_size], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_26": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', shape=[num_filters], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', shape=[output_size], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_7": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_height, filter_width, input_channels, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_9": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_16": {
                "features": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(x, W), b, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_21": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, filter_height, filter_width, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "block5_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool(block5_conv3, name='block5_pool')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1 * 1 * 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[filter_height, filter_width, input_channels, num_filters], initializer=tf.random_normal_initializer(mean=0, stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[input_size, output_size], initializer=tf.random_normal_initializer(mean=0, stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_30": {
                "features": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(x, W), b, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "logits": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(x, W), b, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_8": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_10": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_22": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/metaopt.py": {
        "tensorflow": {
            "DEFINE_integer_35": {
                "name": {
                    "value": "mini_batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "mini batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "ps_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of tasks in the ps job.\\n                            If 0 no ps job is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_42": {
                "name": {
                    "value": "nan_l2_reg",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Strength of l2-reg when NaNs are encountered.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_44": {
                "name": {
                    "value": "l2_reg",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Lambda value for parameter regularization.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_47": {
                "name": {
                    "value": "rms_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay value for the RMSProp metaoptimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_50": {
                "name": {
                    "value": "rms_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon value for the RMSProp metaoptimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_63": {
                "name": {
                    "value": "regularize_time",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "posterior",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "When to add the regularization to the optimizer training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_65": {
                "name": {
                    "value": "reg_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The regularize scale for meta regularization.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_70": {
                "name": {
                    "value": "mt_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_71": {
                "name": {
                    "value": "mt_k",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_842": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_971": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_972": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_202": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "replica_device_setter_203": {
                "variable": {
                    "value": "real_device_setter",
                    "type": "variable",
                    "possible_values": []
                },
                "ps_tasks": {
                    "value": "FLAGS.ps_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_834": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_835": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_847": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_848": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_859": {
                "variable": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "get_collection_985": {
                "variable": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "Variable_247": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_248": {
                "variable": {
                    "value": "meta_parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_255": {
                "variable": {
                    "value": "meta_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "decay": {
                    "value": "FLAGS.rms_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.rms_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_296": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "OPT_SUM_COLLECTION",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL_summaries'",
                            "str"
                        ]
                    ]
                }
            },
            "group_306": {
                "variable": {
                    "value": "propagate_loop_state_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*propagate_loop_state_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Supervisor_315": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.get_default_graph() if graph is None else graph",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "is_chief": {
                    "value": "is_chief",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "summary_op": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "saver": {
                    "value": "tf.train.Saver(max_to_keep=10000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_324": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_823": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_844": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.get_default_graph() if graph is None else graph",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_866": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_867": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_978": {
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_992": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_993": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_238": {
                "name": {
                    "value": "MetaObjective",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_output.metaobj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_242": {
                "name": {
                    "value": "problem_spec.callable.__name__ + '_MetaObjective'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "train_output.metaobj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_310": {
                "variable": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "Saver_312": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_846": {
                "var_list": {
                    "value": "vars_to_preinitialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "variable"
                        ],
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            },
            "variables_initializer_872": {
                "var_list": {
                    "value": "vars_to_initialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(set(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)) - set(vars_to_restore) - set(vars_to_preinitialize))",
                            "Call"
                        ],
                        [
                            "list(set(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)) - set(vars_to_restore) - set(vars_to_preinitialize))",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_980": {
                "var_list": {
                    "value": "vars_to_preinitialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "variable"
                        ],
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            },
            "variables_initializer_998": {
                "var_list": {
                    "value": "vars_to_initialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(set(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)) - set(vars_to_restore) - set(vars_to_preinitialize))",
                            "Call"
                        ],
                        [
                            "list(set(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)) - set(vars_to_restore) - set(vars_to_preinitialize))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_235": {
                "name": {
                    "value": "'State/{}'.format(key)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "finite_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.make_finite(val, replacement=tf.zeros_like(val))",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_267": {
                "variable": {
                    "value": "clipped_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "utils.make_finite(grad, replacement=tf.zeros_like(var))",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-gradient_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "gradient_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_graph_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_340": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunOptions_372": {
                "variable": {
                    "value": "full_trace_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_870": {
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_978": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_996": {
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_274": {
                "name": {
                    "value": "var.name + '_rawgrad'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "utils.make_finite(grad, replacement=tf.zeros_like(grad))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_280": {
                "name": {
                    "value": "var.name + '_var'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_282": {
                "name": {
                    "value": "var.name + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_322": {
                "max_to_keep": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_234": {
                "input": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "input_tensor": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RunOptions_373": {
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_partition_graphs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RunMetadata_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_862": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_988": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_268": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_277": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/metarun.py": {
        "tensorflow": {
            "DEFINE_string_34": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "opt/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to store parameters and results.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "worker_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of tasks in the worker job.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "num_problems",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of sub-problems to run.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "num_meta_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of meta-iterations to optimize.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "num_unroll_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale parameter of the exponential\\n                            distribution from which the number of partial\\n                            unrolls is drawn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "min_num_unrolls",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum number of unrolls per problem.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "num_partial_unroll_itr_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale parameter of the exponential\\n                               distribution from which the number of iterations\\n                               per unroll is drawn.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "min_num_itr_partial_unroll",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum number of iterations for one\\n                               unroll.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_61": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "HierarchicalRNN",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Which meta-optimizer to train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "cell_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of the RNN hidden state in each layer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "num_cells",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of RNN layers.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "cell_cls",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "GRUCell",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Type of RNN cell to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_73": {
                "name": {
                    "value": "meta_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate for the meta-optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_75": {
                "name": {
                    "value": "gradient_clip_level",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The level to clip gradients to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_151": {
                "name": {
                    "value": "min_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_153": {
                "name": {
                    "value": "max_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_191": {
                "name": {
                    "value": "num_gradient_scales",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many different timescales to keep for\\n                               gradient history. If > 1, also learns a scale\\n                               factor for gradient history.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_195": {
                "name": {
                    "value": "max_log_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum log learning rate allowed.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_197": {
                "name": {
                    "value": "objective_training_max_multiplier",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "How much the objective can grow before training on\\n                             this problem / param pair is terminated. Sets a max\\n                             on the objective value when multiplied by the\\n                             initial objective. If <= 0, not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_227": {
                "name": {
                    "value": "fix_unroll_length",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_228": {
                "name": {
                    "value": "fix_num_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_229": {
                "name": {
                    "value": "fix_num_steps_eval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_230": {
                "name": {
                    "value": "evaluation_period",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_231": {
                "name": {
                    "value": "evaluation_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_232": {
                "name": {
                    "value": "save_period",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_392": {
                "dirname": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.train_dir, '{}_{}_{}_{}'.format(FLAGS.optimizer, FLAGS.cell_cls, FLAGS.cell_size, FLAGS.num_cells))",
                            "Call"
                        ]
                    ]
                }
            },
            "run_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/metatest.py": {
        "tensorflow": {
            "DEFINE_string_35": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "opt/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to store parameters and results.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "test_optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "L2o",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "optimizer to test.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "worker_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of tasks in the worker job.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "num_testing_itrs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number testing iterations.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "num_problems",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of sub-problems to run.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "num_meta_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of meta-iterations to optimize.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "num_unroll_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale parameter of the exponential\\n                            distribution from which the number of partial\\n                            unrolls is drawn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "min_num_unrolls",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum number of unrolls per problem.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "num_partial_unroll_itr_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale parameter of the exponential\\n                               distribution from which the number of iterations\\n                               per unroll is drawn.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "min_num_itr_partial_unroll",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum number of iterations for one\\n                               unroll.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "HierarchicalRNN",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Which meta-optimizer to train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_69": {
                "name": {
                    "value": "cell_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of the RNN hidden state in each layer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_71": {
                "name": {
                    "value": "num_cells",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of RNN layers.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_73": {
                "name": {
                    "value": "cell_cls",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "GRUCell",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Type of RNN cell to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_77": {
                "name": {
                    "value": "meta_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate for the meta-optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_79": {
                "name": {
                    "value": "gradient_clip_level",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The level to clip gradients to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_153": {
                "name": {
                    "value": "min_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_155": {
                "name": {
                    "value": "max_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_193": {
                "name": {
                    "value": "num_gradient_scales",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many different timescales to keep for\\n                               gradient history. If > 1, also learns a scale\\n                               factor for gradient history.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_197": {
                "name": {
                    "value": "max_log_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum log learning rate allowed.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_199": {
                "name": {
                    "value": "objective_training_max_multiplier",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "How much the objective can grow before training on\\n                             this problem / param pair is terminated. Sets a max\\n                             on the objective value when multiplied by the\\n                             initial objective. If <= 0, not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_382": {
                "dirname": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.train_dir, '{}_{}_{}_{}'.format(FLAGS.optimizer, FLAGS.cell_cls, FLAGS.cell_size, FLAGS.num_cells))",
                            "Call"
                        ],
                        [
                            "logdir",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "run_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_404": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/mnist/__init__.py": {
        "tensorflow": {}
    },
    "L2O-Scale/l2o-scale-regularize-train/mnist/fully_connected_feed.py": {
        "tensorflow": {
            "placeholder_53": {
                "variable": {
                    "value": "images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, mnist.IMAGE_PIXELS)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "merge_all_143": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_146": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_149": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_152": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_155": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exists_219": {
                "path": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "makedirs_221": {
                "path": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_279": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rmtree_220": {
                "path": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/mnist/input_data.py": {
        "tensorflow": {
            "get_seed_149": {
                "variable": {
                    "value": "(seed1, seed2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "op_seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_253": {
                "filename": {
                    "value": "work_directory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MakeDirs_254": {
                "dirname": {
                    "value": "work_directory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Exists_256": {
                "filename": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(work_directory, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_dtype_152": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.as_dtype(dtype).base_dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GFile_258": {
                "name": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(work_directory, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/mnist/mnist.py": {
        "tensorflow": {
            "cast_96": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "in_top_k_146": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, weights) + biases",
                            "BinOp"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([IMAGE_PIXELS, hidden1_units], stddev=1.0 / math.sqrt(float(IMAGE_PIXELS)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([hidden1_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(images, weights) + biases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([hidden1_units, hidden2_units], stddev=1.0 / math.sqrt(float(hidden1_units)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([hidden2_units])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(hidden1, weights) + biases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([hidden2_units, NUM_CLASSES], stddev=1.0 / math.sqrt(float(hidden2_units)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([NUM_CLASSES])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_97": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, weights) + biases",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_119": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_148": {
                "input_tensor": {
                    "value": "tf.cast(correct, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_57": {
                "name": {
                    "value": "hidden1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "hidden2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "softmax_linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_59": {
                "shape": {
                    "value": "[IMAGE_PIXELS, hidden1_units]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(float(IMAGE_PIXELS))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[hidden1_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_68": {
                "shape": {
                    "value": "[hidden1_units, hidden2_units]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(float(hidden1_units))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "shape": {
                    "value": "[hidden2_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_77": {
                "shape": {
                    "value": "[hidden2_units, NUM_CLASSES]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(float(hidden2_units))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "shape": {
                    "value": "[NUM_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "a": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(hidden1, weights) + biases)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random.truncated_normal([IMAGE_PIXELS, hidden1_units], stddev=1.0 / math.sqrt(float(IMAGE_PIXELS))), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random.truncated_normal([hidden1_units, hidden2_units], stddev=1.0 / math.sqrt(float(hidden1_units))), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random.truncated_normal([hidden2_units, NUM_CLASSES], stddev=1.0 / math.sqrt(float(hidden2_units))), name='weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_148": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.in_top_k(predictions=logits, targets=labels, k=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random.truncated_normal([IMAGE_PIXELS, hidden1_units], stddev=1.0 / math.sqrt(float(IMAGE_PIXELS))), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random.truncated_normal([hidden1_units, hidden2_units], stddev=1.0 / math.sqrt(float(hidden1_units))), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random.truncated_normal([hidden2_units, NUM_CLASSES], stddev=1.0 / math.sqrt(float(hidden2_units))), name='weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_73": {
                "a": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(images, weights) + biases)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random.truncated_normal([IMAGE_PIXELS, hidden1_units], stddev=1.0 / math.sqrt(float(IMAGE_PIXELS))), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random.truncated_normal([hidden1_units, hidden2_units], stddev=1.0 / math.sqrt(float(hidden1_units))), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random.truncated_normal([hidden2_units, NUM_CLASSES], stddev=1.0 / math.sqrt(float(hidden2_units))), name='weights')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/mnist/mnist_softmax_xla.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([784, 10])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([10])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_56": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, w) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_57": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConfigProto_59": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunMetadata_66": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_67": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_89": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_68": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_107": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "shape": {
                    "value": "[784, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 784])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([784, 10]))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_89": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, w) + b",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_90": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y, 1), y_)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunOptions_80": {
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/mnist/mnist_with_summaries.py": {
        "tensorflow": {
            "InteractiveSession_43": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_141": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_142": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.log_dir + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_144": {
                "variable": {
                    "value": "test_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.log_dir + '/test'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y-input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "image_shaped_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(tf.float32, [None, 784], name='x-input')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_58": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_63": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "dropped",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_layer(x, 784, 500, 'layer1')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_125": {
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.losses.sparse_softmax_cross_entropy(labels=y_, logits=y)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_128": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_137": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(input_tensor=tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exists_186": {
                "path": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "makedirs_188": {
                "path": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_217": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_51": {
                "name": {
                    "value": "input_reshape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_53": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_shaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_64": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_69": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_105": {
                "name": {
                    "value": "dropout_keep_probability",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_111": {
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_123": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(tf.int64, [None], name='y-input')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_layer(dropped, 500, 10, 'layer2', act=tf.identity)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_127": {
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_131": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_133": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(input=y, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(tf.int64, [None], name='y-input')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_135": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rmtree_187": {
                "path": {
                    "value": "FLAGS.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_68": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_70": {
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(input_tensor=var)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_72": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(input_tensor=tf.square(var - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_73": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(input_tensor=tf.square(var - mean)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_74": {
                "name": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(input_tensor=var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_75": {
                "name": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(input_tensor=var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_76": {
                "name": {
                    "value": "histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_98": {
                "name": {
                    "value": "activations",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "act(preactivate, name='activation')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_122": {
                "name": {
                    "value": "total",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_132": {
                "name": {
                    "value": "correct_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_134": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunOptions_168": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.compat.v1.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_170": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_71": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_74": {
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_75": {
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_91": {
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_94": {
                "name": {
                    "value": "Wx_plus_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_96": {
                "name": {
                    "value": "pre_activations",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "preactivate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, weights) + biases",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_133": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_layer(dropped, 500, 10, 'layer2', act=tf.identity)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "input_tensor": {
                    "value": "tf.square(var - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([input_dim, output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_135": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(input=y, axis=1), y_)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_72": {
                "x": {
                    "value": "var - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/mt_utils.py": {
        "tensorflow": {
            "variables_initializer_13": {
                "var_list": {
                    "value": "vars + var_list",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_18": {
                "variable": {
                    "value": "self.graph_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.data_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.labels_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.lr_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_33": {
                "variable": {
                    "value": "self.grads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_47": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'local_var_{}'.format(ti)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_36": {
                "variable": {
                    "value": "self.opt_adam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_40": {
                "variable": {
                    "value": "self.opt_rmsprop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_44": {
                "variable": {
                    "value": "self.opt_nag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_60": {
                "control_inputs": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/optimizer/coordinatewise_rnn.py": {
        "tensorflow": {
            "DEFINE_float_32": {
                "name": {
                    "value": "crnn_rnn_readout_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The initialization scale for the RNN readouts.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_34": {
                "name": {
                    "value": "crnn_default_decay_var_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The default initializer value for any decay/\\n                             momentum style variables and constants.\\n                             sigmoid(2.2) ~ 0.9, sigmoid(-2.2) ~ 0.01.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_165": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var.get_shape().num_elements(), 1]",
                            "List"
                        ]
                    ]
                }
            },
            "MultiRNNCell_83": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "self.component_cells",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_87": {
                "variable": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.crnn_rnn_readout_scale / math.sqrt(cell_sizes[-1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "update_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cell_sizes[-1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_100": {
                "variable": {
                    "value": "self._init_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_vector",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, state_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_119": {
                "variable": {
                    "value": "self.decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decay_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "self.decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decay_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(FLAGS.crnn_default_decay_var_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "variable": {
                    "value": "self.decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_128": {
                "variable": {
                    "value": "self.decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "FLAGS.crnn_default_decay_var_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_140": {
                "variable": {
                    "value": "zero_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "self.lr_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "wt_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zero_init if self.zero_init_lr_weights else scaled_init",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "self.lr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "zero_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_148": {
                "variable": {
                    "value": "self.lr_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "self.lr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_158": {
                "variable": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "min_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_lr_range[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var.get_shape().num_elements(), 1]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_163": {
                "variable": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "actual_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(vectorized_shape, np.log(min_lr), np.log(max_lr))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_195": {
                "variable": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_learning_rate * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(grad_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_298": {
                "variable": {
                    "value": "cur_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rnn_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._pack_tuples_into_rnn_state(rnn_state_tuples)",
                            "Call"
                        ],
                        [
                            "utils.update_slices(rnn_state, grad_indices, state['rnn'], param_shape)",
                            "Call"
                        ],
                        [
                            "utils.slice_tensor(state['rnn'], grad_indices, param_shape)",
                            "Call"
                        ],
                        [
                            "state['rnn']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([new_c, new_h], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([rnn_state, tf.concat([new_c, new_h], 1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, cur_state_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, total_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_300": {
                "variable": {
                    "value": "cur_state_tuple",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cur_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(rnn_state, [0, cur_state_pos], [-1, total_state_size])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_169": {
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var.get_shape().num_elements(), 1]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_172": {
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var.get_shape().num_elements(), 1]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_312": {
                "variable": {
                    "value": "rnn_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_314": {
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_226": {
                "input": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_102": {
                "minval": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_124": {
                "value": {
                    "value": "FLAGS.crnn_default_decay_var_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/optimizer/global_learning_rate.py": {
        "tensorflow": {
            "constant_initializer_33": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(initial_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "trainable_optimizer.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_39": {
                "scalar": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/optimizer/hierarchical_rnn.py": {
        "tensorflow": {
            "DEFINE_float_33": {
                "name": {
                    "value": "biasgrucell_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale for the internal BiasGRUCell vars.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "biasgrucell_gate_bias_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The bias for the internal BiasGRUCell reset and\\n                             update gate variables.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_40": {
                "name": {
                    "value": "hrnn_rnn_readout_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The initialization scale for the RNN readouts.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_42": {
                "name": {
                    "value": "hrnn_default_decay_var_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The default initializer value for any decay/\\n                             momentum style variables and constants.\\n                             sigmoid(2.2) ~ 0.9, sigmoid(-2.2) ~ 0.01.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_47": {
                "name": {
                    "value": "scale_decay_bias_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The initialization for the scale decay bias. This\\n                             is the initial bias for the timescale for the\\n                             exponential avg of the mean square gradients.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_51": {
                "name": {
                    "value": "learning_rate_momentum_logit_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initialization for the learning rate momentum.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_54": {
                "name": {
                    "value": "hrnn_affine_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The initialization scale for the weight matrix of\\n                             the bias variables in layer0 and 1 of the hrnn.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "variable": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_657": {
                "variable": {
                    "value": "update_step",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lr_param * update_delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "state['true_param'].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_185": {
                "variable": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.hrnn_rnn_readout_scale / math.sqrt(cell_size)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "variable": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "update_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cell_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor, seed=self.random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_251": {
                "variable": {
                    "value": "self.scl_decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scl_decay_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor, seed=self.random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_254": {
                "variable": {
                    "value": "scl_decay_bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "FLAGS.scale_decay_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_256": {
                "variable": {
                    "value": "self.scl_decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scl_decay_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scl_decay_bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(FLAGS.scale_decay_bias_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_260": {
                "variable": {
                    "value": "self.scl_decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_261": {
                "variable": {
                    "value": "self.scl_decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.93 / (1.0 - 0.93)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_272": {
                "variable": {
                    "value": "self.inp_decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "inp_decay_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor, seed=self.random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_275": {
                "variable": {
                    "value": "inp_decay_bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "FLAGS.hrnn_default_decay_var_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_277": {
                "variable": {
                    "value": "self.inp_decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "inp_decay_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "inp_decay_bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(FLAGS.hrnn_default_decay_var_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_281": {
                "variable": {
                    "value": "self.inp_decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_282": {
                "variable": {
                    "value": "self.inp_decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.89 / (1.0 - 0.89)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_292": {
                "variable": {
                    "value": "zero_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_294": {
                "variable": {
                    "value": "self.lr_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "wt_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zero_init if self.zero_init_lr_weights else scaled_init",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_297": {
                "variable": {
                    "value": "self.lr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "zero_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "self.lr_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "self.lr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_337": {
                "variable": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "log_init_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(min_lr * tf.ones_like(var_vectorized))",
                            "Call"
                        ],
                        [
                            "actual_vals + offset",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-33",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.max_log_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_341": {
                "variable": {
                    "value": "state[grad_accum{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_342": {
                "variable": {
                    "value": "state[ms{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_511": {
                "variable": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_means_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.log(ms + 1e-16) for ms in mean_squared_gradients]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_523": {
                "variable": {
                    "value": "log_lr_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "state['log_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_539": {
                "variable": {
                    "value": "log_lr_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "state['log_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_617": {
                "variable": {
                    "value": "grads_scaled_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g for g in grads_scaled]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_624": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(update_delta ** 2) + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_688": {
                "variable": {
                    "value": "lr_momentum_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_momentum_logit",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "FLAGS.learning_rate_momentum_logit_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_691": {
                "variable": {
                    "value": "lrm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_momentum_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('learning_rate_momentum_logit', initializer=FLAGS.learning_rate_momentum_logit_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_694": {
                "variable": {
                    "value": "param_stepsize_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_stepsize_offset",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_696": {
                "variable": {
                    "value": "lr_param",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step_log_lr + param_stepsize_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_196": {
                "variable": {
                    "value": "self.attention_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.update_weights.initialized_value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_311": {
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_312": {
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_324": {
                "variable": {
                    "value": "log_init_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_lr * tf.ones_like(var_vectorized)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_349": {
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_561": {
                "name_or_scope": {
                    "value": "Layer0_RNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_684": {
                "input": {
                    "value": "tf.clip_by_value(step_log_lr, -33, self.max_log_lr) - step_log_lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_725": {
                "variable": {
                    "value": "global_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat(layer_states, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_750": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Level{}_RNN'.format(level)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_310": {
                "shape": {
                    "value": "[ndim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_318": {
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_370": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad_unflat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_382": {
                "variable": {
                    "value": "rnn_input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[g for g in grads_scaled]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_439": {
                "input_tensor": {
                    "value": "state['log_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_470": {
                "x": {
                    "value": "input_decays[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_508": {
                "x": {
                    "value": "ms + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_584": {
                "name_or_scope": {
                    "value": "Layer1_RNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_587": {
                "variable": {
                    "value": "layer_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_param_state",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_589": {
                "variable": {
                    "value": "layer_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat((new_param_state, rnn_input_tensor), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_639": {
                "x": {
                    "value": "tf.reduce_mean(attention_delta ** 2) + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_697": {
                "x": {
                    "value": "step_log_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['log_learning_rate'] + lr_change",
                            "BinOp"
                        ],
                        [
                            "step_log_lr + tf.stop_gradient(tf.clip_by_value(step_log_lr, -33, self.max_log_lr) - step_log_lr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_723": {
                "name_or_scope": {
                    "value": "Layer2_RNN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_global_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_757": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_global_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_774": {
                "ref": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initialize_global_state()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "ngs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_368": {
                "name_or_scope": {
                    "value": "PerTensor",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_398": {
                "variable": {
                    "value": "updated_param",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mode_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : truth - update_steps_mt[li]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : truth - update_step",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_399": {
                "variable": {
                    "value": "attention_step",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lr_attend * attention_delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "truth.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_404": {
                "variable": {
                    "value": "updated_param",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mode_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : param - update_steps_mt[li]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param - update_step",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sqrt_465": {
                "x": {
                    "value": "scale_decays[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_534": {
                "features": {
                    "value": "log_lr_vec - tf.log(1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_535": {
                "features": {
                    "value": "tf.log(1e-06) - log_lr_vec",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_540": {
                "x": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_624": {
                "input_tensor": {
                    "value": "update_delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_685": {
                "t": {
                    "value": "step_log_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['log_learning_rate'] + lr_change",
                            "BinOp"
                        ],
                        [
                            "step_log_lr + tf.stop_gradient(tf.clip_by_value(step_log_lr, -33, self.max_log_lr) - step_log_lr)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-33",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.max_log_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_725": {
                "values": {
                    "value": "layer_states",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_781": {
                "ref": {
                    "value": "state_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_state[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_785": {
                "control_inputs": {
                    "value": "state_assign_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(state_var, new_state[key]) for (key, state_var) in state.items()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "name_scope_793": {
                "name": {
                    "value": "'update_' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_804": {
                "control_inputs": {
                    "value": "[self._finish(update_ops, 'update')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_234": {
                "initial_value": {
                    "value": "tf.random_uniform([1, hcell.state_size], -1.0, 1.0, seed=self.random_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "init_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_324": {
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_530": {
                "input_tensor": {
                    "value": "log_lr_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state['log_learning_rate'], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(state['log_learning_rate'], [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_590": {
                "values": {
                    "value": "(new_param_state, rnn_input_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_640": {
                "input_tensor": {
                    "value": "attention_delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_760": {
                "name": {
                    "value": "global_state",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "gs[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._initialize_global_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_534": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_535": {
                "x": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_add_805": {
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/optimizer/learning_rate_schedule.py": {
        "tensorflow": {
            "constant_32": {
                "variable": {
                    "value": "self.max_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "n_steps - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_54": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "state['itr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.max_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_55": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.learning_rates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(state['itr'], self.max_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_35": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "self.learning_rates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rates",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(initial_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "trainable_optimizer.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_45": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_58": {
                "scalar": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.learning_rates, index)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/optimizer/rnn_cells.py": {
        "tensorflow": {
            "split_51": {
                "variable": {
                    "value": "(r_bias, u_bias, c_bias)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((1, 3))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "type(self).__name__",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "(r_lin, u_lin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.affine([inputs, state], 2 * self._num_units, scale=self._scale, bias_init=self._gate_bias_init, random_seed=self._random_seed)",
                            "Call"
                        ],
                        [
                            "utils.affine([inputs, r * state], self._num_units, scale=self._scale, random_seed=self._random_seed)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "candidate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "x": {
                    "value": "u_lin + u_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/optimizer/trainable_adam.py": {
        "tensorflow": {
            "get_variable_67": {
                "variable": {
                    "value": "self.log_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(np.log(learning_rate))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "self.beta1_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta1_logit",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(inv_sigmoid(beta1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "self.beta2_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta2_logit",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(inv_sigmoid(beta2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "self.log_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(np.log(epsilon))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta1_logit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta2_logit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_125": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_127": {
                "variable": {
                    "value": "old_grad_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(grad_values, [-1, 1])",
                            "Call"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(grad_values, [-1, 1])",
                            "Call"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate * debiased_first_moment / (tf.sqrt(debiased_second_moment + 1e-10) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(update, old_grad_shape)",
                            "Call"
                        ],
                        [
                            "utils.stack_tensor(update, grad_indices, param, param_shape[:1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "old_grad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(grad_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(var.get_shape().num_elements(), 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_148": {
                "variable": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_124": {
                "x": {
                    "value": "self.log_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_134": {
                "x": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(grad_values, [-1, 1])",
                            "Call"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            },
            "pow_175": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_initializer_70": {
                "value": {
                    "value": "np.log(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_74": {
                "value": {
                    "value": "inv_sigmoid(beta1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_78": {
                "value": {
                    "value": "inv_sigmoid(beta2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_82": {
                "value": {
                    "value": "np.log(epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "x": {
                    "value": "debiased_second_moment + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/optimizer/trainable_optimizer.py": {
        "tensorflow": {
            "DEFINE_float_34": {
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale for optimizer regularization.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale for optimizer regularization.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_ref_634": {
                "variable": {
                    "value": "variable_use_count",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "_LOCAL_STATE_VARIABLE_COLLECTION",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'local_state_collection'",
                            "str"
                        ]
                    ]
                }
            },
            "cond_664": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "return_init_values",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : init_values",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : local_vars",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_223": {
                "variable": {
                    "value": "obj_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_229": {
                "variable": {
                    "value": "mini_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_230": {
                "variable": {
                    "value": "mini_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_231": {
                "variable": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_232": {
                "variable": {
                    "value": "first_unroll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_233": {
                "variable": {
                    "value": "reset_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_234": {
                "variable": {
                    "value": "jacob_switch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_236": {
                "variable": {
                    "value": "mode_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "while_loop_436": {
                "variable": {
                    "value": "loop_output",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "loop_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[initial_itr, initial_meta_obj, initial_meta_obj_mt, initial_params, initial_attend_params, initial_state, initial_global_state, initial_problem_objectives, initial_obj, data, labels, batches, init_regular]",
                            "List"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "invariants",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[initial_itr.get_shape(), initial_meta_obj.get_shape(), initial_meta_obj_mt.get_shape(), [t.get_shape() for t in initial_params], [t.get_shape() for t in initial_attend_params], state_shapes, global_shapes, tensor_shape.TensorShape([None]), initial_obj.get_shape(), tensor_shape.unknown_shape(), tensor_shape.unknown_shape(), tensor_shape.unknown_shape(), init_regular.get_shape()]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_511": {
                "variable": {
                    "value": "initial_itr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_512": {
                "variable": {
                    "value": "initial_meta_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_514": {
                "variable": {
                    "value": "initial_meta_obj_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_517": {
                "variable": {
                    "value": "initial_problem_objectives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "initial_obj_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "problem.objective(initial_params, data, labels)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_537": {
                "variable": {
                    "value": "init_regular",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gather_301": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_302": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mini_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(batches, itr)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_303": {
                "variable": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mini_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(batches, itr)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_363": {
                "variable": {
                    "value": "all_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[all_obj, tf.reshape(obj, (1,))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_369": {
                "variable": {
                    "value": "obj_accum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obj_accum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(obj_accum, acc)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(obj_weights, itr) * obj",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_388": {
                "variable": {
                    "value": "obj_accum_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obj_accum_mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(obj_accum_mt, mse_loss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([tf.reduce_sum(0.5 * (d1 - d2) * (d1 - d2)) for (d1, d2) in zip(update_steps, update_steps_mt)])",
                            "Call"
                        ],
                        [
                            "mse_loss / problem.num_params",
                            "BinOp"
                        ],
                        [
                            "tf.gather(obj_weights, itr) * mse_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_410": {
                "variable": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "num_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(obj_weights)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_finite_411": {
                "variable": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obj_accum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(obj_accum, acc)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_640": {
                "name_or_scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "assign_141": {
                "ref": {
                    "value": "state_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_state[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_143": {
                "control_inputs": {
                    "value": "state_assign_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(state_var, new_state[key]) for (key, state_var) in state.items()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "shape_224": {
                "input": {
                    "value": "obj_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_237": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "shape": {
                    "value": "(None,) + shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_351": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "jacob_switch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : reg",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : regular",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "gather_415": {
                "variable": {
                    "value": "current_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([all_obj, tf.reshape(obj, (1,))], 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_420": {
                "variable": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "problem.objective(attend_params, batch_data, batch_labels)",
                            "Call"
                        ],
                        [
                            "problem.objective(params, batch_data, batch_labels)",
                            "Call"
                        ],
                        [
                            "current_obj + beta * reg",
                            "BinOp"
                        ],
                        [
                            "tf.gather(all_obj, itr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_obj + max_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_569": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_603": {
                "variable": {
                    "value": "log_scaled_problem_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled_problem_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_objs + obj_scale_eps) / (initial_obj + obj_scale_eps)",
                            "BinOp"
                        ],
                        [
                            "all_objs / (initial_obj + obj_scale_eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_606": {
                "variable": {
                    "value": "log_scaled_problem_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled_problem_obj + obj_scale_eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_607": {
                "input_tensor": {
                    "value": "log_scaled_problem_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(scaled_problem_obj)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled_problem_obj + obj_scale_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_305": {
                "params": {
                    "value": "mt_label",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_326": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "current_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "problem.objective(attend_params, batch_data, batch_labels)",
                            "Call"
                        ],
                        [
                            "problem.objective(params, batch_data, batch_labels)",
                            "Call"
                        ],
                        [
                            "current_obj + beta * reg",
                            "BinOp"
                        ],
                        [
                            "tf.gather(all_obj, itr)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "attend_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_328": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "current_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "problem.objective(attend_params, batch_data, batch_labels)",
                            "Call"
                        ],
                        [
                            "problem.objective(params, batch_data, batch_labels)",
                            "Call"
                        ],
                        [
                            "current_obj + beta * reg",
                            "BinOp"
                        ],
                        [
                            "tf.gather(all_obj, itr)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_367": {
                "params": {
                    "value": "obj_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_387": {
                "params": {
                    "value": "obj_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_and_422": {
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(itr, num_iter)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(obj_accum)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_425": {
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(itr, num_iter)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(obj_accum)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "training_loop_cond",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_local_variable_655": {
                "name": {
                    "value": "unique_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + '_' + str(variable_use_count[name])",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros(init_value.get_shape(), dtype=init_value.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_363": {
                "tensor": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "problem.objective(params, mini_data, mini_labels)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_384": {
                "input_tensor": {
                    "value": "0.5 * (d1 - d2) * (d1 - d2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_417": {
                "x": {
                    "value": "init_obj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_657": {
                "shape": {
                    "value": "init_value.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "init_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IndexedSlices_335": {
                "values": {
                    "value": "tf.stop_gradient(grad.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_337": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "variable"
                        ]
                    ]
                }
            },
            "stop_gradient_335": {
                "input": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/optimizer/utils.py": {
        "tensorflow": {
            "concat_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_129": {
                "variable": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.reduce_all(tf.equal(ms, 0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros_like(decay, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : decay",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "grad_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_174": {
                "variable": {
                    "value": "(grad_indices, grad_segments)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_175": {
                "variable": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "grad_segments",
                    "type": "variable",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "tf.shape(grad_indices)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([head_dims, tail_dims], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_211": {
                "variable": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_232": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_235": {
                "variable": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[head_dims, tail_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(dense_tensor, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(slices, tf.concat([[-1], dense_shape[1:]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([[-1], dense_shape[1:]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_238": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_262": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_265": {
                "variable": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[head_dims, tail_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_267": {
                "variable": {
                    "value": "update_mask_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_268": {
                "variable": {
                    "value": "reshaped_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_269": {
                "variable": {
                    "value": "update_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.scatter_nd(reshaped_indices, update_mask_vals, head_dims[:1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "reshaped_dense_slices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "stack_tensor(slices, indices, dense_tensor, head_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_274": {
                "variable": {
                    "value": "reshaped_dense_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_28": {
                "condition": {
                    "value": "tf.is_finite(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "replacement",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_33": {
                "x": {
                    "value": "x + tf.sqrt(1.0 + x ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_73": {
                "variable": {
                    "value": "rand_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "vec_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale / np.sqrt(input_size)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "rand_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=vec_mean, stddev=sigma, seed=random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_125": {
                "variable": {
                    "value": "grad_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(gradient, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_213": {
                "tensor": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(dense_tensor, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(slices, tf.concat([[-1], dense_shape[1:]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([[-1], tail_dims], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "tensor": {
                    "value": "tf.scatter_nd(indices, slices, dense_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dense_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "tensor": {
                    "value": "tf.where(update_mask, reshaped_dense_slices, reshaped_dense_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dense_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_finite_28": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Affine'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_less_equal_121": {
                "x": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.reduce_all(tf.equal(ms, 0.0)), lambda : tf.zeros_like(decay, dtype=tf.float32), lambda : decay)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "summarize": {
                    "value": "decay_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decay.get_shape().num_elements()",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_greater_equal_122": {
                "x": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.reduce_all(tf.equal(ms, 0.0)), lambda : tf.zeros_like(decay, dtype=tf.float32), lambda : decay)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "summarize": {
                    "value": "decay_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decay.get_shape().num_elements()",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_124": {
                "control_inputs": {
                    "value": "decay_check_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assert_less_equal(decay, 1.0, summarize=decay_size), tf.assert_greater_equal(decay, 0.0, summarize=decay_size)]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_all_129": {
                "input_tensor": {
                    "value": "tf.equal(ms, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_207": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_209": {
                "values": {
                    "value": "[head_dims, tail_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_213": {
                "values": {
                    "value": "[[-1], tail_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_234": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_237": {
                "values": {
                    "value": "[[-1], dense_shape[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_240": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(dense_tensor, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(slices, tf.concat([[-1], dense_shape[1:]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_241": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_264": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_267": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_270": {
                "indices": {
                    "value": "reshaped_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "update_mask_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.shape(indices), 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "head_dims[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_277": {
                "condition": {
                    "value": "update_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.scatter_nd(reshaped_indices, update_mask_vals, head_dims[:1]), 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "reshaped_dense_slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(stack_tensor(slices, indices, dense_tensor, head_dims), dense_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reshaped_dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, dense_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_278": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_33": {
                "x": {
                    "value": "1.0 + x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], dtype=tf.float32, initializer=rand_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_105": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_129": {
                "x": {
                    "value": "ms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mean_squared(grad_vec, decay, ms)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_130": {
                "input": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.reduce_all(tf.equal(ms, 0.0)), lambda : tf.zeros_like(decay, dtype=tf.float32), lambda : decay)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_158": {
                "x": {
                    "value": "ms + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_176": {
                "input": {
                    "value": "grad_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_initializer_81": {
                "value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/problems/model_adapter.py": {
        "tensorflow": {
            "initialize_variables_78": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.parameters + self.constants",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_81": {
                "msg": {
                    "value": "ModelAdapter parameters: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "[op.name for op in self.parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "info_83": {
                "msg": {
                    "value": "ModelAdapter constants: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "[op.name for op in self.constants]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_153": {
                "name": {
                    "value": "unused_graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_176": {
                "msg": {
                    "value": "'Replaced %s with %s' % (self.name, replacement)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/problems/problem_generator.py": {
        "tensorflow": {
            "DEFINE_integer_33": {
                "name": {
                    "value": "hessian_itrs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of iterations for hessian information calculation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "reg_option",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "hessian",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "which regularization to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_37": {
                "name": {
                    "value": "l2_reg_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Scaling factor for parameter value regularization\\n                             in softmax classifier problems.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(tf.square(grad), [1, -1]) for grad in grads]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(grads, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "variable": {
                    "value": "jacob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(tf.square(grad), [1, -1]) for grad in grads]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(grads, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_168": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.group_product(v, v)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(s)",
                            "Call"
                        ],
                        [
                            "10.0",
                            "float"
                        ]
                    ]
                }
            },
            "gradients_340": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "list(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_482": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.n_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "embedding_lookup_504": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "tf.cast(data, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_505": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_534": {
                "variable": {
                    "value": "one_hot_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(data, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_535": {
                "variable": {
                    "value": "one_hot_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "one_hot_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(data, tf.int32), self.n_classes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot_embeddings, [-1, self.n_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_536": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(data, tf.int32), self.n_classes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot_embeddings, [-1, self.n_classes])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_537": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_ids, self.n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_538": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_575": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.n_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bias_add_578": {
                "variable": {
                    "value": "preactivations",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(features, params[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_655": {
                "variable": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.affine_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_691": {
                "variable": {
                    "value": "mtx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_739": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_783": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_792": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_793": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_808": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_824": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_840": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_854": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_869": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_886": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_910": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_1030": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "list(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_1076": {
                "variable": {
                    "value": "min_sqr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "params_sqr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0] ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_1077": {
                "variable": {
                    "value": "max_sqr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "params_sqr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0] ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_1095": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(params[0] ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1096": {
                "variable": {
                    "value": "rad_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 / (radius + 1e-06) * data[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1099": {
                "variable": {
                    "value": "sin_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(sin_dist * data[:, 1:]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_1200": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "a_3d.reshape(n ** 4, n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_1201": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "b_3d.reshape(n ** 4, n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_1202": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "c_3d.reshape(n ** 4, n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_1219": {
                "variable": {
                    "value": "p_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.a, theta_a) * tf.matmul(self.b, theta_b)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "p_trans",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_1220": {
                "variable": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.matrix_inverse(tf.matmul(p_trans, p))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "p_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(p, name='p_trans')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "p_inv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_1222": {
                "variable": {
                    "value": "theta_c",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matrix_inverse(tf.matmul(p_trans, p)), p_trans, name='p_inv')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "theta_c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_1225": {
                "variable": {
                    "value": "c_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.a, theta_a) * tf.matmul(self.b, theta_b)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "theta_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(p_inv, self.c, name='theta_c')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "c_hat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_1228": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(c_hat - self.c) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "input_tensor": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_209": {
                "input_tensor": {
                    "value": "tf.stack(trace_vhv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_246": {
                "input_tensor": {
                    "value": "tf.stack(eigenvalues)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_308": {
                "variable": {
                    "value": "padding1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_309": {
                "variable": {
                    "value": "padding2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_310": {
                "variable": {
                    "value": "up_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diag2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_diag(beta_list[:len(alpha_list) - 1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 0], [0, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_312": {
                "variable": {
                    "value": "down_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diag2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_diag(beta_list[:len(alpha_list) - 1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 1], [1, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "tf.stack(eigen_list_full)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_389": {
                "t": {
                    "value": "tf.matmul(self.w, params[0]) - self.y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_434": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_435": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.inference(params, data)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_439": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(params, data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_441": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=labels, logits=logits[:, 0])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_452": {
                "x": {
                    "value": "tf.argmax(tf.nn.softmax(logits), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_466": {
                "labels": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.argmax(self.inference(params, data))",
                            "Call"
                        ],
                        [
                            "self.argmax(self.activation(self.inference(params, data)))",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_582": {
                "variable": {
                    "value": "preactivations",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(net, params[layer])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "params[layer + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "accuracy_598": {
                "labels": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.argmax(self.inference(params, data))",
                            "Call"
                        ],
                        [
                            "self.argmax(self.activation(self.inference(params, data)))",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_649": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_conv_list[i]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_650": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(2, len(self.param_shapes), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv_input, w_conv, strides=[1] * 4, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(layer, b_conv)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_conv_list[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "l2_loss_692": {
                "t": {
                    "value": "tf.matmul(mtx, params[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_716": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "xm.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_717": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ym.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_741": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variables_initializer_770": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_785": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_796": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_812": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_828": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_842": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_857": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_871": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_898": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_914": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_1034": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.zero_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_uniform(grad.get_shape())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_1035": {
                "variable": {
                    "value": "zero_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "grads",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1058": {
                "input_tensor": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0][0] ** 2 + params[0][1:] ** 2 / (params[0][:-1] ** 2 + EPSILON)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_1113": {
                "input_tensor": {
                    "value": "(params[0] * data) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1240": {
                "name_or_scope": {
                    "value": "PARAMETER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'parameters'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "PARAMETER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'parameters'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_137": {
                "tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_160": {
                "values": {
                    "value": "[tf.reduce_sum(x * y) for (x, y) in zip(xs, ys)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "hessian",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_201": {
                "variable": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(tf.square(grad), [1, -1]) for grad in grads]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(grads, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.Variable(arr.astype('float32')) for arr in arrays]",
                            "ListComp"
                        ],
                        [
                            "[tf.Variable(param) for param in self.init_tensors(seed)]",
                            "ListComp"
                        ],
                        [
                            "tf.split(params[0], 2, axis=0)",
                            "Call"
                        ],
                        [
                            "[t * self.scale for t in params_raw]",
                            "ListComp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vi / (s + 1e-06) for vi in v]",
                            "ListComp"
                        ],
                        [
                            "v_list",
                            "variable"
                        ],
                        [
                            "[np.random.randint(0, 2, tuple(p.get_shape().as_list())) for p in params]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(v_i, tf.float32) for v_i in v]",
                            "ListComp"
                        ],
                        [
                            "[tf.random_normal(p.get_shape()) for p in params]",
                            "ListComp"
                        ],
                        [
                            "self.normalization(v)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(v, eigenvectors)",
                            "Call"
                        ],
                        [
                            "self.normalization(Hv)",
                            "Call"
                        ],
                        [
                            "[np.random.randint(0, 2, tuple(p.get_shape().as_list())) for p in params]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(v_i, tf.float32) for v_i in v]",
                            "ListComp"
                        ],
                        [
                            "self.normalization(v)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(w, v_list)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(w, v_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_202": {
                "input_tensor": {
                    "value": "hv * v_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_209": {
                "values": {
                    "value": "trace_vhv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "gradients_235": {
                "variable": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(tf.square(grad), [1, -1]) for grad in grads]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(grads, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.Variable(arr.astype('float32')) for arr in arrays]",
                            "ListComp"
                        ],
                        [
                            "[tf.Variable(param) for param in self.init_tensors(seed)]",
                            "ListComp"
                        ],
                        [
                            "tf.split(params[0], 2, axis=0)",
                            "Call"
                        ],
                        [
                            "[t * self.scale for t in params_raw]",
                            "ListComp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vi / (s + 1e-06) for vi in v]",
                            "ListComp"
                        ],
                        [
                            "v_list",
                            "variable"
                        ],
                        [
                            "[np.random.randint(0, 2, tuple(p.get_shape().as_list())) for p in params]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(v_i, tf.float32) for v_i in v]",
                            "ListComp"
                        ],
                        [
                            "[tf.random_normal(p.get_shape()) for p in params]",
                            "ListComp"
                        ],
                        [
                            "self.normalization(v)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(v, eigenvectors)",
                            "Call"
                        ],
                        [
                            "self.normalization(Hv)",
                            "Call"
                        ],
                        [
                            "[np.random.randint(0, 2, tuple(p.get_shape().as_list())) for p in params]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(v_i, tf.float32) for v_i in v]",
                            "ListComp"
                        ],
                        [
                            "self.normalization(v)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(w, v_list)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(w, v_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_246": {
                "values": {
                    "value": "eigenvalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_327": {
                "values": {
                    "value": "eigen_list_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "IndexedSlices_348": {
                "variable": {
                    "value": "new_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grad.values + noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_452": {
                "input": {
                    "value": "tf.nn.softmax(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_466": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_483": {
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, (-1, self.n_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, (-1, self.n_features))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_504": {
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_506": {
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_533": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_534": {
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_539": {
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_578": {
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, (-1, self.n_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, (-1, self.n_features))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_598": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_659": {
                "value": {
                    "value": "tf.matmul(flattened, output_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "output_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_692": {
                "a": {
                    "value": "mtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.matrix, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Graph_713": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_713": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_757": {
                "name": {
                    "value": "optimizee",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_759": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_760": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_761": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(100.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_766": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_769": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_772": {
                "msg": {
                    "value": "Initializing model parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_883": {
                "values": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_988": {
                "a": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_990": {
                "input_tensor": {
                    "value": "(tf.abs(diff) + EPSILON) ** self.norm_power",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_1007": {
                "x": {
                    "value": "EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                }
            },
            "reduce_sum_1095": {
                "input_tensor": {
                    "value": "params[0] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_1209": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', [1])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=xm.shape)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape, dtype=tf.float32, seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1218": {
                "a": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "theta_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Variable_1241": {
                "initial_value": {
                    "value": "arr.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "initial_value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_137": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "grads",
                            "variable"
                        ]
                    ]
                }
            },
            "constant_266": {
                "value": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_279": {
                "variable": {
                    "value": "w_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(tf.square(grad), [1, -1]) for grad in grads]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(grads, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.Variable(arr.astype('float32')) for arr in arrays]",
                            "ListComp"
                        ],
                        [
                            "[tf.Variable(param) for param in self.init_tensors(seed)]",
                            "ListComp"
                        ],
                        [
                            "tf.split(params[0], 2, axis=0)",
                            "Call"
                        ],
                        [
                            "[t * self.scale for t in params_raw]",
                            "ListComp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vi / (s + 1e-06) for vi in v]",
                            "ListComp"
                        ],
                        [
                            "v_list",
                            "variable"
                        ],
                        [
                            "[np.random.randint(0, 2, tuple(p.get_shape().as_list())) for p in params]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(v_i, tf.float32) for v_i in v]",
                            "ListComp"
                        ],
                        [
                            "[tf.random_normal(p.get_shape()) for p in params]",
                            "ListComp"
                        ],
                        [
                            "self.normalization(v)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(v, eigenvectors)",
                            "Call"
                        ],
                        [
                            "self.normalization(Hv)",
                            "Call"
                        ],
                        [
                            "[np.random.randint(0, 2, tuple(p.get_shape().as_list())) for p in params]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(v_i, tf.float32) for v_i in v]",
                            "ListComp"
                        ],
                        [
                            "self.normalization(v)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(w, v_list)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(w, v_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_285": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.group_product(w, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_296": {
                "variable": {
                    "value": "w_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(tf.square(grad), [1, -1]) for grad in grads]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(grads, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ],
                        [
                            "tf.gradients(objective, list(parameters))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.Variable(arr.astype('float32')) for arr in arrays]",
                            "ListComp"
                        ],
                        [
                            "[tf.Variable(param) for param in self.init_tensors(seed)]",
                            "ListComp"
                        ],
                        [
                            "tf.split(params[0], 2, axis=0)",
                            "Call"
                        ],
                        [
                            "[t * self.scale for t in params_raw]",
                            "ListComp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vi / (s + 1e-06) for vi in v]",
                            "ListComp"
                        ],
                        [
                            "v_list",
                            "variable"
                        ],
                        [
                            "[np.random.randint(0, 2, tuple(p.get_shape().as_list())) for p in params]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(v_i, tf.float32) for v_i in v]",
                            "ListComp"
                        ],
                        [
                            "[tf.random_normal(p.get_shape()) for p in params]",
                            "ListComp"
                        ],
                        [
                            "self.normalization(v)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(v, eigenvectors)",
                            "Call"
                        ],
                        [
                            "self.normalization(Hv)",
                            "Call"
                        ],
                        [
                            "[np.random.randint(0, 2, tuple(p.get_shape().as_list())) for p in params]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(v_i, tf.float32) for v_i in v]",
                            "ListComp"
                        ],
                        [
                            "self.normalization(v)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(w, v_list)",
                            "Call"
                        ],
                        [
                            "self.orthnormal(w, v_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_389": {
                "a": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_452": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(params, data)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_582": {
                "a": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(preactivations)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_659": {
                "a": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv_input, (-1, self.affine_size))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_758": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_811": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_855": {
                "input_tensor": {
                    "value": "[x ** 4 - 16 * x ** 2 + 5 * x for x in params]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_972": {
                "input_tensor": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_1037": {
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(self.zero_prob, tf.random_uniform(grad.get_shape()))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "zero_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(grad, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "noisy_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad + self.noise_stdev * tf.random_normal(grad.get_shape())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_1098": {
                "x": {
                    "value": "params[0][:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_1128": {
                "input_tensor": {
                    "value": "data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_1209": {
                "x": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1221": {
                "a": {
                    "value": "p_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(p, name='p_trans')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.a, theta_a) * tf.matmul(self.b, theta_b)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_199": {
                "value": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_202": {
                "values": {
                    "value": "[tf.reduce_sum(hv * v_i) for (hv, v_i) in zip(Hv, v)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_277": {
                "input": {
                    "value": "p.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_795": {
                "x": {
                    "value": "-x - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_810": {
                "x": {
                    "value": "0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_897": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', [1])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=xm.shape)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape, dtype=tf.float32, seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_912": {
                "x": {
                    "value": "x ** 2 / np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_913": {
                "x": {
                    "value": "2 * y ** 2 / np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_347": {
                "input": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_763": {
                "value": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_793": {
                "x": {
                    "value": "x + 3.0 * y - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_794": {
                "x": {
                    "value": "x - 3.0 * y - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_809": {
                "x": {
                    "value": "-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_990": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.w, params[0]) - self.y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_809": {
                "x": {
                    "value": "0.5 * (x ** 2 + y ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_810": {
                "x": {
                    "value": "2 * np.pi * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/l2o-scale-regularize-train/problems/problem_sets.py": {
        "tensorflow": {}
    },
    "L2O-Scale/learned_optimizer/metaopt.py": {
        "tensorflow": {
            "DEFINE_integer_33": {
                "name": {
                    "value": "ps_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of tasks in the ps job.\\n                            If 0 no ps job is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "nan_l2_reg",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Strength of l2-reg when NaNs are encountered.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_38": {
                "name": {
                    "value": "l2_reg",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Lambda value for parameter regularization.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_41": {
                "name": {
                    "value": "rms_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay value for the RMSProp metaoptimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_44": {
                "name": {
                    "value": "rms_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon value for the RMSProp metaoptimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_620": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_753": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_754": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_179": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "replica_device_setter_180": {
                "variable": {
                    "value": "real_device_setter",
                    "type": "variable",
                    "possible_values": []
                },
                "ps_tasks": {
                    "value": "FLAGS.ps_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_611": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_612": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_625": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_626": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_637": {
                "variable": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "get_collection_767": {
                "variable": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "Variable_220": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_221": {
                "variable": {
                    "value": "meta_parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_228": {
                "variable": {
                    "value": "meta_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "decay": {
                    "value": "FLAGS.rms_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.rms_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_260": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "OPT_SUM_COLLECTION",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL_summaries'",
                            "str"
                        ]
                    ]
                }
            },
            "Supervisor_277": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.get_default_graph() if graph is None else graph",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "is_chief": {
                    "value": "is_chief",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "summary_op": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "saver": {
                    "value": "tf.train.Saver(max_to_keep=10000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_600": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_622": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.get_default_graph() if graph is None else graph",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_645": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_760": {
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_774": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_775": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_211": {
                "name": {
                    "value": "MetaObjective",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_output.metaobj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_237": {
                "variable": {
                    "value": "clipped_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "utils.make_finite(grad, replacement=tf.zeros_like(var))",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-gradient_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "gradient_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_269": {
                "variable": {
                    "value": "propagate_loop_state_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*propagate_loop_state_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_collection_273": {
                "variable": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "Saver_275": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_624": {
                "var_list": {
                    "value": "vars_to_preinitialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "variable"
                        ],
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            },
            "variables_initializer_652": {
                "var_list": {
                    "value": "vars_to_initialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(set(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)) - set(vars_to_restore) - set(vars_to_preinitialize))",
                            "Call"
                        ],
                        [
                            "list(set(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)) - set(vars_to_restore) - set(vars_to_preinitialize))",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_762": {
                "var_list": {
                    "value": "vars_to_preinitialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "variable"
                        ],
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            },
            "variables_initializer_780": {
                "var_list": {
                    "value": "vars_to_initialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(set(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)) - set(vars_to_restore) - set(vars_to_preinitialize))",
                            "Call"
                        ],
                        [
                            "list(set(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)) - set(vars_to_restore) - set(vars_to_preinitialize))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_208": {
                "name": {
                    "value": "'State/{}'.format(key)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "finite_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.make_finite(val, replacement=tf.zeros_like(val))",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_244": {
                "name": {
                    "value": "var.name + '_rawgrad'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "utils.make_finite(grad, replacement=tf.zeros_like(grad))",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_250": {
                "name": {
                    "value": "var.name + '_var'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_252": {
                "name": {
                    "value": "var.name + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "[OPT_SUM_COLLECTION]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_264": {
                "control_inputs": {
                    "value": "[train_op, summary_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_299": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunOptions_313": {
                "variable": {
                    "value": "full_trace_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_650": {
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_760": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_778": {
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=OPTIMIZER_SCOPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_284": {
                "max_to_keep": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_207": {
                "input": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_224": {
                "input_tensor": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RunMetadata_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_640": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_770": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_238": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_247": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/metarun.py": {
        "tensorflow": {
            "DEFINE_string_33": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/lol/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to store parameters and results.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "worker_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of tasks in the worker job.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "num_problems",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of sub-problems to run.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "num_meta_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of meta-iterations to optimize.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "num_unroll_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale parameter of the exponential\\n                            distribution from which the number of partial\\n                            unrolls is drawn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "min_num_unrolls",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum number of unrolls per problem.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "num_partial_unroll_itr_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale parameter of the exponential\\n                               distribution from which the number of iterations\\n                               per unroll is drawn.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "min_num_itr_partial_unroll",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum number of iterations for one\\n                               unroll.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_59": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "HierarchicalRNN",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Which meta-optimizer to train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "cell_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of the RNN hidden state in each layer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "num_cells",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of RNN layers.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "cell_cls",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "GRUCell",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Type of RNN cell to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_71": {
                "name": {
                    "value": "meta_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate for the meta-optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_73": {
                "name": {
                    "value": "gradient_clip_level",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The level to clip gradients to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_142": {
                "name": {
                    "value": "min_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_144": {
                "name": {
                    "value": "max_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_182": {
                "name": {
                    "value": "num_gradient_scales",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many different timescales to keep for\\n                               gradient history. If > 1, also learns a scale\\n                               factor for gradient history.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_186": {
                "name": {
                    "value": "max_log_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum log learning rate allowed.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_188": {
                "name": {
                    "value": "objective_training_max_multiplier",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "How much the objective can grow before training on\\n                             this problem / param pair is terminated. Sets a max\\n                             on the objective value when multiplied by the\\n                             initial objective. If <= 0, not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_217": {
                "name": {
                    "value": "fix_unroll_length",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_218": {
                "name": {
                    "value": "fix_num_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_219": {
                "name": {
                    "value": "fix_num_steps_eval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_220": {
                "name": {
                    "value": "evaluation_period",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_221": {
                "name": {
                    "value": "evaluation_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_222": {
                "name": {
                    "value": "save_period",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_376": {
                "dirname": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.train_dir, '{}_{}_{}_{}'.format(FLAGS.optimizer, FLAGS.cell_cls, FLAGS.cell_size, FLAGS.num_cells))",
                            "Call"
                        ]
                    ]
                }
            },
            "run_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/metatest.py": {
        "tensorflow": {
            "DEFINE_string_39": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "opt/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to store parameters and results.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "save_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "opt/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to testing results.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_43": {
                "name": {
                    "value": "test_optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "L2o",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "optimizer to test.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "worker_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of tasks in the worker job.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "num_testing_itrs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number testing iterations.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_52": {
                "name": {
                    "value": "num_problems",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of sub-problems to run.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "num_meta_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of meta-iterations to optimize.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_56": {
                "name": {
                    "value": "num_unroll_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale parameter of the exponential\\n                            distribution from which the number of partial\\n                            unrolls is drawn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "min_num_unrolls",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum number of unrolls per problem.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "num_partial_unroll_itr_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale parameter of the exponential\\n                               distribution from which the number of iterations\\n                               per unroll is drawn.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "min_num_itr_partial_unroll",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum number of iterations for one\\n                               unroll.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "HierarchicalRNN",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Which meta-optimizer to train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_74": {
                "name": {
                    "value": "cell_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of the RNN hidden state in each layer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_76": {
                "name": {
                    "value": "num_cells",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of RNN layers.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_78": {
                "name": {
                    "value": "cell_cls",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "GRUCell",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Type of RNN cell to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_82": {
                "name": {
                    "value": "meta_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate for the meta-optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_84": {
                "name": {
                    "value": "gradient_clip_level",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The level to clip gradients to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_176": {
                "name": {
                    "value": "min_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimum initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_178": {
                "name": {
                    "value": "max_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_216": {
                "name": {
                    "value": "num_gradient_scales",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many different timescales to keep for\\n                               gradient history. If > 1, also learns a scale\\n                               factor for gradient history.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_220": {
                "name": {
                    "value": "max_log_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum log learning rate allowed.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_222": {
                "name": {
                    "value": "objective_training_max_multiplier",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "How much the objective can grow before training on\\n                             this problem / param pair is terminated. Sets a max\\n                             on the objective value when multiplied by the\\n                             initial objective. If <= 0, not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_250": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "mt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_251": {
                "name": {
                    "value": "restore_model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_439": {
                "dirname": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.train_dir, '{}_{}_{}_{}'.format(FLAGS.optimizer, FLAGS.cell_cls, FLAGS.cell_size, FLAGS.num_cells))",
                            "Call"
                        ],
                        [
                            "logdir",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "run_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_451": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_455": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_459": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/optimizer/coordinatewise_rnn.py": {
        "tensorflow": {
            "DEFINE_float_32": {
                "name": {
                    "value": "crnn_rnn_readout_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The initialization scale for the RNN readouts.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_34": {
                "name": {
                    "value": "crnn_default_decay_var_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The default initializer value for any decay/\\n                             momentum style variables and constants.\\n                             sigmoid(2.2) ~ 0.9, sigmoid(-2.2) ~ 0.01.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_165": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var.get_shape().num_elements(), 1]",
                            "List"
                        ]
                    ]
                }
            },
            "MultiRNNCell_83": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "self.component_cells",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_87": {
                "variable": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.crnn_rnn_readout_scale / math.sqrt(cell_sizes[-1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "update_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cell_sizes[-1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_100": {
                "variable": {
                    "value": "self._init_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "init_vector",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, state_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_119": {
                "variable": {
                    "value": "self.decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decay_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "self.decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decay_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(FLAGS.crnn_default_decay_var_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "variable": {
                    "value": "self.decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_128": {
                "variable": {
                    "value": "self.decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "FLAGS.crnn_default_decay_var_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_140": {
                "variable": {
                    "value": "zero_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "self.lr_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "wt_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zero_init if self.zero_init_lr_weights else scaled_init",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "self.lr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "zero_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_148": {
                "variable": {
                    "value": "self.lr_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "self.lr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_158": {
                "variable": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "min_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_lr_range[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var.get_shape().num_elements(), 1]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_163": {
                "variable": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "actual_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(vectorized_shape, np.log(min_lr), np.log(max_lr))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_195": {
                "variable": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_learning_rate * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(grad_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_298": {
                "variable": {
                    "value": "cur_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rnn_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._pack_tuples_into_rnn_state(rnn_state_tuples)",
                            "Call"
                        ],
                        [
                            "utils.update_slices(rnn_state, grad_indices, state['rnn'], param_shape)",
                            "Call"
                        ],
                        [
                            "utils.slice_tensor(state['rnn'], grad_indices, param_shape)",
                            "Call"
                        ],
                        [
                            "state['rnn']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([new_c, new_h], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([rnn_state, tf.concat([new_c, new_h], 1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, cur_state_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, total_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_300": {
                "variable": {
                    "value": "cur_state_tuple",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cur_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(rnn_state, [0, cur_state_pos], [-1, total_state_size])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_169": {
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var.get_shape().num_elements(), 1]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_172": {
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var.get_shape().num_elements(), 1]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_312": {
                "variable": {
                    "value": "rnn_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_314": {
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_226": {
                "input": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_102": {
                "minval": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_124": {
                "value": {
                    "value": "FLAGS.crnn_default_decay_var_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/optimizer/global_learning_rate.py": {
        "tensorflow": {
            "constant_initializer_33": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(initial_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "trainable_optimizer.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_39": {
                "scalar": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/optimizer/hierarchical_rnn.py": {
        "tensorflow": {
            "DEFINE_float_33": {
                "name": {
                    "value": "biasgrucell_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The scale for the internal BiasGRUCell vars.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "biasgrucell_gate_bias_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The bias for the internal BiasGRUCell reset and\\n                             update gate variables.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_40": {
                "name": {
                    "value": "hrnn_rnn_readout_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The initialization scale for the RNN readouts.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_42": {
                "name": {
                    "value": "hrnn_default_decay_var_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The default initializer value for any decay/\\n                             momentum style variables and constants.\\n                             sigmoid(2.2) ~ 0.9, sigmoid(-2.2) ~ 0.01.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_47": {
                "name": {
                    "value": "scale_decay_bias_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The initialization for the scale decay bias. This\\n                             is the initial bias for the timescale for the\\n                             exponential avg of the mean square gradients.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_51": {
                "name": {
                    "value": "learning_rate_momentum_logit_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initialization for the learning rate momentum.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_54": {
                "name": {
                    "value": "hrnn_affine_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The initialization scale for the weight matrix of\\n                             the bias variables in layer0 and 1 of the hrnn.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "variable": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_644": {
                "variable": {
                    "value": "update_step",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lr_param * update_delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "state['true_param'].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_185": {
                "variable": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.hrnn_rnn_readout_scale / math.sqrt(cell_size)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "variable": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "update_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(cell_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor, seed=self.random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_251": {
                "variable": {
                    "value": "self.scl_decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scl_decay_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor, seed=self.random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_254": {
                "variable": {
                    "value": "scl_decay_bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "FLAGS.scale_decay_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_256": {
                "variable": {
                    "value": "self.scl_decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scl_decay_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scl_decay_bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(FLAGS.scale_decay_bias_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_260": {
                "variable": {
                    "value": "self.scl_decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_261": {
                "variable": {
                    "value": "self.scl_decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.93 / (1.0 - 0.93)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_272": {
                "variable": {
                    "value": "self.inp_decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "inp_decay_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "scaled_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, scale_factor, seed=self.random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_275": {
                "variable": {
                    "value": "inp_decay_bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "FLAGS.hrnn_default_decay_var_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_277": {
                "variable": {
                    "value": "self.inp_decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "inp_decay_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "inp_decay_bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(FLAGS.hrnn_default_decay_var_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_281": {
                "variable": {
                    "value": "self.inp_decay_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_282": {
                "variable": {
                    "value": "self.inp_decay_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.89 / (1.0 - 0.89)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_292": {
                "variable": {
                    "value": "zero_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_294": {
                "variable": {
                    "value": "self.lr_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "weights_tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "wt_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zero_init if self.zero_init_lr_weights else scaled_init",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_297": {
                "variable": {
                    "value": "self.lr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "zero_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "self.lr_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "self.lr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_337": {
                "variable": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "log_init_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(min_lr * tf.ones_like(var_vectorized))",
                            "Call"
                        ],
                        [
                            "actual_vals + offset",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-33",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.max_log_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_341": {
                "variable": {
                    "value": "state[grad_accum{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_342": {
                "variable": {
                    "value": "state[ms{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_498": {
                "variable": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_means_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.log(ms + 1e-16) for ms in mean_squared_gradients]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_510": {
                "variable": {
                    "value": "log_lr_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "state['log_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_526": {
                "variable": {
                    "value": "log_lr_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "state['log_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_604": {
                "variable": {
                    "value": "grads_scaled_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[g for g in grads_scaled]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_611": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(update_delta ** 2) + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_675": {
                "variable": {
                    "value": "lr_momentum_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_momentum_logit",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "FLAGS.learning_rate_momentum_logit_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_678": {
                "variable": {
                    "value": "lrm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_momentum_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('learning_rate_momentum_logit', initializer=FLAGS.learning_rate_momentum_logit_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_681": {
                "variable": {
                    "value": "param_stepsize_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_stepsize_offset",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_683": {
                "variable": {
                    "value": "lr_param",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step_log_lr + param_stepsize_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_196": {
                "variable": {
                    "value": "self.attention_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.update_weights.initialized_value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_311": {
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_312": {
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_324": {
                "variable": {
                    "value": "log_init_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_lr * tf.ones_like(var_vectorized)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_349": {
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_548": {
                "name_or_scope": {
                    "value": "Layer0_RNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_671": {
                "input": {
                    "value": "tf.clip_by_value(step_log_lr, -33, self.max_log_lr) - step_log_lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_712": {
                "variable": {
                    "value": "global_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat(layer_states, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_737": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Level{}_RNN'.format(level)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_310": {
                "shape": {
                    "value": "[ndim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_318": {
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_367": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad_unflat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_379": {
                "variable": {
                    "value": "rnn_input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[g for g in grads_scaled]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_432": {
                "input_tensor": {
                    "value": "state['log_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_457": {
                "x": {
                    "value": "input_decays[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_495": {
                "x": {
                    "value": "ms + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_571": {
                "name_or_scope": {
                    "value": "Layer1_RNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_574": {
                "variable": {
                    "value": "layer_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_param_state",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_576": {
                "variable": {
                    "value": "layer_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat((new_param_state, rnn_input_tensor), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_626": {
                "x": {
                    "value": "tf.reduce_mean(attention_delta ** 2) + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_684": {
                "x": {
                    "value": "step_log_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['log_learning_rate'] + lr_change",
                            "BinOp"
                        ],
                        [
                            "step_log_lr + tf.stop_gradient(tf.clip_by_value(step_log_lr, -33, self.max_log_lr) - step_log_lr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_710": {
                "name_or_scope": {
                    "value": "Layer2_RNN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_global_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_744": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_global_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_761": {
                "ref": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initialize_global_state()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "ngs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "PerTensor",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_393": {
                "variable": {
                    "value": "attention_step",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lr_attend * attention_delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "truth.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_453": {
                "x": {
                    "value": "scale_decays[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_521": {
                "features": {
                    "value": "log_lr_vec - tf.log(1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_522": {
                "features": {
                    "value": "tf.log(1e-06) - log_lr_vec",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_527": {
                "x": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_611": {
                "input_tensor": {
                    "value": "update_delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_672": {
                "t": {
                    "value": "step_log_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['log_learning_rate'] + lr_change",
                            "BinOp"
                        ],
                        [
                            "step_log_lr + tf.stop_gradient(tf.clip_by_value(step_log_lr, -33, self.max_log_lr) - step_log_lr)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-33",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.max_log_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_712": {
                "values": {
                    "value": "layer_states",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_768": {
                "ref": {
                    "value": "state_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_state[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_772": {
                "control_inputs": {
                    "value": "state_assign_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(state_var, new_state[key]) for (key, state_var) in state.items()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "name_scope_780": {
                "name": {
                    "value": "'update_' + var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_791": {
                "control_inputs": {
                    "value": "[self._finish(update_ops, 'update')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_234": {
                "initial_value": {
                    "value": "tf.random_uniform([1, hcell.state_size], -1.0, 1.0, seed=self.random_seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "init_vector",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_324": {
                "input": {
                    "value": "var_vectorized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(var, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_517": {
                "input_tensor": {
                    "value": "log_lr_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(state['log_learning_rate'], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(state['log_learning_rate'], [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_577": {
                "values": {
                    "value": "(new_param_state, rnn_input_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_627": {
                "input_tensor": {
                    "value": "attention_delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_747": {
                "name": {
                    "value": "global_state",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "gs[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._initialize_global_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_521": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_522": {
                "x": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_add_792": {
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/optimizer/learning_rate_schedule.py": {
        "tensorflow": {
            "constant_32": {
                "variable": {
                    "value": "self.max_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "n_steps - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_54": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "state['itr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.max_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_55": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.learning_rates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(state['itr'], self.max_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_35": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "self.learning_rates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rates",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(initial_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "trainable_optimizer.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_45": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_58": {
                "scalar": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.learning_rates, index)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/optimizer/rnn_cells.py": {
        "tensorflow": {
            "split_51": {
                "variable": {
                    "value": "(r_bias, u_bias, c_bias)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((1, 3))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "type(self).__name__",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "(r_lin, u_lin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.affine([inputs, state], 2 * self._num_units, scale=self._scale, bias_init=self._gate_bias_init, random_seed=self._random_seed)",
                            "Call"
                        ],
                        [
                            "utils.affine([inputs, r * state], self._num_units, scale=self._scale, random_seed=self._random_seed)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "candidate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "x": {
                    "value": "u_lin + u_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/optimizer/trainable_adam.py": {
        "tensorflow": {
            "get_variable_67": {
                "variable": {
                    "value": "self.log_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(np.log(learning_rate))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "self.beta1_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta1_logit",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(inv_sigmoid(beta1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "self.beta2_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta2_logit",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(inv_sigmoid(beta2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "self.log_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(np.log(epsilon))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta1_logit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta2_logit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_125": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_127": {
                "variable": {
                    "value": "old_grad_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(grad_values, [-1, 1])",
                            "Call"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(grad_values, [-1, 1])",
                            "Call"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate * debiased_first_moment / (tf.sqrt(debiased_second_moment + 1e-10) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(update, old_grad_shape)",
                            "Call"
                        ],
                        [
                            "utils.stack_tensor(update, grad_indices, param, param_shape[:1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "old_grad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(grad_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "shape": {
                    "value": "vectorized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(var.get_shape().num_elements(), 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "opt.OPTIMIZER_SCOPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_148": {
                "variable": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_124": {
                "x": {
                    "value": "self.log_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_134": {
                "x": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(grad_values, [-1, 1])",
                            "Call"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            },
            "pow_175": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_initializer_70": {
                "value": {
                    "value": "np.log(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_74": {
                "value": {
                    "value": "inv_sigmoid(beta1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_78": {
                "value": {
                    "value": "inv_sigmoid(beta2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_82": {
                "value": {
                    "value": "np.log(epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "x": {
                    "value": "debiased_second_moment + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/optimizer/trainable_optimizer.py": {
        "tensorflow": {
            "get_collection_ref_521": {
                "variable": {
                    "value": "variable_use_count",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "_LOCAL_STATE_VARIABLE_COLLECTION",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'local_state_collection'",
                            "str"
                        ]
                    ]
                }
            },
            "cond_551": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "return_init_values",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : init_values",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : local_vars",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_207": {
                "variable": {
                    "value": "obj_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_213": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_214": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_215": {
                "variable": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_216": {
                "variable": {
                    "value": "first_unroll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_217": {
                "variable": {
                    "value": "reset_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_347": {
                "variable": {
                    "value": "loop_output",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "loop_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[initial_itr, initial_meta_obj, initial_params, initial_attend_params, initial_state, initial_global_state, initial_problem_objectives, initial_obj, data, labels, batches]",
                            "List"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "invariants",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[initial_itr.get_shape(), initial_meta_obj.get_shape(), [t.get_shape() for t in initial_params], [t.get_shape() for t in initial_attend_params], state_shapes, global_shapes, tensor_shape.TensorShape([None]), initial_obj.get_shape(), tensor_shape.unknown_shape(), tensor_shape.unknown_shape(), tensor_shape.unknown_shape()]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_408": {
                "variable": {
                    "value": "initial_itr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_409": {
                "variable": {
                    "value": "initial_meta_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_411": {
                "variable": {
                    "value": "initial_problem_objectives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "initial_obj_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "problem.objective(initial_params, data, labels)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_268": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_269": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(data)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(batches, itr)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_270": {
                "variable": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(labels)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(batches, itr)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_294": {
                "variable": {
                    "value": "all_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[all_obj, tf.reshape(obj, (1,))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_299": {
                "variable": {
                    "value": "obj_accum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obj_accum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(obj_accum, acc)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(obj_weights, itr) * obj",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_327": {
                "variable": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "num_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(obj_weights)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_finite_328": {
                "variable": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obj_accum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(obj_accum, acc)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_527": {
                "name_or_scope": {
                    "value": "OPTIMIZER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LOL'",
                            "str"
                        ]
                    ]
                }
            },
            "assign_125": {
                "ref": {
                    "value": "state_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_state[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_127": {
                "control_inputs": {
                    "value": "state_assign_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(state_var, new_state[key]) for (key, state_var) in state.items()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "shape_208": {
                "input": {
                    "value": "obj_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_331": {
                "variable": {
                    "value": "current_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([all_obj, tf.reshape(obj, (1,))], 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_336": {
                "variable": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "problem.objective(attend_params, batch_data, batch_labels)",
                            "Call"
                        ],
                        [
                            "problem.objective(params, batch_data, batch_labels)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_obj, itr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_obj + max_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_457": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_490": {
                "variable": {
                    "value": "log_scaled_problem_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled_problem_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(all_objs + obj_scale_eps) / (initial_obj + obj_scale_eps)",
                            "BinOp"
                        ],
                        [
                            "all_objs / (initial_obj + obj_scale_eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_493": {
                "variable": {
                    "value": "log_scaled_problem_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled_problem_obj + obj_scale_eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_494": {
                "input_tensor": {
                    "value": "log_scaled_problem_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(scaled_problem_obj)",
                            "Call"
                        ],
                        [
                            "tf.log(scaled_problem_obj + obj_scale_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_297": {
                "params": {
                    "value": "obj_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "itr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_and_338": {
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(itr, num_iter)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(obj_accum)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_341": {
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(itr, num_iter)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(obj_accum)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "training_loop_cond",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_local_variable_542": {
                "name": {
                    "value": "unique_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + '_' + str(variable_use_count[name])",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros(init_value.get_shape(), dtype=init_value.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_294": {
                "tensor": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "problem.objective(params, data, labels)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_333": {
                "x": {
                    "value": "init_obj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_544": {
                "shape": {
                    "value": "init_value.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "init_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IndexedSlices_288": {
                "values": {
                    "value": "tf.stop_gradient(grad.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_290": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "variable"
                        ]
                    ]
                }
            },
            "stop_gradient_288": {
                "input": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/optimizer/utils.py": {
        "tensorflow": {
            "concat_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_129": {
                "variable": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.reduce_all(tf.equal(ms, 0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros_like(decay, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : decay",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "grad_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_174": {
                "variable": {
                    "value": "(grad_indices, grad_segments)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_175": {
                "variable": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "grad_segments",
                    "type": "variable",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "tf.shape(grad_indices)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([head_dims, tail_dims], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_211": {
                "variable": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_232": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_235": {
                "variable": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[head_dims, tail_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(dense_tensor, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(slices, tf.concat([[-1], dense_shape[1:]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([[-1], dense_shape[1:]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_238": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_262": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_265": {
                "variable": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[head_dims, tail_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_267": {
                "variable": {
                    "value": "update_mask_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_268": {
                "variable": {
                    "value": "reshaped_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_269": {
                "variable": {
                    "value": "update_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.scatter_nd(reshaped_indices, update_mask_vals, head_dims[:1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "reshaped_dense_slices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "stack_tensor(slices, indices, dense_tensor, head_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_274": {
                "variable": {
                    "value": "reshaped_dense_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_28": {
                "condition": {
                    "value": "tf.is_finite(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "replacement",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_33": {
                "x": {
                    "value": "x + tf.sqrt(1.0 + x ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_73": {
                "variable": {
                    "value": "rand_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "vec_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale / np.sqrt(input_size)",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "rand_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=vec_mean, stddev=sigma, seed=random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_125": {
                "variable": {
                    "value": "grad_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(gradient, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_213": {
                "tensor": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(dense_tensor, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(slices, tf.concat([[-1], dense_shape[1:]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([[-1], tail_dims], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "tensor": {
                    "value": "tf.scatter_nd(indices, slices, dense_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dense_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "tensor": {
                    "value": "tf.where(update_mask, reshaped_dense_slices, reshaped_dense_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dense_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_finite_28": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Affine'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_less_equal_121": {
                "x": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.reduce_all(tf.equal(ms, 0.0)), lambda : tf.zeros_like(decay, dtype=tf.float32), lambda : decay)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "summarize": {
                    "value": "decay_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decay.get_shape().num_elements()",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_greater_equal_122": {
                "x": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.reduce_all(tf.equal(ms, 0.0)), lambda : tf.zeros_like(decay, dtype=tf.float32), lambda : decay)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "summarize": {
                    "value": "decay_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decay.get_shape().num_elements()",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_124": {
                "control_inputs": {
                    "value": "decay_check_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assert_less_equal(decay, 1.0, summarize=decay_size), tf.assert_greater_equal(decay, 0.0, summarize=decay_size)]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_all_129": {
                "input_tensor": {
                    "value": "tf.equal(ms, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_207": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_209": {
                "values": {
                    "value": "[head_dims, tail_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_213": {
                "values": {
                    "value": "[[-1], tail_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_234": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_237": {
                "values": {
                    "value": "[[-1], dense_shape[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_240": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(dense_tensor, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(slices, tf.concat([[-1], dense_shape[1:]], 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([head_dims, tail_dims], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_241": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_264": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_267": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(indices, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_270": {
                "indices": {
                    "value": "reshaped_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(indices, -1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "update_mask_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.shape(indices), 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "head_dims[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_277": {
                "condition": {
                    "value": "update_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.scatter_nd(reshaped_indices, update_mask_vals, head_dims[:1]), 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "reshaped_dense_slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(stack_tensor(slices, indices, dense_tensor, head_dims), dense_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reshaped_dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, dense_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_278": {
                "input": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(dense_tensor, tf.concat([head_dims, tail_dims], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_33": {
                "x": {
                    "value": "1.0 + x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], dtype=tf.float32, initializer=rand_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_105": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_129": {
                "x": {
                    "value": "ms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_mean_squared(grad_vec, decay, ms)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_130": {
                "input": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.reduce_all(tf.equal(ms, 0.0)), lambda : tf.zeros_like(decay, dtype=tf.float32), lambda : decay)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_158": {
                "x": {
                    "value": "ms + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_176": {
                "input": {
                    "value": "grad_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_initializer_81": {
                "value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/problems/model_adapter.py": {
        "tensorflow": {
            "initialize_variables_78": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.parameters + self.constants",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_81": {
                "msg": {
                    "value": "ModelAdapter parameters: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "[op.name for op in self.parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "info_83": {
                "msg": {
                    "value": "ModelAdapter constants: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "[op.name for op in self.constants]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_153": {
                "name": {
                    "value": "unused_graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_176": {
                "msg": {
                    "value": "'Replaced %s with %s' % (self.name, replacement)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/problems/problem_generator.py": {
        "tensorflow": {
            "DEFINE_float_33": {
                "name": {
                    "value": "l2_reg_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Scaling factor for parameter value regularization\\n                             in softmax classifier problems.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_127": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "list(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.n_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "embedding_lookup_274": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "tf.cast(data, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_275": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_304": {
                "variable": {
                    "value": "one_hot_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(data, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "variable": {
                    "value": "one_hot_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "one_hot_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(data, tf.int32), self.n_classes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot_embeddings, [-1, self.n_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_306": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(data, tf.int32), self.n_classes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(one_hot_embeddings, [-1, self.n_classes])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_307": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_ids, self.n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_308": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_345": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.n_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_420": {
                "variable": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.affine_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_489": {
                "variable": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(128, self.affine_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_524": {
                "variable": {
                    "value": "mtx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_572": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_616": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_625": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_626": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_641": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_657": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_673": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_687": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_702": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_719": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_743": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_863": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "list(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_909": {
                "variable": {
                    "value": "min_sqr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "params_sqr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0] ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_910": {
                "variable": {
                    "value": "max_sqr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "params_sqr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0] ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_928": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(params[0] ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_929": {
                "variable": {
                    "value": "rad_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 / (radius + 1e-06) * data[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_932": {
                "variable": {
                    "value": "sin_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(sin_dist * data[:, 1:]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_1033": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "a_3d.reshape(n ** 4, n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_1034": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "b_3d.reshape(n ** 4, n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_1035": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "c_3d.reshape(n ** 4, n ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_1052": {
                "variable": {
                    "value": "p_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.a, theta_a) * tf.matmul(self.b, theta_b)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "p_trans",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_1053": {
                "variable": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.matrix_inverse(tf.matmul(p_trans, p))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "p_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(p, name='p_trans')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "p_inv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_1055": {
                "variable": {
                    "value": "theta_c",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matrix_inverse(tf.matmul(p_trans, p)), p_trans, name='p_inv')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "theta_c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_1058": {
                "variable": {
                    "value": "c_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.a, theta_a) * tf.matmul(self.b, theta_b)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "theta_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(p_inv, self.c, name='theta_c')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "c_hat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_1061": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(c_hat - self.c) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_159": {
                "t": {
                    "value": "tf.matmul(self.w, params[0]) - self.y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_204": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_205": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.inference(params, data)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_208": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_209": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(params, data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_211": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=labels, logits=logits[:, 0])",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_222": {
                "x": {
                    "value": "tf.argmax(tf.nn.softmax(logits), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_236": {
                "labels": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.argmax(self.inference(params, data))",
                            "Call"
                        ],
                        [
                            "self.argmax(self.activation(self.inference(params, data)))",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_368": {
                "labels": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.argmax(self.inference(params, data))",
                            "Call"
                        ],
                        [
                            "self.argmax(self.activation(self.inference(params, data)))",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_415": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_conv_list",
                            "variable"
                        ],
                        [
                            "w_conv_list[i]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_482": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_conv_list",
                            "variable"
                        ],
                        [
                            "w_conv_list[i]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_483": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(2, len(self.param_shapes), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv_input, w_conv, strides=[1] * 4, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv_input, w_conv, strides=[1, self.stride, self.stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(layer, b_conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(layer, training=training)",
                            "Call"
                        ],
                        [
                            "self.activation(layer)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_conv_list[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "batch_normalization_484": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(2, len(self.param_shapes), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv_input, w_conv, strides=[1] * 4, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv_input, w_conv, strides=[1, self.stride, self.stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(layer, b_conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(layer, training=training)",
                            "Call"
                        ],
                        [
                            "self.activation(layer)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mode == 'train'",
                            "Compare"
                        ]
                    ]
                }
            },
            "max_pool_486": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(2, len(self.param_shapes), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv_input, w_conv, strides=[1] * 4, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(conv_input, w_conv, strides=[1, self.stride, self.stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(layer, b_conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(layer, training=training)",
                            "Call"
                        ],
                        [
                            "self.activation(layer)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_525": {
                "t": {
                    "value": "tf.matmul(mtx, params[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_549": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "xm.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_550": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ym.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_574": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variables_initializer_603": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_618": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_629": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_645": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_661": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_675": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_690": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_704": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_731": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_747": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_867": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.zero_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_uniform(grad.get_shape())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_868": {
                "variable": {
                    "value": "zero_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "grads",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_891": {
                "input_tensor": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0][0] ** 2 + params[0][1:] ** 2 / (params[0][:-1] ** 2 + EPSILON)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_946": {
                "input_tensor": {
                    "value": "(params[0] * data) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1073": {
                "name_or_scope": {
                    "value": "PARAMETER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'parameters'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "PARAMETER_SCOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'parameters'",
                            "str"
                        ]
                    ]
                }
            },
            "IndexedSlices_133": {
                "variable": {
                    "value": "new_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grad.values + noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_222": {
                "input": {
                    "value": "tf.nn.softmax(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_236": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_253": {
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, (-1, self.n_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, (-1, self.n_features))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_274": {
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_276": {
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_303": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_304": {
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_309": {
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(all_embeddings, tf.cast(data, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_embeddings, all_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embeddings, [-1, num_ids, self.n_features])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(embeddings, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_348": {
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, (-1, self.n_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(data, (-1, self.n_features))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_368": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_423": {
                "a": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv_input, (-1, self.affine_size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_input, (128, self.affine_size))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bias_add_491": {
                "value": {
                    "value": "tf.matmul(flattened, output_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "output_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_525": {
                "a": {
                    "value": "mtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.matrix, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Graph_546": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_546": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_590": {
                "name": {
                    "value": "optimizee",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_592": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_593": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_594": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(100.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_599": {
                "input": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - x) ** 2 + c * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.objective([[x, y]])",
                            "Call"
                        ],
                        [
                            "(1 - x) ** 2 + 100 * (y - x ** 2) ** 2",
                            "BinOp"
                        ],
                        [
                            "x ** 2 - y ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.exp(x + 3.0 * y - 0.1) + tf.exp(x - 3.0 * y - 0.1) + tf.exp(-x - 0.1) + 1.0)",
                            "Call"
                        ],
                        [
                            "-20 * tf.exp(-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))) - tf.exp(0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))) + tf.exp(1.0) + 20.0",
                            "BinOp"
                        ],
                        [
                            "(1.5 - x + x * y) ** 2 + (2.25 - x + x * y ** 2) ** 2 + (2.625 - x + x * y ** 3) ** 2",
                            "BinOp"
                        ],
                        [
                            "(x + 2 * y - 7) ** 2 + (2 * x + y - 5) ** 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum([x ** 4 - 16 * x ** 2 + 5 * x for x in params], 0) + 80.0",
                            "BinOp"
                        ],
                        [
                            "0.26 * (x ** 2 + y ** 2) - 0.48 * x * y",
                            "BinOp"
                        ],
                        [
                            "a * (y - b * x ** 2 + c * x - r) ** 2 + s * (1 - t) * tf.cos(x) + s",
                            "BinOp"
                        ],
                        [
                            "2.0 - (tf.sin(x) * tf.sin(x ** 2 / np.pi) ** (2 * m) + tf.sin(y) * tf.sin(2 * y ** 2 / np.pi) ** (2 * m))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "obj + prob.objective(params[index:index + num_params])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_602": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_605": {
                "msg": {
                    "value": "Initializing model parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_716": {
                "values": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_821": {
                "a": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_823": {
                "input_tensor": {
                    "value": "(tf.abs(diff) + EPSILON) ** self.norm_power",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_840": {
                "x": {
                    "value": "EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                }
            },
            "reduce_sum_928": {
                "input_tensor": {
                    "value": "params[0] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_1042": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', [1])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=xm.shape)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape, dtype=tf.float32, seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1051": {
                "a": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "theta_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Variable_1074": {
                "initial_value": {
                    "value": "arr.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "initial_value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "a": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_222": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(params, data)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_352": {
                "a": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(preactivations)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_491": {
                "a": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv_input, (-1, self.affine_size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_input, (128, self.affine_size))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_591": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_644": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_688": {
                "input_tensor": {
                    "value": "[x ** 4 - 16 * x ** 2 + 5 * x for x in params]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_805": {
                "input_tensor": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_870": {
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(self.zero_prob, tf.random_uniform(grad.get_shape()))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "zero_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(grad, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "noisy_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad + self.noise_stdev * tf.random_normal(grad.get_shape())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_931": {
                "x": {
                    "value": "params[0][:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_961": {
                "input_tensor": {
                    "value": "data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_1042": {
                "x": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1054": {
                "a": {
                    "value": "p_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(p, name='p_trans')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.a, theta_a) * tf.matmul(self.b, theta_b)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_628": {
                "x": {
                    "value": "-x - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_643": {
                "x": {
                    "value": "0.5 * (tf.cos(2 * np.pi * x) + tf.cos(2 * np.pi * y))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_730": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('x', [1])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=xm.shape)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape, dtype=tf.float32, seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_745": {
                "x": {
                    "value": "x ** 2 / np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_746": {
                "x": {
                    "value": "2 * y ** 2 / np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_132": {
                "input": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_596": {
                "value": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_626": {
                "x": {
                    "value": "x + 3.0 * y - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_627": {
                "x": {
                    "value": "x - 3.0 * y - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_642": {
                "x": {
                    "value": "-0.2 * tf.sqrt(0.5 * (x ** 2 + y ** 2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_823": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.w, params[0]) - self.y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_642": {
                "x": {
                    "value": "0.5 * (x ** 2 + y ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_643": {
                "x": {
                    "value": "2 * np.pi * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "L2O-Scale/learned_optimizer/problems/problem_sets.py": {
        "tensorflow": {}
    }
}