{
    "MIL_dataloader.py": {
        "sklearn": {
            "train_test_split_18": {
                "variable": {
                    "value": "(X_train, X_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "66",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "traindataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "traindataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MIL_dataset(list_path=X_train, cluster_num=cluster_num, train=train, transform=transforms.Compose([ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "valdataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MIL_dataset(list_path=X_test, train=False, cluster_num=cluster_num, transform=transforms.Compose([ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testdataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MIL_dataset(list_path=data_path, cluster_num=cluster_num, train=False, transform=transforms.Compose([ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "sample['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "ndarray": {
                    "value": "sample['cluster_num']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "image[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "sklearn": {
            "KFold_339": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "666",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "exp_58": {
                "variable": {
                    "value": "exp_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_252": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_264": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_60": {
                "input": {
                    "value": "(theta - torch.log(torch.sum(exp_theta * train_R, dim=1))) * train_ystatus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_119": {
                "variable": {
                    "value": "l1_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_119": {
                "variable": {
                    "value": "l1_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "lbl_pred_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lbl_pred_all, lbl_pred]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "lbl_pred_each",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lbl_pred_each, lbl_pred]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "lbl_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lbl_torch, lbl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "survtime_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[survtime_torch, survtime]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_294": {
                "f": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./saved_model/NLST_model_fold_{}_c_{}.pth'.format(fold, cluster_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "lbl_pred_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lbl_pred_all, lbl_pred]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "lbl_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lbl_torch, lbl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "survtime_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[survtime_torch, survtime]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_cache_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_288": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save_path.replace('.pth', '_epoch_{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_121": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_219": {
                "variable": {
                    "value": "l1_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_219": {
                "variable": {
                    "value": "l1_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_60": {
                "input": {
                    "value": "torch.sum(exp_theta * train_R, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_221": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_60": {
                "input": {
                    "value": "exp_theta * train_R",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DeepAttnMISL_model.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.embedding_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4096, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_85": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(h)",
                            "Call"
                        ],
                        [
                            "torch.transpose(A, 1, 0)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(A, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_90": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(h)",
                            "Call"
                        ],
                        [
                            "torch.transpose(A, 1, 0)",
                            "Call"
                        ],
                        [
                            "self.masked_softmax(A, mask)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(res)",
                            "Call"
                        ],
                        [
                            "h.view(b, c)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_26": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Early_Stopping.py": {
        "torch": {
            "save_50": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}