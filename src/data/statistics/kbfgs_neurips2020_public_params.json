{
    "first_order_methods.py": {
        "torch": {}
    },
    "functions_utils.py": {
        "torch": {
            "cross_entropy_12": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "delta_l[W]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "layers_params[l]['output_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "layers_params[l]['input_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "delta_l[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "layers_params[l]['output_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "torch_t_mb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t[i:i + N1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_355": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y == torch_t).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "homo_model_grad_N1_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(model_grad_N1[l]['W'], model_grad_N1[l]['b'].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sub_87": {
                "variable": {
                    "value": "diff_p_l[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "model_grad[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "delta[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "p_torch_l[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_170": {
                "variable": {
                    "value": "alpha_p_l[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "delta[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_274": {
                "variable": {
                    "value": "sqaure_p_l[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_1[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "delta_1[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_292": {
                "variable": {
                    "value": "sqaure_p_l[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_1[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_301": {
                "variable": {
                    "value": "sqaure_p_l[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_1[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "div_321": {
                "variable": {
                    "value": "sqaure_p_l[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_1[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "delta_2[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_358": {
                "variable": {
                    "value": "z_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "p[l][key] != p[l][key]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "ndarray": {
                    "value": "x[i:i + N1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_329": {
                "input": {
                    "value": "torch.mul(delta_1[l][key], delta_2[l][key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_337": {
                "input": {
                    "value": "torch.mul(delta_1[l][key], delta_2[l][key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_364": {
                "variable": {
                    "value": "z_sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MSELoss_365": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_14": {
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(z, t, reduction=reduction)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float().unsqueeze_(1))",
                            "Call"
                        ],
                        [
                            "loss.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction='sum')(z, t.float())",
                            "Call"
                        ],
                        [
                            "loss / z.size(0) / z.size(1)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction='sum')(z, t.float())",
                            "Call"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='sum')(z, t) / 2",
                            "BinOp"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='none')(z, t) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='sum')(z, t)",
                            "Call"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='none')(z, t)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "get_loss_from_z(model, z, t, reduction)",
                            "Call"
                        ],
                        [
                            "loss + 0.5 * tau * get_dot_product_torch(model.layers_weight, model.layers_weight)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_329": {
                "input": {
                    "value": "delta_1[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "delta_2[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_337": {
                "input": {
                    "value": "delta_1[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "delta_2[l][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(z, t, reduction=reduction)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float().unsqueeze_(1))",
                            "Call"
                        ],
                        [
                            "loss.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction='sum')(z, t.float())",
                            "Call"
                        ],
                        [
                            "loss / z.size(0) / z.size(1)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction='sum')(z, t.float())",
                            "Call"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='sum')(z, t) / 2",
                            "BinOp"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='none')(z, t) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='sum')(z, t)",
                            "Call"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='none')(z, t)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "get_loss_from_z(model, z, t, reduction)",
                            "Call"
                        ],
                        [
                            "loss + 0.5 * tau * get_dot_product_torch(model.layers_weight, model.layers_weight)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_20": {
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MSELoss_370": {
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_23": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_31": {
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(z, t, reduction=reduction)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float().unsqueeze_(1))",
                            "Call"
                        ],
                        [
                            "loss.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction='sum')(z, t.float())",
                            "Call"
                        ],
                        [
                            "loss / z.size(0) / z.size(1)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction='sum')(z, t.float())",
                            "Call"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='sum')(z, t) / 2",
                            "BinOp"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='none')(z, t) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='sum')(z, t)",
                            "Call"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='none')(z, t)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "get_loss_from_z(model, z, t, reduction)",
                            "Call"
                        ],
                        [
                            "loss + 0.5 * tau * get_dot_product_torch(model.layers_weight, model.layers_weight)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_27": {
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_34": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(z, t, reduction=reduction)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float().unsqueeze_(1))",
                            "Call"
                        ],
                        [
                            "loss.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction='sum')(z, t.float())",
                            "Call"
                        ],
                        [
                            "loss / z.size(0) / z.size(1)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction='sum')(z, t.float())",
                            "Call"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='sum')(z, t) / 2",
                            "BinOp"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(z, t.float())",
                            "Call"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='none')(z, t) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='sum')(z, t)",
                            "Call"
                        ],
                        [
                            "loss / z.size(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.MSELoss(reduction='none')(z, t)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "get_loss_from_z(model, z, t, reduction)",
                            "Call"
                        ],
                        [
                            "loss + 0.5 * tau * get_dot_product_torch(model.layers_weight, model.layers_weight)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_38": {
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MSELoss_43": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_53": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_47": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_57": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "kbfgs_utils.py": {
        "torch": {
            "dot_223": {
                "variable": {
                    "value": "s_T_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_l_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(data_['a_N2'][l], dim=0).data - torch.mean(a_next[l], dim=0).data",
                            "BinOp"
                        ],
                        [
                            "data_['Kron_BFGS_momentum_s_y'][l]['s']",
                            "Subscript"
                        ],
                        [
                            "theta * s_l_a + (1 - theta) * Hy",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y_l_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mean_a_grad_l - mean_a_grad_next_l",
                            "BinOp"
                        ],
                        [
                            "data_['Kron_BFGS_momentum_s_y'][l]['y']",
                            "Subscript"
                        ],
                        [
                            "theta * y_l_a + (1 - theta) * s_l_a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_234": {
                "variable": {
                    "value": "yHy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_l_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mean_a_grad_l - mean_a_grad_next_l",
                            "BinOp"
                        ],
                        [
                            "data_['Kron_BFGS_momentum_s_y'][l]['y']",
                            "Subscript"
                        ],
                        [
                            "theta * y_l_a + (1 - theta) * s_l_a",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Hy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LBFGS_Hv(y_l_a, data_['Kron_LBFGS_s_y_pairs']['a'][l], params)",
                            "Call"
                        ],
                        [
                            "torch.mv(H_l_a_grad, y_l_a)",
                            "Call"
                        ],
                        [
                            "torch.mv(H, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_258": {
                "variable": {
                    "value": "s_T_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_l_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(data_['a_N2'][l], dim=0).data - torch.mean(a_next[l], dim=0).data",
                            "BinOp"
                        ],
                        [
                            "data_['Kron_BFGS_momentum_s_y'][l]['s']",
                            "Subscript"
                        ],
                        [
                            "theta * s_l_a + (1 - theta) * Hy",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "s_l_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(data_['a_N2'][l], dim=0).data - torch.mean(a_next[l], dim=0).data",
                            "BinOp"
                        ],
                        [
                            "data_['Kron_BFGS_momentum_s_y'][l]['s']",
                            "Subscript"
                        ],
                        [
                            "theta * s_l_a + (1 - theta) * Hy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_259": {
                "variable": {
                    "value": "s_T_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_l_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(data_['a_N2'][l], dim=0).data - torch.mean(a_next[l], dim=0).data",
                            "BinOp"
                        ],
                        [
                            "data_['Kron_BFGS_momentum_s_y'][l]['s']",
                            "Subscript"
                        ],
                        [
                            "theta * s_l_a + (1 - theta) * Hy",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y_l_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mean_a_grad_l - mean_a_grad_next_l",
                            "BinOp"
                        ],
                        [
                            "data_['Kron_BFGS_momentum_s_y'][l]['y']",
                            "Subscript"
                        ],
                        [
                            "theta * y_l_a + (1 - theta) * s_l_a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_349": {
                "variable": {
                    "value": "dot_new_y_new_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "s.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_350": {
                "variable": {
                    "value": "dot_new_s_new_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "s.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dot_443": {
                "variable": {
                    "value": "rho_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "s.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mv_452": {
                "variable": {
                    "value": "Hy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "H_new",
                            "Name"
                        ]
                    ]
                },
                "vec": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_347": {
                "variable": {
                    "value": "dot_gk_gk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_k.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "g_k.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_418": {
                "variable": {
                    "value": "R_inv_sT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_y_pairs['R_inv']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "s_y_pairs['s']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_457": {
                "input": {
                    "value": "torch.isinf(H_new)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "mean_a_grad_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_['a_grad_N2'][l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_117": {
                "variable": {
                    "value": "mean_a_grad_next_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_grad_next[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mv_231": {
                "variable": {
                    "value": "Hy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_l_a_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Kron_BFGS_matrices_l['H']['a_grad']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['a_grad']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['a_grad']",
                            "Subscript"
                        ]
                    ]
                },
                "vec": {
                    "value": "y_l_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mean_a_grad_l - mean_a_grad_next_l",
                            "BinOp"
                        ],
                        [
                            "data_['Kron_BFGS_momentum_s_y'][l]['y']",
                            "Subscript"
                        ],
                        [
                            "theta * y_l_a + (1 - theta) * s_l_a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_284": {
                "variable": {
                    "value": "delta_l_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_l_a_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Kron_BFGS_matrices_l['H']['a_grad']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['a_grad']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['a_grad']",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "model_homo_grad[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_297": {
                "variable": {
                    "value": "delta_l_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_l_W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LBFGS_Hv(model_homo_grad[l], data_['Kron_LBFGS_s_y_pairs']['a'][l], params)",
                            "Call"
                        ],
                        [
                            "torch.mm(H_l_a_grad, model_homo_grad[l])",
                            "Call"
                        ],
                        [
                            "LBFGS_Hv(delta_l_W.t(), data_['Kron_LBFGS_s_y_pairs']['h'][l], params)",
                            "Call"
                        ],
                        [
                            "delta_l_W.t()",
                            "Call"
                        ],
                        [
                            "torch.mm(delta_l_W, H_l_h)",
                            "Call"
                        ],
                        [
                            "torch.mm(delta_l_W, H_l_h)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "H_l_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['A_inv']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_370": {
                "variable": {
                    "value": "s_y_pairs[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_y_pairs['s'], s.t())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "s_y_pairs[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_y_pairs['y'], y.t())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_374": {
                "variable": {
                    "value": "s_y_pairs[yTy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "s_y_pairs['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "s_y_pairs['y'].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_376": {
                "variable": {
                    "value": "yT_new_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_y_pairs['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_378": {
                "variable": {
                    "value": "s_y_pairs[yTy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_y_pairs['yTy'], yT_new_y[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "s_y_pairs[yTy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_y_pairs['yTy'], yT_new_y.t())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_382": {
                "variable": {
                    "value": "s_y_pairs[D_diag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "s_y_pairs['s']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "s_y_pairs['y'].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_389": {
                "variable": {
                    "value": "sT_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_y_pairs['s']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_391": {
                "variable": {
                    "value": "s_y_pairs[D_diag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_y_pairs['D_diag'], sT_y[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_396": {
                "variable": {
                    "value": "B_22",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "B_22",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 / sT_y[-1][-1].item()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(B_22, device=device)",
                            "Call"
                        ],
                        [
                            "B_22.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "B_22.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_402": {
                "variable": {
                    "value": "s_y_pairs[R_inv]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.cat((s_y_pairs['R_inv'], torch.zeros(1, s_y_pairs['R_inv'].size(1), device=params['device'])), dim=0), torch.cat((-B_22 * torch.mm(s_y_pairs['R_inv'], sT_y[:-1]), B_22), dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "s_y_pairs[left_matrix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(R_inv_sT.t(), gamma * s_y_pairs['y'].t())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "s_y_pairs[right_matrix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.mm(torch.diag(s_y_pairs['D_diag']) + gamma * s_y_pairs['yTy'], R_inv_sT) - gamma * s_y_pairs['y'], -R_inv_sT)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_457": {
                "input": {
                    "value": "H_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "H.data + (rho ** 2 * torch.dot(y, torch.mv(H, y)) + rho) * torch.ger(s, s) - rho * (torch.ger(s, Hy) + torch.ger(Hy, s))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_64": {
                "variable": {
                    "value": "Kron_BFGS_matrices_l[H][h]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "data_['h_N2'][l].size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_67": {
                "variable": {
                    "value": "Kron_BFGS_matrices_l[H][a_grad]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "data_['a_grad_N2'][l].size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "homo_h_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_['h_N2'][l], torch.ones(N1, 1, device=device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "mean_h_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean_h_l, torch.ones(1, device=params['device']))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mv_175": {
                "variable": {
                    "value": "y_l_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kron_BFGS_matrices_l['A_LM']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec": {
                    "value": "s_l_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LBFGS_Hv(mean_h_l, data_['Kron_LBFGS_s_y_pairs']['h'][l], params)",
                            "Call"
                        ],
                        [
                            "torch.mv(H_l_h, mean_h_l)",
                            "Call"
                        ],
                        [
                            "s_l_h * np.sqrt(params['alpha'])",
                            "BinOp"
                        ],
                        [
                            "torch.mv(H_l_h, mean_h_l)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_302": {
                "variable": {
                    "value": "delta_l_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_l_W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LBFGS_Hv(model_homo_grad[l], data_['Kron_LBFGS_s_y_pairs']['a'][l], params)",
                            "Call"
                        ],
                        [
                            "torch.mm(H_l_a_grad, model_homo_grad[l])",
                            "Call"
                        ],
                        [
                            "LBFGS_Hv(delta_l_W.t(), data_['Kron_LBFGS_s_y_pairs']['h'][l], params)",
                            "Call"
                        ],
                        [
                            "delta_l_W.t()",
                            "Call"
                        ],
                        [
                            "torch.mm(delta_l_W, H_l_h)",
                            "Call"
                        ],
                        [
                            "torch.mm(delta_l_W, H_l_h)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "H_l_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['A_inv']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_333": {
                "input": {
                    "value": "right_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_y_pairs['right_matrix']",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_199": {
                "variable": {
                    "value": "s_l_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_l_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['A_inv']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ]
                    ]
                },
                "vec": {
                    "value": "mean_h_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(data_['h_N2'][l], dim=0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat((mean_h_l, torch.ones(1, device=params['device'])), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(data_['h_N2'][l], dim=0).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ger_454": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "s.data",
                            "Attribute"
                        ]
                    ]
                },
                "vec2": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "s.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ger_455": {
                "input": {
                    "value": "Hy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LBFGS_Hv(y_l_a, data_['Kron_LBFGS_s_y_pairs']['a'][l], params)",
                            "Call"
                        ],
                        [
                            "torch.mv(H_l_a_grad, y_l_a)",
                            "Call"
                        ],
                        [
                            "torch.mv(H, y)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "s.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_113": {
                "input": {
                    "value": "a_next[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_155": {
                "input": {
                    "value": "data_['h_N2'][l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mv_172": {
                "variable": {
                    "value": "s_l_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_l_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['A_inv']",
                            "Subscript"
                        ],
                        [
                            "Kron_BFGS_matrices_l['H']['h']",
                            "Subscript"
                        ]
                    ]
                },
                "vec": {
                    "value": "mean_h_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(data_['h_N2'][l], dim=0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat((mean_h_l, torch.ones(1, device=params['device'])), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(data_['h_N2'][l], dim=0).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_404": {
                "tensors": {
                    "value": "(s_y_pairs['R_inv'], torch.zeros(1, s_y_pairs['R_inv'].size(1), device=params['device']))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "tensors": {
                    "value": "(-B_22 * torch.mm(s_y_pairs['R_inv'], sT_y[:-1]), B_22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_447": {
                "input": {
                    "value": "g_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "g_k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_79": {
                "*size": {
                    "value": "N1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['N1']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_91": {
                "n": {
                    "value": "Kron_BFGS_matrices_l['A'].size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_159": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "params['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_197": {
                "input": {
                    "value": "data_['h_N2'][l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_203": {
                "input": {
                    "value": "h_next[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_426": {
                "input": {
                    "value": "torch.diag(s_y_pairs['D_diag']) + gamma * s_y_pairs['yTy']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "R_inv_sT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(s_y_pairs['R_inv'], s_y_pairs['s'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_435": {
                "input": {
                    "value": "s_y_pairs['yTy']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "R_inv_sT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(s_y_pairs['R_inv'], s_y_pairs['s'])",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_454": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(H, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_405": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "s_y_pairs['R_inv'].size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "params['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mv_454": {
                "input": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "H_new",
                            "Name"
                        ]
                    ]
                },
                "vec": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "y.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_84": {
                "input": {
                    "value": "homo_h_l.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "homo_h_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((data_['h_N2'][l], torch.ones(N1, 1, device=device)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_408": {
                "input": {
                    "value": "s_y_pairs['R_inv']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sT_y[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_426": {
                "input": {
                    "value": "s_y_pairs['D_diag']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kfac_utils.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "homo_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_N2[l], torch.ones(N2, 1, device=device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_71": {
                "input": {
                    "value": "G_inv[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "homo_model_grad[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_52": {
                "input": {
                    "value": "a_grad_N2[l].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "a_grad_N2[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "N2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['N2']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_54": {
                "input": {
                    "value": "homo_h.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "homo_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((h_N2[l], torch.ones(N2, 1, device=device)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_64": {
                "n": {
                    "value": "A[l].size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_65": {
                "n": {
                    "value": "G[l].size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "ModuleList_76": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "post_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a_",
                            "Name"
                        ]
                    ]
                }
            },
            "sigmoid_125": {
                "variable": {
                    "value": "post_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a_",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "layers_params[l]['input_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers_params[l]['output_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "training_utils.py": {
        "torch": {
            "softmax_205": {
                "variable": {
                    "value": "pred_dist_N2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z[N2_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "t_mb_pred_N2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_mb_pred_N2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(WeightedRandomSampler(pred_dist_N2, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_mb_pred_N2)",
                            "Call"
                        ],
                        [
                            "t_mb_pred_N2.squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "t_mb_pred_N2.to(params['device'])",
                            "Call"
                        ],
                        [
                            "np.random.binomial(n=1, p=pred_dist_N2)",
                            "Call"
                        ],
                        [
                            "np.squeeze(t_mb_pred_N2, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(t_mb_pred_N2).long()",
                            "Call"
                        ],
                        [
                            "torch.distributions.Bernoulli(pred_dist_N2).sample()",
                            "Call"
                        ],
                        [
                            "t_mb_pred_N2",
                            "Name"
                        ],
                        [
                            "torch.distributions.Normal(loc=z[N2_index], scale=1 / 2).sample()",
                            "Call"
                        ],
                        [
                            "torch.distributions.Normal(loc=z[N2_index], scale=1).sample()",
                            "Call"
                        ],
                        [
                            "sample_from_pred_dist(z, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_215": {
                "variable": {
                    "value": "t_mb_pred_N2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_mb_pred_N2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(WeightedRandomSampler(pred_dist_N2, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_mb_pred_N2)",
                            "Call"
                        ],
                        [
                            "t_mb_pred_N2.squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "t_mb_pred_N2.to(params['device'])",
                            "Call"
                        ],
                        [
                            "np.random.binomial(n=1, p=pred_dist_N2)",
                            "Call"
                        ],
                        [
                            "np.squeeze(t_mb_pred_N2, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(t_mb_pred_N2).long()",
                            "Call"
                        ],
                        [
                            "torch.distributions.Bernoulli(pred_dist_N2).sample()",
                            "Call"
                        ],
                        [
                            "t_mb_pred_N2",
                            "Name"
                        ],
                        [
                            "torch.distributions.Normal(loc=z[N2_index], scale=1 / 2).sample()",
                            "Call"
                        ],
                        [
                            "torch.distributions.Normal(loc=z[N2_index], scale=1).sample()",
                            "Call"
                        ],
                        [
                            "sample_from_pred_dist(z, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "X_mb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_mb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_mb).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_mb).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_mb).to(device)",
                            "Call"
                        ],
                        [
                            "data_['X_mb']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "WeightedRandomSampler_207": {
                "weights": {
                    "value": "pred_dist_N2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(z[N2_index], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(a[-1][N2_index]).cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(z[N2_index]).data",
                            "Attribute"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Bernoulli_220": {
                "variable": {
                    "value": "t_mb_pred_N2",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "pred_dist_N2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(z[N2_index], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(a[-1][N2_index]).cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(z[N2_index]).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "layersizes[l] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "layersizes[l] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "layersizes[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "layersizes[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_77": {
                "variable": {
                    "value": "homo_h_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h[l], torch.ones(N1, 1, device=device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "X_mb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_mb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_mb).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_mb).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_mb).to(device)",
                            "Call"
                        ],
                        [
                            "data_['X_mb']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "t_mb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_mb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(t_mb).to(device)",
                            "Call"
                        ],
                        [
                            "data_['t_mb']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "Kron_BFGS_momentum_s_y_l[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "layersizes[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "Kron_BFGS_momentum_s_y_l[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "layersizes[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "Kron_BFGS_matrices_l[A]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "size_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers_params[l]['input_size'] + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "size_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers_params[l]['input_size'] + 1",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Normal_224": {
                "variable": {
                    "value": "t_mb_pred_N2",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z[N2_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "X_mb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_mb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_mb).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_mb).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_mb).to(device)",
                            "Call"
                        ],
                        [
                            "data_['X_mb']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_219": {
                "input": {
                    "value": "z[N2_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Normal_227": {
                "variable": {
                    "value": "t_mb_pred_N2",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z[N2_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "homo_h_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h[l], torch.ones(N1, 1, device=device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_212": {
                "input": {
                    "value": "a[-1][N2_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "N1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['N1']",
                            "Subscript"
                        ],
                        [
                            "params['N1']",
                            "Subscript"
                        ],
                        [
                            "params['N1']",
                            "Subscript"
                        ],
                        [
                            "params['N1']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_78": {
                "input": {
                    "value": "homo_h_l.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "homo_h_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((h[l], torch.ones(N1, 1, device=device)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((h[l], torch.ones(N1, 1, device=device)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_82": {
                "input": {
                    "value": "a[l].grad.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "a[l].grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_188": {
                "*size": {
                    "value": "N1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['N1']",
                            "Subscript"
                        ],
                        [
                            "params['N1']",
                            "Subscript"
                        ],
                        [
                            "params['N1']",
                            "Subscript"
                        ],
                        [
                            "params['N1']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ],
                        [
                            "params['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_189": {
                "input": {
                    "value": "homo_h_l.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "homo_h_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((h[l], torch.ones(N1, 1, device=device)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((h[l], torch.ones(N1, 1, device=device)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}