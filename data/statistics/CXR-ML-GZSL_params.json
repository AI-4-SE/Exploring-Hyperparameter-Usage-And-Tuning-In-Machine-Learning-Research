{
    "ChexnetTrainer.py": {
        "sklearn": {
            "roc_auc_score_285": {
                "y_true": {
                    "value": "datanpGT[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "datanpPRED[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_27": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_32": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_35": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_38": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "self.train_dl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasetTrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NIHChestXray(self.args, self.args.train_file, transform=transforms.Compose(train_transforms))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "self.val_dl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasetVal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NIHChestXray(self.args, self.args.val_file, transform=transforms.Compose(test_transforms))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "self.test_dl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasetTest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NIHChestXray(self.args, self.args.test_file, transform=transforms.Compose(test_transforms), classes_to_load='all')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.load_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.resume_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_95": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'state_dict': self.model.state_dict(), 'max_auroc_mean': self.max_auroc_mean, 'optimizer': self.optimizer.state_dict(), 'lossMIN': self.lossMIN}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{self.args.save_dir}/{prefix}_checkpoint.pth.tar'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "cat_237": {
                "variable": {
                    "value": "outPRED",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outPRED, varOutput)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "outGT",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outGT, target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "outGT",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outGT, target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "outPRED",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outPRED, out.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_121": {
                "tensors": {
                    "value": "[transforms.ToTensor()(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_122": {
                "tensors": {
                    "value": "[normalize(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "tensor_136": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._imdb[index]['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "imageLabel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "variable": {
                    "value": "imageLabel",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "softmax_22": {
                "variable": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1 / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_23": {
                "variable": {
                    "value": "emb2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb2 / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_24": {
                "variable": {
                    "value": "loss_kldiv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_softmax(emb2 / self.temperature, dim=1)",
                            "Call"
                        ],
                        [
                            "emb2",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(emb1 / self.temperature, dim=1).detach()",
                            "Call"
                        ],
                        [
                            "emb1",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_25": {
                "variable": {
                    "value": "loss_kldiv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_kldiv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kl_div(emb2, emb1, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.sum(loss_kldiv, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_kldiv)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "loss_kldiv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_kldiv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kl_div(emb2, emb1, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.sum(loss_kldiv, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_kldiv)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "loss_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_59": {
                "input": {
                    "value": "torch.diagonal(torch.mm(a_norm, b_norm.t()), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diagonal_59": {
                "input": {
                    "value": "torch.mm(a_norm, b_norm.t())",
                    "type": "Call",
                    "possible_values": []
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_59": {
                "input": {
                    "value": "a_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_emb / v_emb.norm(dim=1)[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_norm.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{args.save_dir}/min_loss_checkpoint.pth.tar'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{args.save_dir}/best_auroc_checkpoint.pth.tar'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1002",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "zsl_models.py": {
        "torch": {
            "zeros_80": {
                "variable": {
                    "value": "lossvalue_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "loss_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "loss_allignment_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "loss_mapping_consistency",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_134": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / a.norm(dim=1)[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_norm.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "mapped_labels_embd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mapped_labels_embd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mapped_labels_embd)",
                            "Call"
                        ]
                    ]
                }
            },
            "Identity_34": {
                "variable": {
                    "value": "self.vision_backbone.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d_visual",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_visual, self.args.num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoints/bce_only_imagenet/last_epoch_checkpoint.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "BCELoss_46": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_visual, self.args.num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "self.textual_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.textual_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_visual, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.fc_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_textual, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_106": {
                "variable": {
                    "value": "loss_mapping_consistency",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_orig_sim - text_mapped_sim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "loss_mapping_consistency",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_29": {
                "*args": {
                    "value": "d_visual",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "d_visual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_layer.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "d_visual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_layer.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "d_visual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_layer.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "d_textual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.textual_embeddings.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}